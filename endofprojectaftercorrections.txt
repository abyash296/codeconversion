USE [BillingSystem]
GO
/****** Object:  StoredProcedure [dbo].[sp_OUTBOUND_INVOICE]    Script Date: 23-05-2025 18:26:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[sp_OUTBOUND_INVOICE_old_1]
    @CoNum VARCHAR(50),
    @WhNum VARCHAR(50),
    @fromDateStorage DATETIME,
    @toDateStorage DATETIME
AS
BEGIN
    SET NOCOUNT ON;

    -- DROP any leftover temp-tables from previous runs
    IF OBJECT_ID('tempdb..#reee')       IS NOT NULL DROP TABLE #reee;
    IF OBJECT_ID('tempdb..#mylist')     IS NOT NULL DROP TABLE #mylist;
    IF OBJECT_ID('tempdb..#mylistinv')  IS NOT NULL DROP TABLE #mylistinv;
    IF OBJECT_ID('tempdb..#wsettingy')  IS NOT NULL DROP TABLE #wsettingy;
    IF OBJECT_ID('tempdb..#wsetting')   IS NOT NULL DROP TABLE #wsetting;
    IF OBJECT_ID('tempdb..#groupPonew') IS NOT NULL DROP TABLE #groupPonew;
    IF OBJECT_ID('tempdb..#groupPonew78') IS NOT NULL DROP TABLE #groupPonew78;
    IF OBJECT_ID('tempdb..#groupPonew88') IS NOT NULL DROP TABLE #groupPonew88;
    IF OBJECT_ID('tempdb..#groupPonew889') IS NOT NULL DROP TABLE #groupPonew889;
    IF OBJECT_ID('tempdb..#groupPonew2') IS NOT NULL DROP TABLE #groupPonew2;
    IF OBJECT_ID('tempdb..#mylistfinal') IS NOT NULL DROP TABLE #mylistfinal;
    IF OBJECT_ID('tempdb..#resnew') IS NOT NULL DROP TABLE #resnew;
    IF OBJECT_ID('tempdb..#mylistfinal5') IS NOT NULL DROP TABLE #mylistfinal5;
    IF OBJECT_ID('tempdb..#mylistfinal2') IS NOT NULL DROP TABLE #mylistfinal2;
    IF OBJECT_ID('tempdb..#mylistinvoice') IS NOT NULL DROP TABLE #mylistinvoice;
    IF OBJECT_ID('tempdb..#mylistpaletid') IS NOT NULL DROP TABLE #mylistpaletid;
    IF OBJECT_ID('tempdb..#resultgroup') IS NOT NULL DROP TABLE #resultgroup;
    IF OBJECT_ID('tempdb..#oo56') IS NOT NULL DROP TABLE #oo56;
    IF OBJECT_ID('tempdb..#txt22') IS NOT NULL DROP TABLE #txt22;
    IF OBJECT_ID('tempdb..#wsettingyfind') IS NOT NULL DROP TABLE #wsettingyfind;
    IF OBJECT_ID('tempdb..#result2666') IS NOT NULL DROP TABLE #result2666;
    IF OBJECT_ID('tempdb..#resnu') IS NOT NULL DROP TABLE #resnu;
    IF OBJECT_ID('tempdb..#wresult') IS NOT NULL DROP TABLE #wresult;
    IF OBJECT_ID('tempdb..#takeoff') IS NOT NULL DROP TABLE #takeoff;
    IF OBJECT_ID('tempdb..#foundsettingcustomer') IS NOT NULL DROP TABLE #foundsettingcustomer;
    IF OBJECT_ID('tempdb..#tempAllRates') IS NOT NULL DROP TABLE #tempAllRates;
    IF OBJECT_ID('tempdb..#rt') IS NOT NULL DROP TABLE #rt;
    IF OBJECT_ID('tempdb..#rt1') IS NOT NULL DROP TABLE #rt1;
    IF OBJECT_ID('tempdb..#rt12') IS NOT NULL DROP TABLE #rt12;
    IF OBJECT_ID('tempdb..#rt1515') IS NOT NULL DROP TABLE #rt1515;
    IF OBJECT_ID('tempdb..#rt15150') IS NOT NULL DROP TABLE #rt15150;
    IF OBJECT_ID('tempdb..#rt1220') IS NOT NULL DROP TABLE #rt1220;
    IF OBJECT_ID('tempdb..#rt12200') IS NOT NULL DROP TABLE #rt12200;
    IF OBJECT_ID('tempdb..#rt120') IS NOT NULL DROP TABLE #rt120;
    IF OBJECT_ID('tempdb..#un120') IS NOT NULL DROP TABLE #un120;
    IF OBJECT_ID('tempdb..#rt1200') IS NOT NULL DROP TABLE #rt1200;
    IF OBJECT_ID('tempdb..#rt11') IS NOT NULL DROP TABLE #rt11;
    IF OBJECT_ID('tempdb..#ress1') IS NOT NULL DROP TABLE #ress1;
    IF OBJECT_ID('tempdb..#result45') IS NOT NULL DROP TABLE #result45;
    IF OBJECT_ID('tempdb..#resultpalletid') IS NOT NULL DROP TABLE #resultpalletid;
    IF OBJECT_ID('tempdb..#TempAudiView') IS NOT NULL DROP TABLE #TempAudiView;
    IF OBJECT_ID('tempdb..#calresult') IS NOT NULL DROP TABLE #calresult;
    IF OBJECT_ID('tempdb..#result10checkinv') IS NOT NULL DROP TABLE #result10checkinv;
    IF OBJECT_ID('tempdb..#groupPonewbyloca') IS NOT NULL DROP TABLE #groupPonewbyloca;
    IF OBJECT_ID('tempdb..#pickTable2') IS NOT NULL DROP TABLE #pickTable2;
    IF OBJECT_ID('tempdb..#totalProdcuts') IS NOT NULL DROP TABLE #totalProdcuts;
    IF OBJECT_ID('tempdb..#myquery') IS NOT NULL DROP TABLE #myquery;
    IF OBJECT_ID('tempdb..#LastMyList12') IS NOT NULL DROP TABLE #LastMyList12;
    IF OBJECT_ID('tempdb..#LastMyList123') IS NOT NULL DROP TABLE #LastMyList123;
    IF OBJECT_ID('tempdb..#Wunloadf1515') IS NOT NULL DROP TABLE #Wunloadf1515;
    IF OBJECT_ID('tempdb..#wunloadf') IS NOT NULL DROP TABLE #wunloadf;
    IF OBJECT_ID('tempdb..#LastMyList120') IS NOT NULL DROP TABLE #LastMyList120;
    IF OBJECT_ID('tempdb..#LastMyList120_2') IS NOT NULL DROP TABLE #LastMyList120_2;
    IF OBJECT_ID('tempdb..#LastMyList12200') IS NOT NULL DROP TABLE #LastMyList12200;
    IF OBJECT_ID('tempdb..#groupPonewList') IS NOT NULL DROP TABLE #groupPonewList;
    IF OBJECT_ID('tempdb..#listosd5') IS NOT NULL DROP TABLE #listosd5;
    IF OBJECT_ID('tempdb..#finalgroup') IS NOT NULL DROP TABLE #finalgroup;
    IF OBJECT_ID('tempdb..#checkcarr') IS NOT NULL DROP TABLE #checkcarr;
    IF OBJECT_ID('tempdb..#SettingRateRateby') IS NOT NULL DROP TABLE #SettingRateRateby;
    IF OBJECT_ID('tempdb..#TempRes') IS NOT NULL DROP TABLE #TempRes;
    IF OBJECT_ID('tempdb..#FinalResult') IS NOT NULL DROP TABLE #FinalResult;
    IF OBJECT_ID('tempdb..#mylistfinal21') IS NOT NULL DROP TABLE #mylistfinal21;
    IF OBJECT_ID('tempdb..#lastmylist2') IS NOT NULL DROP TABLE #lastmylist2;
    IF OBJECT_ID('tempdb..#calresult1') IS NOT NULL DROP TABLE #calresult1;
    IF OBJECT_ID('tempdb..#processed_po') IS NOT NULL DROP TABLE #processed_po;
    IF OBJECT_ID('tempdb..#withoutgroup') IS NOT NULL DROP TABLE #withoutgroup;
    IF OBJECT_ID('tempdb..#lastgroup') IS NOT NULL DROP TABLE #lastgroup;
    IF OBJECT_ID('tempdb..#lastmylist2_po') IS NOT NULL DROP TABLE #lastmylist2_po;
    IF OBJECT_ID('tempdb..#withoutgroup_dt') IS NOT NULL DROP TABLE #withoutgroup_dt;
    IF OBJECT_ID('tempdb..#lastgroup_dt') IS NOT NULL DROP TABLE #lastgroup_dt;
    IF OBJECT_ID('tempdb..#lastmylist2_all') IS NOT NULL DROP TABLE #lastmylist2_all;
    IF OBJECT_ID('tempdb..#withoutgroup_all') IS NOT NULL DROP TABLE #withoutgroup_all;
    IF OBJECT_ID('tempdb..#lastgroup_all') IS NOT NULL DROP TABLE #lastgroup_all;
    IF OBJECT_ID('tempdb..#lastmylist22') IS NOT NULL DROP TABLE #lastmylist22;
    IF OBJECT_ID('tempdb..#palletidlist') IS NOT NULL DROP TABLE #palletidlist;
    IF OBJECT_ID('tempdb..#takeoff1') IS NOT NULL DROP TABLE #takeoff1;
    IF OBJECT_ID('tempdb..#mylist1') IS NOT NULL DROP TABLE #mylist1;
    IF OBJECT_ID('tempdb..#mylistfinal1') IS NOT NULL DROP TABLE #mylistfinal1;
    IF OBJECT_ID('tempdb..#mylistpaletid1') IS NOT NULL DROP TABLE #mylistpaletid1;

    -- DECLARE ALL VARIABLES
    DECLARE @inout INT = 2;
    DECLARE @MyPoNumber NVARCHAR(50);
    DECLARE @teststring NVARCHAR(50) = '';
    DECLARE @wssuf NVARCHAR(50) = '';
    DECLARE @SettingBaseNew1 INT;
    DECLARE @SettingBaseNew3 INT;
    DECLARE @po_number NVARCHAR(50);
    DECLARE @po_suffix NVARCHAR(50);
    DECLARE @Remotekey NVARCHAR(50);
    DECLARE @posuffix NVARCHAR(50);
    DECLARE @Rabsnum NVARCHAR(50);
    DECLARE @testpallet INT;
    DECLARE @CalculRate INT;
    DECLARE @Ratedescid INT;
    DECLARE @settingid INT;
    DECLARE @RateAmount DECIMAL(18, 2);
    DECLARE @NameAbrg NVARCHAR(MAX);
    DECLARE @SettingMin DECIMAL(18, 2);
    DECLARE @SettingMax DECIMAL(18, 2);
    DECLARE @UnitCode NVARCHAR(50);
    DECLARE @chargename NVARCHAR(50);
	DECLARE @chargeID INT;
    DECLARE @hincrem INT;
    DECLARE @mylistinvoice NVARCHAR(50);
    DECLARE @forflat INT;
    DECLARE @foundnameabrg NVARCHAR(50);
    DECLARE @wcalcul INT;
    DECLARE @teststorage INT;
    DECLARE @newquantity DECIMAL(18, 6);
    DECLARE @calzala INT = 0;
    DECLARE @wponumber NVARCHAR(50) = '';
    DECLARE @wposuffix NVARCHAR(50) = '';
    DECLARE @empnum NVARCHAR(50) = '';
    DECLARE @addwpik INT = 0;
    DECLARE @itemqty DECIMAL(18, 2) = 0;
    DECLARE @newquantity2 DECIMAL(18, 2) = 0;
    DECLARE @hourlymin INT = 0;
    DECLARE @wammRate DECIMAL(18,4);
    DECLARE @abs_num NVARCHAR(50);
    DECLARE @RatebyId INT;
    DECLARE @CurrentPalletId INT;
    DECLARE @extdcost DECIMAL(18,2);
    DECLARE @guid DECIMAL(18,2);
    DECLARE @groupTotal DECIMAL(18,6);
    DECLARE @df_ForGroup INT;
    DECLARE @groupRate DECIMAL(18,2);
    DECLARE @final_quantity DECIMAL(18,6);
    DECLARE @calc DECIMAL(18,2);
    DECLARE @calresult_count INT;
    DECLARE @newcall DECIMAL(18,4) = 0;
    DECLARE @gencall DECIMAL(18,4) = 0;
    DECLARE @fromdatetime NVARCHAR(150);
    DECLARE @forflatout INT = 0;
    DECLARE @wamount DECIMAL(18,4);
    DECLARE @totalgeneral DECIMAL(18,4) = 0;
    DECLARE @todatte DATETIME = DATEADD(DAY, -1, GETDATE());
    DECLARE @todatestoragee DATETIME = DATETIMEFROMPARTS(YEAR(@todatte), MONTH(@todatte), DAY(@todatte), 23, 59, 59, 0);
    DECLARE @rt_TypeCalculate INT;
    DECLARE @rt_RateDescName NVARCHAR(100);
    DECLARE @rt_SettingId INT;
    DECLARE @rt_RateDescId INT;
    DECLARE @rt_RateAmount DECIMAL(18,4);
    DECLARE @rt_SettingMin DECIMAL(18,4);
    DECLARE @rt_SettingMax DECIMAL(18,4);
    DECLARE @rt_UnitCode NVARCHAR(50);
    DECLARE @rt_ChargeID NVARCHAR(100);
    DECLARE @rt_Co_num NVARCHAR(50);
    DECLARE @rt_Wh_num NVARCHAR(50);
    DECLARE @rt_abs_num NVARCHAR(50);
    DECLARE @rt_NameAbrg NVARCHAR(100);
    DECLARE @rt_RateDescCountPo INT;
    DECLARE @rt_CalculRate INT;
    DECLARE @red_quantity DECIMAL(18,6);
    DECLARE @red_doc_id NVARCHAR(50);
    DECLARE @red_guid DECIMAL(18,2);
    DECLARE @red_extdcost DECIMAL(18,2);
    DECLARE @red_abs_num NVARCHAR(50);
    DECLARE @red_sugg_qty DECIMAL(18,6);
    DECLARE @red_emp_num NVARCHAR(50);
    DECLARE @group_Remotekey NVARCHAR(50);
    DECLARE @group_posuffix NVARCHAR(50);
    DECLARE @group_Total DECIMAL(18,2);
    DECLARE @fgh INT = 0;
    DECLARE @amountofcal DECIMAL(18,6);
    DECLARE @wfreight DECIMAL(18,4);
    DECLARE @hour_increment INT;
    DECLARE @findco_PoCloseRate DECIMAL(18,4);
    DECLARE @red_action_code NVARCHAR(50);
    DECLARE @red_transmission INT;
    DECLARE @red_oldunitcost DECIMAL(18,4);
    DECLARE @red_unitcost DECIMAL(18,4);
    DECLARE @red_wh_num NVARCHAR(50);
    DECLARE @red_co_num NVARCHAR(50);
    DECLARE @red_substat_code INT;
    DECLARE @red_po_number NVARCHAR(50);
    DECLARE @red_po_suffix NVARCHAR(50);
    DECLARE @red_cc_type NVARCHAR(50);
    DECLARE @red_case_qtyitem DECIMAL(18,6);
    DECLARE @red_box_qtyitem DECIMAL(18,6);
    DECLARE @red_result_msg NVARCHAR(MAX);
    DECLARE @red_po_line INT;
    DECLARE @red_lot NVARCHAR(50);
    DECLARE @red_row_status NVARCHAR(50);
    DECLARE @red_act_qty DECIMAL(18,6);
    DECLARE @red_item_type NVARCHAR(50);
    DECLARE @red_fromdatetime NVARCHAR(50);

    -- *********************************************************************
    -- STEP 1:  Create audit view temp table
    -- *********************************************************************
    CREATE TABLE #TempAudiView(
        trans_num INT,
        transmission INT,
        ifaces_file NVARCHAR(255),
        ifaces_time NVARCHAR(50),
        co_num NVARCHAR(50),
        wh_num NVARCHAR(50),
        task_id INT,
        pallet_id NVARCHAR(50),
        pallet_id_from NVARCHAR(50),
        carton_id NVARCHAR(50),
        date_time NVARCHAR(50),
        trans_sec_time INT,
        trans_type NVARCHAR(50),
        emp_num NVARCHAR(50),
        abs_num NVARCHAR(50),
        ns_comment NVARCHAR(MAX),
        exp_abs NVARCHAR(50),
        serial_num NVARCHAR(50),
        item_num NVARCHAR(50),
        box_qtyitem DECIMAL(18,6),
        case_qtyitem DECIMAL(18,6),
        item_qty DECIMAL(18,6),
        act_qty DECIMAL(18,6),
        sugg_qty DECIMAL(18,6),
        bin_num NVARCHAR(50),
        bin_from NVARCHAR(50),
        bin_to NVARCHAR(50),
        cc_type NVARCHAR(50),
        cc_string NVARCHAR(255),
        shf_num INT,
        adj_code NVARCHAR(50),
        item_type NVARCHAR(50),
        uom NVARCHAR(50),
        case_qty INT,
        quantity DECIMAL(18,6),
        stock_stat NVARCHAR(50),
        old_stock_stat NVARCHAR(50),
        lot NVARCHAR(50),
        pool NVARCHAR(50),
        dept_num INT,
        mach_type NVARCHAR(50),
        rt_num NVARCHAR(50),
        po_number NVARCHAR(50),
        po_suffix NVARCHAR(50),
        po_line INT,
        line_sequence INT,
        packer NVARCHAR(50),
        action_code NVARCHAR(50),
        result_code NVARCHAR(50),
        result_msg NVARCHAR(MAX),
        trans_link INT,
        record_type NVARCHAR(50),
        comments NVARCHAR(MAX),
        proc_created NVARCHAR(50),
        truck_id NVARCHAR(50),
        batch INT,
        cargo_control NVARCHAR(50),
        qa_release_id INT,
        release_id NVARCHAR(50),
        voidx TINYINT,
        cancelled TINYINT,
        cancelled_by NVARCHAR(50),
        cancelled_at NVARCHAR(50),
        doc_id NVARCHAR(50),
        row_status NVARCHAR(50),
        substat_code INT,
        unitcost DECIMAL(18,6),
        extdcost DECIMAL(18,6),
        oldunitcost DECIMAL(18,6),
        oldextdcost DECIMAL(18,6),
        msg_status NVARCHAR(50),
        guid DECIMAL(18,6),
        fromdatetime NVARCHAR(150),
        todatetime NVARCHAR(50),
        elapsedtime INT,
        country_code NVARCHAR(50),
        PROGRESS_RECID INT,
        PROGRESS_RECID_IDENT_ INT,
        date_time2 DATETIME,
        DateShip DATETIME
    );

    INSERT INTO #TempAudiView
    (ifaces_file, po_suffix, po_number, result_msg, date_time2, DateShip, abs_num, 
    emp_num, po_line, quantity, ns_comment, item_qty, case_qtyitem, box_qtyitem, 
    act_qty, co_num, wh_num, bin_to, lot, date_time, trans_type, item_num, uom, 
    trans_num, row_status, item_type, line_sequence, pallet_id, unitcost)
    SELECT ifaces_file, po_suffix, po_number, result_msg, date_time2, DateShip, abs_num, 
    emp_num, po_line, quantity, ns_comment, item_qty, case_qtyitem, box_qtyitem, 
    act_qty, co_num, wh_num, bin_to, lot, date_time, trans_type, item_num, uom, 
    trans_num, row_status, item_type, line_sequence, pallet_id, unitcost
    FROM irms_2_5_2.dbo.irms_ft_outbound
    WHERE co_num=@conum AND wh_num=@whnum AND dateship>=@fromDateStorage AND dateship<=@toDateStorage;

    --SELECT * FROM #TEMPAUDIVIEW;

    -- Create empty working tables
    SELECT TOP(0) * INTO #mylistfinal5 FROM #TempAudiView;

    -- Create result tables
    SELECT 
        abs_num,
        po_number,
        po_suffix,
        COUNT(*) AS CountRecords,
        SUM(quantity) AS SumQuantity
    INTO #resultgroup
    FROM #TempAudiView
    GROUP BY abs_num, po_number, po_suffix;

    SELECT 
        UPPER(abs_num) AS abs_num_upper,
        lot,
        po_number,
        po_suffix,
        COUNT(*) AS GroupCount,
        SUM(quantity) AS GroupQuantity
    INTO #oo56
    FROM #TempAudiView
    GROUP BY UPPER(abs_num), lot, po_number, po_suffix
    ORDER BY UPPER(abs_num);

    SELECT *
    INTO #txt22
    FROM (
        SELECT 
            UPPER(abs_num) AS abs_num_upper,
            lot,
            po_number,
            po_suffix,
            COUNT(*) AS GroupCount,
            SUM(quantity) AS GroupQuantity
        FROM #TempAudiView
        GROUP BY UPPER(abs_num), lot, po_number, po_suffix
    ) AS GroupedData
    WHERE po_number = '6776956';

    -- Create CTE for row partitioning
    WITH ResNewCTE AS (
        SELECT *,
               ROW_NUMBER() OVER (PARTITION BY UPPER(abs_num), po_number, po_suffix ORDER BY abs_num) AS rn
        FROM #TempAudiView
    )
    SELECT *
    INTO #resnew
    FROM ResNewCTE
    WHERE rn = 1;

    -- Create temporary table for record filtering
    SELECT t.*
    INTO #wsettingyfind
    FROM SettingRate so
    INNER JOIN Rateby t
      ON so.RatebyId = t.RatebyId
    WHERE so.co_num = @conum 
      AND so.wh_num = @whnum 
      AND so.KindId = @inout;

    -- Create check table for CalculRate = 2666
    SELECT TOP 1 *
    INTO #result2666
    FROM #wsettingyfind
    WHERE CalculRate = 2666;

    -- Check if result2666 exists and execute special processing
    IF EXISTS (SELECT 1 FROM #result2666)
    BEGIN
        -- Create #resnu with grouped data
        SELECT 
            UPPER(abs_num) AS absnum,
            lot,
            po_number,
            po_suffix,
            SUM(quantity) AS quantity
        INTO #resnu
        FROM #TempAudiView
        GROUP BY UPPER(abs_num), lot, po_number, po_suffix;
    END

    -- Create staging tables
    SELECT * INTO #wresult FROM #TempAudiView;

    SELECT *
    INTO #reee
    FROM #wresult
    ORDER BY abs_num;

    -- Create working and invoice tables
    CREATE TABLE #mylist (
        trans_num INT,
        transmission INT,
        ifaces_file NVARCHAR(255),
        ifaces_time NVARCHAR(50),
        co_num NVARCHAR(50),
        wh_num NVARCHAR(50),
        task_id INT,
        pallet_id NVARCHAR(50),
        pallet_id_from NVARCHAR(50),
        carton_id NVARCHAR(50),
        date_time NVARCHAR(50),
        trans_sec_time INT,
        trans_type NVARCHAR(50),
        emp_num NVARCHAR(50),
        abs_num NVARCHAR(50),
        ns_comment NVARCHAR(MAX),
        exp_abs NVARCHAR(50),
        serial_num NVARCHAR(50),
        item_num NVARCHAR(50),
        box_qtyitem DECIMAL(18,6),
        case_qtyitem DECIMAL(18,6),
        item_qty DECIMAL(18,6),
        act_qty DECIMAL(18,6),
        sugg_qty DECIMAL(18,6),
        bin_num NVARCHAR(50),
        bin_from NVARCHAR(50),
        bin_to NVARCHAR(50),
        cc_type NVARCHAR(50),
        cc_string NVARCHAR(255),
        shf_num INT,
        adj_code NVARCHAR(50),
        item_type NVARCHAR(50),
        uom NVARCHAR(50),
        case_qty INT,
        quantity DECIMAL(18,6),
        stock_stat NVARCHAR(50),
        old_stock_stat NVARCHAR(50),
        lot NVARCHAR(50),
        pool NVARCHAR(50),
        dept_num INT,
        mach_type NVARCHAR(50),
        rt_num NVARCHAR(50),
        po_number NVARCHAR(50),
        po_suffix NVARCHAR(50),
        po_line INT,
        line_sequence INT,
        packer NVARCHAR(50),
        action_code NVARCHAR(50),
        result_code NVARCHAR(50),
        result_msg NVARCHAR(MAX),
        trans_link INT,
        record_type NVARCHAR(50),
        comments NVARCHAR(MAX),
        proc_created NVARCHAR(50),
        truck_id NVARCHAR(50),
        batch INT,
        cargo_control NVARCHAR(50),
        qa_release_id INT,
        release_id NVARCHAR(50),
        voidx TINYINT,
        cancelled TINYINT,
        cancelled_by NVARCHAR(50),
        cancelled_at NVARCHAR(50),
        doc_id NVARCHAR(50),
        row_status NVARCHAR(50),
        substat_code INT,
        unitcost DECIMAL(18,6),
        extdcost DECIMAL(18,6),
        oldunitcost DECIMAL(18,6),
        oldextdcost DECIMAL(18,6),
        msg_status NVARCHAR(50),
        guid DECIMAL(18,6),
        fromdatetime NVARCHAR(150),
        todatetime NVARCHAR(50),
        elapsedtime INT,
        country_code NVARCHAR(50),
        PROGRESS_RECID INT,
        PROGRESS_RECID_IDENT_ INT,
        date_time2 DATETIME,
        DateShip DATETIME
    );

    CREATE TABLE #mylistinvoice (
        InvoiceId INT,
        abs_num NVARCHAR(50),
        po_number NVARCHAR(50),
        po_suffix NVARCHAR(50),
        amount DECIMAL(18,2),
        invoice_date DATETIME,
        co_num NVARCHAR(50),
        wh_num NVARCHAR(50),
        invoice_number NVARCHAR(50),
        line_number INT,
        quantity DECIMAL(18,6),
        rate DECIMAL(18,2),
        description NVARCHAR(255),
        gl_account NVARCHAR(50),
        tax_amount DECIMAL(18,2),
        tax_code NVARCHAR(20),
        currency_code NVARCHAR(10),
        exchange_rate DECIMAL(18,6),
        created_date DATETIME,
        created_by NVARCHAR(50),
        modified_date DATETIME,
        modified_by NVARCHAR(50),
        status NVARCHAR(20),
        reference NVARCHAR(100),
        customer_po NVARCHAR(50),
        item_num NVARCHAR(50),
        uom NVARCHAR(20),
        unit_price DECIMAL(18,6),
        extended_amount DECIMAL(18,2),
        discount_amount DECIMAL(18,2),
        discount_percent DECIMAL(5,2),
        dept_num INT,
        division NVARCHAR(50),
        project_code NVARCHAR(50),
        sales_rep NVARCHAR(50),
        ship_date DATETIME,
        tracking_number NVARCHAR(100),
        carrier NVARCHAR(50),
        shipping_method NVARCHAR(50),
        notes NVARCHAR(MAX),
        payment_terms NVARCHAR(50),
        payment_due_date DATETIME,
        payment_amount DECIMAL(18,2),
        payment_date DATETIME,
        payment_method NVARCHAR(50),
        payment_reference NVARCHAR(100),
        is_paid BIT,
        is_void BIT,
        void_reason NVARCHAR(255),
        void_date DATETIME,
        void_by NVARCHAR(50),
        document_url NVARCHAR(255),
        customer_name NVARCHAR(100),
        shipping_address_line1 NVARCHAR(100),
        shipping_address_line2 NVARCHAR(100),
        shipping_city NVARCHAR(50),
        shipping_state NVARCHAR(50),
        shipping_zip NVARCHAR(20),
        shipping_country NVARCHAR(50),
        billing_address_line1 NVARCHAR(100),
        billing_address_line2 NVARCHAR(100),
        billing_city NVARCHAR(50),
        billing_state NVARCHAR(50),
        billing_zip NVARCHAR(20),
        billing_country NVARCHAR(50),
        customer_email NVARCHAR(100),
        customer_phone NVARCHAR(20),
        internal_comments NVARCHAR(MAX),
        external_comments NVARCHAR(MAX),
        pallet_id NVARCHAR(50),
        batch_id NVARCHAR(50),
        warehouse_zone NVARCHAR(50),
        warehouse_bin NVARCHAR(50),
        lot_number NVARCHAR(50),
        serial_number NVARCHAR(50),
        expiration_date DATETIME,
        manufacture_date DATETIME,
        custom_field1 NVARCHAR(100),
        custom_field2 NVARCHAR(100),
        custom_field3 NVARCHAR(100),
        custom_field4 NVARCHAR(100),
        custom_field5 NVARCHAR(100),
        row_status NVARCHAR(20),
        row_version ROWVERSION,
        trans_type NVARCHAR(50),
		bin_num NVARCHAR(50)
    );

    CREATE TABLE #mylistpaletid (
        InvoiceId INT,
        abs_num NVARCHAR(50),
        po_number NVARCHAR(50),
        po_suffix NVARCHAR(50),
        amount DECIMAL(18,2),
        invoice_date DATETIME,
        co_num NVARCHAR(50),
        wh_num NVARCHAR(50),
        invoice_number NVARCHAR(50),
        line_number INT,
        quantity DECIMAL(18,6),
        rate DECIMAL(18,2),
        description NVARCHAR(255),
        gl_account NVARCHAR(50),
        tax_amount DECIMAL(18,2),
        tax_code NVARCHAR(20),
        currency_code NVARCHAR(10),
        exchange_rate DECIMAL(18,6),
        created_date DATETIME,
        created_by NVARCHAR(50),
        modified_date DATETIME,
        modified_by NVARCHAR(50),
        status NVARCHAR(20),
        reference NVARCHAR(100),
        customer_po NVARCHAR(50),
        item_num NVARCHAR(50),
        uom NVARCHAR(20),
        unit_price DECIMAL(18,6),
        extended_amount DECIMAL(18,2),
        discount_amount DECIMAL(18,2),
        discount_percent DECIMAL(5,2),
        dept_num INT,
        division NVARCHAR(50),
        project_code NVARCHAR(50),
        sales_rep NVARCHAR(50),
        ship_date DATETIME,
        tracking_number NVARCHAR(100),
        carrier NVARCHAR(50),
        shipping_method NVARCHAR(50),
        notes NVARCHAR(MAX),
        payment_terms NVARCHAR(50),
        payment_due_date DATETIME,
        payment_amount DECIMAL(18,2),
        payment_date DATETIME,
        payment_method NVARCHAR(50),
        payment_reference NVARCHAR(100),
        is_paid BIT,
        is_void BIT,
        void_reason NVARCHAR(255),
        void_date DATETIME,
        void_by NVARCHAR(50),
        document_url NVARCHAR(255),
        customer_name NVARCHAR(100),
        shipping_address_line1 NVARCHAR(100),
        shipping_address_line2 NVARCHAR(100),
        shipping_city NVARCHAR(50),
        shipping_state NVARCHAR(50),
        shipping_zip NVARCHAR(20),
        shipping_country NVARCHAR(50),
        billing_address_line1 NVARCHAR(100),
        billing_address_line2 NVARCHAR(100),
        billing_city NVARCHAR(50),
        billing_state NVARCHAR(50),
        billing_zip NVARCHAR(20),
        billing_country NVARCHAR(50),
        customer_email NVARCHAR(100),
        customer_phone NVARCHAR(20),
        internal_comments NVARCHAR(MAX),
        external_comments NVARCHAR(MAX),
        pallet_id NVARCHAR(50),
        batch_id NVARCHAR(50),
        warehouse_zone NVARCHAR(50),
        warehouse_bin NVARCHAR(50),
        lot_number NVARCHAR(50),
        serial_number NVARCHAR(50),
        expiration_date DATETIME,
        manufacture_date DATETIME,
        custom_field1 NVARCHAR(100),
        custom_field2 NVARCHAR(100),
        custom_field3 NVARCHAR(100),
        custom_field4 NVARCHAR(100),
        custom_field5 NVARCHAR(100),
        row_status NVARCHAR(20),
        trans_type NVARCHAR(50),
        row_version ROWVERSION,
        sugg_qty INT
    );

    -- Fill #mylist from CTE
    WITH ResNewCTE AS (
        SELECT *,
               ROW_NUMBER() OVER (PARTITION BY UPPER(abs_num), po_number, po_suffix ORDER BY abs_num) AS rn
        FROM #TempAudiView
    )
    INSERT INTO #mylist (
        trans_num, transmission, ifaces_file, ifaces_time, co_num, 
        wh_num, task_id, pallet_id, pallet_id_from, carton_id, 
        date_time, trans_sec_time, trans_type, emp_num, abs_num, 
        ns_comment, exp_abs, serial_num, item_num, box_qtyitem, 
        case_qtyitem, item_qty, act_qty, sugg_qty, bin_num, 
        bin_from, bin_to, cc_type, cc_string, shf_num, 
        adj_code, item_type, uom, case_qty, quantity, 
        stock_stat, old_stock_stat, lot, pool, dept_num, 
        mach_type, rt_num, po_number, po_suffix, po_line, 
        line_sequence, packer, action_code, result_code, result_msg, 
        trans_link, record_type, comments, proc_created, truck_id, 
        batch, cargo_control, qa_release_id, release_id, voidx, 
        cancelled, cancelled_by, cancelled_at, doc_id, row_status, 
        substat_code, unitcost, extdcost, oldunitcost, oldextdcost, 
        msg_status, guid, fromdatetime, todatetime, elapsedtime, 
        country_code, PROGRESS_RECID, PROGRESS_RECID_IDENT_, date_time2, DateShip
    )
    SELECT
        trans_num, transmission, ifaces_file, ifaces_time, co_num, 
        wh_num, task_id, pallet_id, pallet_id_from, carton_id, 
        date_time, trans_sec_time, trans_type, emp_num, abs_num, 
        ns_comment, exp_abs, serial_num, item_num, box_qtyitem, 
        case_qtyitem, item_qty, act_qty, sugg_qty, bin_num, 
        bin_from, bin_to, cc_type, cc_string, shf_num, 
        adj_code, item_type, uom, case_qty, quantity, 
        stock_stat, old_stock_stat, lot, pool, dept_num, 
        mach_type, rt_num, po_number, po_suffix, po_line, 
        line_sequence, packer, action_code, result_code, result_msg, 
        trans_link, record_type, comments, proc_created, truck_id, 
        batch, cargo_control, qa_release_id, release_id, voidx, 
        cancelled, cancelled_by, cancelled_at, doc_id, row_status, 
        substat_code, unitcost, extdcost, oldunitcost, oldextdcost, 
        msg_status, guid, fromdatetime, todatetime, elapsedtime, 
        country_code, PROGRESS_RECID, PROGRESS_RECID_IDENT_, date_time2, DateShip
    FROM ResNewCTE
    WHERE rn = 1;

    -- Create result tables
    SELECT * INTO #result45 FROM #mylist;
    SELECT * INTO #resultpalletid FROM #mylist;

    -- Fill #mylistinvoice from #result45
    INSERT INTO #mylistinvoice (
        abs_num, po_number, po_suffix, co_num, wh_num, pallet_id, item_num, 
        quantity, uom, dept_num, lot_number, serial_number, warehouse_bin, 
        row_status, InvoiceId, amount, invoice_date, line_number, rate, 
        description, status, is_paid, is_void
    )
    SELECT
        abs_num, po_number, po_suffix, co_num, wh_num, pallet_id, item_num,
        quantity, uom, dept_num, lot, serial_num, bin_num, row_status,
        NULL AS InvoiceId, extdcost AS amount, GETDATE() AS invoice_date,
        po_line AS line_number, unitcost AS rate, 'Imported from #result45' AS description,
        'Active' AS status, 0 AS is_paid, 0 AS is_void
    FROM #result45;

    -- Fill #mylistpaletid from #resultpalletid
    INSERT INTO #mylistpaletid (
        InvoiceId, abs_num, po_number, po_suffix, amount, invoice_date, 
        co_num, wh_num, invoice_number, line_number, quantity, rate, 
        description, item_num, uom, unit_price, extended_amount, dept_num, 
        pallet_id, warehouse_bin, lot_number, serial_number, row_status, 
        status, is_paid, is_void, trans_type,sugg_qty
    )
    SELECT
        ROW_NUMBER() OVER (ORDER BY trans_num) AS InvoiceId,
        abs_num, po_number, po_suffix, extdcost AS amount, GETDATE() AS invoice_date,
        co_num, wh_num, 'INV-' + CAST(trans_num AS VARCHAR(20)) AS invoice_number,
        po_line AS line_number, quantity, unitcost AS rate, 
        'Generated from transaction data' AS description,
        item_num, uom, unitcost AS unit_price, extdcost AS extended_amount, 
        dept_num, pallet_id, bin_num AS warehouse_bin, lot AS lot_number, 
        serial_num AS serial_number, row_status,
        CASE 
            WHEN voidx = 1 THEN 'Void'
            WHEN cancelled = 1 THEN 'Cancelled'
            ELSE 'Active'
        END AS status,
        0 AS is_paid, ISNULL(voidx, 0) AS is_void,
        trans_type,sugg_qty
    FROM #resultpalletid;

    -- Merge #reee into #mylist
    INSERT INTO #mylist (
        abs_num, quantity, date_time, item_qty, po_number, po_suffix, trans_type,
        item_num, lot, uom, po_line, co_num, wh_num, act_qty, trans_num,
        date_time2, row_status, item_type, emp_num, result_msg,
        case_qtyitem, box_qtyitem, bin_to
    )
    SELECT
        r.abs_num, r.quantity, r.date_time, r.item_qty, r.po_number, r.po_suffix,
        r.trans_type, r.item_num, r.lot, r.uom, r.po_line, r.co_num,
        r.wh_num, r.act_qty, r.trans_num, r.date_time2, r.row_status,
        r.item_type, r.emp_num, r.result_msg, r.case_qtyitem, r.box_qtyitem,
        r.bin_to
    FROM #reee r
    WHERE NOT EXISTS (
        SELECT 1 
        FROM #mylist m
        WHERE m.abs_num = r.abs_num
          AND m.po_number = r.po_number
          AND m.po_suffix = r.po_suffix
          AND m.po_line = r.po_line
    );

    -- Create rate setting tables
    SELECT 
        rb.RatebyId, rb.RatebyName, rb.CalculRate, rb.PalletId,
        rd.RateDescId, rd.RateDescName, rd.RateDescCountPo, rd.RateDescInvoice, 
        rd.ByCategory1, rd.ByCategory2, rd.ByCategory3, rd.TypeCalculate, rd.Glcode, 
        rd.RatebyQty, rd.NameAbrg, rd.Sorttable, rd.ForGroup,
        r.SettingMin, r.SettingMax, r.SplitQty, r.ChargeName, r.UnitCode, 
        r.RateAmount, r.abs_num, r.CalbyInvoice, r.KindId, r.Co_num, r.Wh_num, r.SettingId,c.chargeid
    INTO #tempAllRates
    FROM SettingRate r
    INNER JOIN RateDesc rd ON r.RateDescId = rd.RateDescId
    INNER JOIN RateBy rb ON r.RatebyId = rb.RatebyId
	LEFT JOIN ChargeName C on C.ChargeNameDesc = r.chargename
    WHERE r.Co_num = @CoNum
    AND r.Wh_num = @WhNum
    AND r.KindId = @inout;

	--select * from #tempAllRates;
    -- Create various rate tables
    SELECT * INTO #wsettingy FROM #tempAllRates
    WHERE RateDescCountPo != 1 AND RateDescInvoice = 0 AND KindId = @inout ORDER BY Sorttable ASC;

    SELECT * INTO #rt FROM #tempAllRates
    WHERE RateDescCountPo = 1 AND RatebyQty = 0 AND KindId = @inout;

    SELECT * INTO #rt1 FROM #tempAllRates
    WHERE RateDescCountPo = 1 AND RatebyQty = 1 AND KindId = @inout;

    SELECT * INTO #rt12 FROM #tempAllRates
    WHERE RateDescCountPo = 1 AND RatebyQty = 2 AND KindId = @inout;

    SELECT * INTO #rt1515 FROM #tempAllRates
    WHERE RateDescCountPo = 1 AND RatebyQty = 6 AND KindId = @inout;

    SELECT * INTO #rt15150 FROM #tempAllRates
    WHERE RateDescCountPo = 1 AND RatebyQty = 7 AND KindId = @inout;

    SELECT * INTO #rt1220 FROM #tempAllRates
    WHERE RateDescInvoice = 1 AND RatebyQty = 5 AND KindId = @inout;

    SELECT * INTO #rt12200 FROM #tempAllRates
    WHERE RateDescInvoice = 1 AND RatebyQty = 25 AND KindId = @inout;

    SELECT * INTO #rt120 FROM #tempAllRates
    WHERE RateDescInvoice = 1 AND RatebyQty NOT IN (5, 7, 25) AND KindId = @inout;

    SELECT * INTO #un120 FROM #tempAllRates
    WHERE RateDescCountPo = 1 AND RatebyQty = 4 AND KindId = @inout;

    SELECT * INTO #rt1200 FROM #tempAllRates
    WHERE RateDescCountPo = 1 AND RatebyQty = 3 AND KindId = @inout;

    SELECT * INTO #rt11 FROM #tempAllRates
    WHERE CalculRate = 9 AND KindId = @inout;

    select * from #wsettingy;
    select * from #rt;
    select * from #rt1;  
    select * from #rt12;
    select * from #rt1515;
    select * from #rt15150;
    select * from #rt1220;
    select * from #rt12200;
    select * from #rt120;
    select * from #un120;
    select * from #rt1200;
    select * from #rt11;


    -- Create #wsetting table
    SELECT c.*
    INTO #wsetting
    FROM #wsettingy AS c
    INNER JOIN RateDesc AS k ON c.RateDescId = k.RateDescId
    ORDER BY k.Sorttable;

    -- Create grouped tables
    SELECT
        c.po_number AS Remotekey, 
        UPPER(c.abs_num) AS Rabsnum,
        c.po_suffix AS posuffix,
        SUM(c.quantity) AS Total,
        c.lot AS wlot,
        c.bin_num AS wbinnum,
        c.pallet_id AS wpalletid
    INTO #groupPonew
    FROM #mylist AS c
    GROUP BY c.po_number, c.po_suffix, UPPER(c.abs_num),c.lot,c.bin_num,c.pallet_id
    ORDER BY po_number, posuffix;

    SELECT
        c.po_number AS Remotekey,
        c.lot AS wlot,
        UPPER(c.abs_num) AS Rabsnum,
        c.po_suffix AS posuffix,
        c.bin_num AS wbinnum,
        c.pallet_id AS wpalletid,
        SUM(c.quantity) AS Total
    INTO #groupPonew78
    FROM #mylist AS c
    GROUP BY c.po_number, c.po_suffix, UPPER(c.abs_num), c.lot, c.bin_num, c.pallet_id
    ORDER BY po_number, posuffix;

    SELECT
        po_number AS Remotekey,
        po_suffix AS posuffix,
        COUNT(*) AS Total
    INTO #groupPonew88
    FROM #mylist AS c
    GROUP BY c.po_number, c.po_suffix
    ORDER BY po_number, posuffix;

    SELECT
        UPPER(c.abs_num) AS absnum,
        COUNT(*) AS Total
    INTO #groupPonew889
    FROM #mylist AS c
    GROUP BY UPPER(c.abs_num);

    SELECT
        c.po_number AS Remotekey,
        c.po_suffix AS posuffix,
        SUM(c.quantity) AS Total
    INTO #groupPonew2
    FROM #mylist AS c
    GROUP BY c.po_number, c.po_suffix
    ORDER BY po_number, posuffix;

    -- Create AbsnumRemove table for filtering
    SELECT AbsnumName 
    INTO #takeoff
    FROM AbsnumRemove;

    -- Filter #mylistinvoice based on #takeoff
    DELETE FROM #mylistinvoice
    WHERE EXISTS (
        SELECT 1 
        FROM #takeoff t
        WHERE UPPER(#mylistinvoice.abs_num) = UPPER(t.AbsnumName)
    );

    -- Create mylistfinal as a copy of mylist
    SELECT * 
    INTO #mylistfinal 
    FROM #mylist;

    -- Clear the #mylistfinal5 table
    TRUNCATE TABLE #mylistfinal5;

    -- Update rates in #wsetting
    UPDATE w
    SET 
        w.RateAmount = ISNULL(s.RateAmount, 0),
        w.abs_num = ''
    FROM #wsetting AS w
    LEFT JOIN SettingRate AS s
      ON w.SettingId = s.SettingId;

    -- Create SettingCustomer table for configuration
    CREATE TABLE #foundsettingcustomer (
      [SettingBaseId] [int] IDENTITY(1,1) NOT NULL,
      [SettingBaseSend] [int] NULL,
      [SettingBaseSplitMinth] [int] NULL,
      [SettingBaseBgMonth] [int] NULL,
      [SettingBasePo] [int] NULL,
      [SettingBaseConum] [varchar](8) NULL,
      [SettingBaseWhnum] [varchar](8) NULL,
      [SettingBaseInbound] [int] NULL,
      [SettingBaseOutbound] [int] NULL,
      [SettingBaseStorage] [int] NULL,
      [SettingBaseSdAppr] [int] NULL,
      [SettingBaseFreeday] [int] NULL,
      [SettingBaseDeact] [int] NULL,
      [SettingBaseNew1] [int] NULL,
      [SettingBaseNew2] [int] NULL,
      [SettingBaseNew3] [int] NULL,
      [SettingBaseNew4] [varchar](150) NULL,
      [SettingBaseNew5] [varchar](150) NULL,
      [SettingBaseNew6] [varchar](max) NULL,
      [SettingBaseDate] [datetime] NULL,
      [InboundInvoice] [int] NULL,
      [OutboundInvoice] [int] NULL,
      [StorageInvoice] [int] NULL,
      [Accessorial2] [int] NULL
    );

    -- Insert SettingCustomer data
    INSERT INTO #foundsettingcustomer (
        SettingBaseSend, SettingBaseSplitMinth, SettingBaseBgMonth, SettingBasePo,
        SettingBaseConum, SettingBaseWhnum, SettingBaseInbound, SettingBaseOutbound,
        SettingBaseStorage, SettingBaseSdAppr, SettingBaseFreeday, SettingBaseDeact,
        SettingBaseNew1, SettingBaseNew2, SettingBaseNew3, SettingBaseNew4,
        SettingBaseNew5, SettingBaseNew6, SettingBaseDate, InboundInvoice,
        OutboundInvoice, StorageInvoice, Accessorial2
    )
    SELECT TOP(1)
        SettingBaseSend, SettingBaseSplitMinth, SettingBaseBgMonth, SettingBasePo,
        SettingBaseConum, SettingBaseWhnum, SettingBaseInbound, SettingBaseOutbound,
        SettingBaseStorage, SettingBaseSdAppr, SettingBaseFreeday, SettingBaseDeact,
        SettingBaseNew1, SettingBaseNew2, SettingBaseNew3, SettingBaseNew4,
        SettingBaseNew5, SettingBaseNew6, SettingBaseDate, InboundInvoice,
        OutboundInvoice, StorageInvoice, Accessorial2
    FROM SettingCustomer
    WHERE SettingBaseConum = @conum
      AND SettingBaseWhnum = @whnum;

    -- Get customer settings ID
    DECLARE @foundsettingcustomer_id INT = NULL;
    SELECT @foundsettingcustomer_id = SettingBaseID
    FROM SettingCustomer
    WHERE SettingBaseConum = @conum 
      AND SettingBaseWhnum = @whnum;

    -- Process rates using cursor
-- Declare all necessary variables


SET @testpallet  = 0;DECLARE @foundsettingcustomer_exists BIT = 0;
SET @hincrem = 0;
SET @hourlymin = 0;
SET @forflat = 0;
SET @teststring = '';
SET @wssuf = '';
DECLARE  @lll INT  = 0;
DECLARE @kkk INT = 0, @powpo NVARCHAR(50) = '', @suwsuf NVARCHAR(50) = '';
SET @itemqty = 0;

SET @wcalcul = 0;
SET @myponumber  = '';
DECLARE @bo INT = 0,@DUMMY INT;


-- Get customer settings
SELECT TOP 1 @SettingBaseNew1 = SettingBaseNew1, @SettingBaseNew3 = SettingBaseNew3, @foundsettingcustomer_exists = 1
FROM SettingCustomer
WHERE SettingBaseConum = @conum AND SettingBaseWhnum = @whnum;

-- Main cursor for wsetting
DECLARE wsetting_cursor CURSOR LOCAL FAST_FORWARD FOR
    SELECT SettingId, RatebyId, RateDescId, RateAmount, abs_num,
           SettingMin, SettingMax, ChargeID, UnitCode
    FROM #wsetting;

OPEN wsetting_cursor;
FETCH NEXT FROM wsetting_cursor INTO @SettingId, @RatebyId, @RateDescId, @RateAmount, @abs_num, 
                                     @SettingMin, @SettingMax, @ChargeID, @UnitCode;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Reset forflat
    SET @forflat = 0;
    
    -- Get rate amount from SettingRate
    SELECT TOP 1 @wammRate = RateAmount
    FROM SettingRate
    WHERE SettingId = @SettingId;
    
    IF (@wammRate IS NOT NULL)
        SET @RateAmount = @wammRate;
    ELSE
        SET @RateAmount = 0;
    
    SET @abs_num = '';

    -- Get CalculRate and NameAbrg
    SELECT TOP 1 @CalculRate = CalculRate
    FROM Rateby
    WHERE RatebyId = @RatebyId;

    SELECT TOP 1 @NameAbrg = NameAbrg
    FROM RateDesc
    WHERE RateDescId = @RateDescId;

    -- Main condition check
    IF @CalculRate IS NOT NULL AND @NameAbrg IS NOT NULL
    BEGIN
        -- First major condition: if (foundRatecal.CalculRate != 31)
        IF @CalculRate != 31
        BEGIN
            -- First nested condition: if (foundRatecal.CalculRate == 200)
            IF @CalculRate = 200
            BEGIN
                -- Process groupPonew88
                INSERT INTO #mylistfinal (
                    substat_code, wh_num, co_num, oldunitcost, transmission, action_code,
                    unitcost, quantity, fromdatetime, po_number, po_suffix, abs_num,
                    po_line, lot, row_status, sugg_qty, act_qty, item_type, emp_num,
                    result_msg, case_qtyitem, box_qtyitem, extdcost, doc_id, guid, cc_type
                )
                SELECT 
                    @RateDescId, @whnum, @conum, @SettingMin, @SettingId, @UnitCode,
                    @RateAmount, 1, @ChargeID, g.Remotekey, g.posuffix, '',
                    0, '', '', 1, 0, '', '0',
                    '', 0, 0, @RateAmount * 1, @NameAbrg,
                    CASE 
                        WHEN @SettingMin > (@RateAmount * 1) THEN @SettingMin
                        WHEN (@RateAmount * 1) > @SettingMax AND @SettingMax != 0 THEN @SettingMax
                        ELSE (@RateAmount * 1)
                    END,
                    @UnitCode
                FROM #groupPonew88 g;
            END
            ELSE -- else block after CalculRate == 200
            BEGIN
                -- Second nested condition: if (foundRatecal.CalculRate != 31)
                IF @CalculRate != 31
                BEGIN
                    -- Third nested condition: if (foundRatecal.CalculRate != 9)
                    IF @CalculRate != 9
                    BEGIN
                        -- Fourth nested condition: if (foundRatecal.PalletId == 0)
                        SELECT @CurrentPalletId = PalletId FROM Rateby WHERE RatebyId = @RatebyId;
                        
                        IF @CurrentPalletId = 0
                        BEGIN
                            -- Reset variables
                            SET @teststring = '';
                            SET @wssuf = '';
                            SET @lll = 0;
                            
                            -- Fifth nested condition: if (foundRatecal.CalculRate == 30 && inout == 2)
                            IF @CalculRate = 30 AND @inout = 2
                            BEGIN
                                -- Process CalculRate 30 for outbound
                                DECLARE group2_cursor CURSOR LOCAL FAST_FORWARD FOR
                                    SELECT Remotekey, posuffix FROM #groupPonew2;
                                
                                DECLARE @grp_Remotekey NVARCHAR(50), @grp_posuffix NVARCHAR(50);
                                DECLARE @PoCloseRate DECIMAL(18,2), @findExists BIT;
                                
                                OPEN group2_cursor;
                                FETCH NEXT FROM group2_cursor INTO @grp_Remotekey, @grp_posuffix;
                                
                                WHILE @@FETCH_STATUS = 0
                                BEGIN
                                    SET @findExists = 0;
                                    SET @PoCloseRate = 0;
                                    
                                    -- Look up PoCloseRequired
                                    SELECT TOP(1) @PoCloseRate = PCR.PoCloseRate, @findExists = 1
                                    FROM PoCloseRequired PCR
                                    WHERE PCR.Poconum = @conum AND PCR.Powhnum = @whnum
                                      AND PCR.Poponumber = @grp_Remotekey AND PCR.Posuffix = @grp_posuffix
                                      AND PCR.PoCloseDescId = @RateDescId;
                                    
                                    -- Process if found
                                    IF @findExists = 1 AND @PoCloseRate != 0
                                    BEGIN
                                        -- Handle HR/HHR
                                        IF UPPER(@UnitCode) IN ('HR','HHR') AND @foundsettingcustomer_exists = 1
                                        BEGIN
                                            SET @hour_increment = CASE @SettingBaseNew1 WHEN 1 THEN 15 WHEN 2 THEN 30 WHEN 3 THEN 1 ELSE 15 END;
                                            SET @PoCloseRate = dbo.Getquantity('HR', @hour_increment, @SettingBaseNew3, @PoCloseRate);
                                        END
                                        
                                        -- Calculate values
                                        SET @guid = @RateAmount * @PoCloseRate;
                                        SET @extdcost = @RateAmount * @PoCloseRate;
                                        SET @red_quantity = @PoCloseRate;
                                        SET @red_sugg_qty = @PoCloseRate;
                                        
                                        -- Apply constraints
                                        IF @SettingMin > @guid AND @guid != 0
                                            SET @guid = @SettingMin;
                                        IF @SettingMax != 0 AND @guid > @SettingMax
                                            SET @guid = @SettingMax;
                                        
                                        -- Insert if quantity not zero
                                        IF @red_quantity != 0
                                        BEGIN
                                            INSERT INTO #mylistfinal (
                                                substat_code, wh_num, co_num, oldunitcost, unitcost,
                                                transmission, fromdatetime, po_number, po_suffix, abs_num,
                                                po_line, lot, row_status, sugg_qty, act_qty, item_type,
                                                emp_num, result_msg, case_qtyitem, box_qtyitem, quantity,
                                                extdcost, doc_id, guid, cc_type
                                            )
                                            VALUES (
                                                @RateDescId, @whnum, @conum, @SettingMin, @RateAmount,
                                                @SettingId, @ChargeID, @grp_Remotekey, @grp_posuffix, '',
                                                0, '', '', @red_sugg_qty, 0, '',
                                                '0', '', 0, 0, @red_quantity,
                                                @extdcost, @NameAbrg, @guid, @UnitCode
                                            );
                                        END
                                    END
                                    
                                    FETCH NEXT FROM group2_cursor INTO @grp_Remotekey, @grp_posuffix;
                                END
                                
                                CLOSE group2_cursor;
                                DEALLOCATE group2_cursor;
                            END
                            ELSE -- else block after CalculRate 30
                            BEGIN
                                -- Reset variables
                                SET @kkk = 0;
                                SET @powpo = '';
                                SET @suwsuf = '';
                                
                                -- Sixth nested condition: if (foundRatecal.CalculRate == 200)
                                IF @CalculRate = 200
                                BEGIN
                                    -- Process groupPonew88 again (duplicate logic in C#)
                                    INSERT INTO #mylistfinal (
                                        substat_code, wh_num, co_num, oldunitcost, transmission, action_code,
                                        unitcost, quantity, fromdatetime, po_number, po_suffix, abs_num,
                                        po_line, lot, row_status, sugg_qty, act_qty, item_type, emp_num,
                                        result_msg, case_qtyitem, box_qtyitem, extdcost, doc_id, guid, cc_type
                                    )
                                    SELECT 
                                        @RateDescId, @whnum, @conum, @SettingMin, @SettingId, @UnitCode,
                                        @RateAmount, 1, @ChargeID, g.Remotekey, g.posuffix, '',
                                        0, '', '', 1, 0, '', '0',
                                        '', 0, 0, @RateAmount * 1, @NameAbrg,
                                        CASE 
                                            WHEN @SettingMin > (@RateAmount * 1) THEN @SettingMin
                                            WHEN (@RateAmount * 1) > @SettingMax AND @SettingMax != 0 THEN @SettingMax
                                            ELSE (@RateAmount * 1)
                                        END,
                                        @UnitCode
                                    FROM #groupPonew88 g;
                                END
                                
                                -- Seventh nested condition: if (foundRatecal.CalculRate == 320)
                                IF @CalculRate = 320
                                BEGIN
                                    SELECT TOP 1 @testpallet = TypeCalculate
                                    FROM RateDesc
                                    WHERE RateDescId = @RateDescId;
                                END
                                
                                -- Complete CalculRate 2666 processing from attached files
                                IF @CalculRate = 2666
                                BEGIN
                                    SET @bo = 0;
                                    SET @myponumber = '';
                                    
                                    -- Process groupPonew78 records
                                    DECLARE gropp_cursor CURSOR LOCAL FAST_FORWARD FOR
                                        SELECT Remotekey, posuffix, Rabsnum, wlot, wbinnum, wpalletid, Total
                                        FROM #groupPonew78
                                        WHERE Total <> 0
                                        ORDER BY Remotekey;
                                    
                                    DECLARE @gropp_Remotekey NVARCHAR(50), @gropp_posuffix NVARCHAR(50), @gropp_Rabsnum NVARCHAR(50);
                                    DECLARE @gropp_wlot NVARCHAR(50), @gropp_wbinnum NVARCHAR(50), @gropp_wpalletid NVARCHAR(50), @gropp_Total DECIMAL(18,2);
                                    
                                    OPEN gropp_cursor;
                                    FETCH NEXT FROM gropp_cursor INTO @gropp_Remotekey, @gropp_posuffix, @gropp_Rabsnum, 
                                                               @gropp_wlot, @gropp_wbinnum, @gropp_wpalletid, @gropp_Total;
                                    
                                    WHILE @@FETCH_STATUS = 0
                                    BEGIN
                                        IF @myponumber <> @gropp_Remotekey
                                        BEGIN
                                            SET @myponumber = @gropp_Remotekey;
                                            
                                            -- Process pick records
                                            DECLARE pick_cursor CURSOR LOCAL FAST_FORWARD FOR
                                                SELECT c.order_, c.abs_num, c.order_suffix, c.bin_num, k.prod_grp, c.lot, c.qty
                                                FROM irms_2_5_2.dbo.pick c
                                                INNER JOIN irms_2_5_2.dbo.item k ON UPPER(c.abs_num) = UPPER(k.abs_num)
                                                          AND c.co_num = k.co_num AND c.wh_num = k.wh_num
                                                WHERE c.order_ = @gropp_Remotekey AND c.order_suffix = @gropp_posuffix
                                                ORDER BY c.order_;
                                            
                                            DECLARE @pick_Remotekey NVARCHAR(50), @pick_Rabsnum NVARCHAR(50), @pick_posuffix NVARCHAR(50);
                                            DECLARE @pick_binnum NVARCHAR(50), @pick_empnum NVARCHAR(50), @pick_lot NVARCHAR(50), @pick_Total DECIMAL(18,6);
                                                    
                                            OPEN pick_cursor;
                                            FETCH NEXT FROM pick_cursor INTO @pick_Remotekey, @pick_Rabsnum, @pick_posuffix, 
                                                                           @pick_binnum, @pick_empnum, @pick_lot, @pick_Total;
                                            
                                            WHILE @@FETCH_STATUS = 0
                                            BEGIN
                                                BEGIN TRY
                                                    DECLARE @newqtyototal DECIMAL(18,6), @wempnum NVARCHAR(50), @wllot NVARCHAR(50);
                                                    DECLARE @witemm_pallet_qty DECIMAL(18,6), @witemm_case_qty DECIMAL(18,6), @witemm_uom NVARCHAR(50);
                                                    DECLARE @nnewq DECIMAL(18,6), @newtotalnew DECIMAL(18,6);
                                                    
                                                    SET @wllot = @pick_lot;
                                                    SET @wempnum = @pick_empnum;
                                                    SET @newqtyototal = @pick_Total;
                                                    
                                                    -- Get item data
                                                    SELECT TOP 1 @witemm_pallet_qty = pallet_qty, @witemm_case_qty = case_qty, @witemm_uom = uom
                                                    FROM irms_2_5_2.dbo.item
                                                    WHERE UPPER(abs_num) = UPPER(@pick_Rabsnum) AND co_num = @conum AND wh_num = @whnum;
                                                    
                                                    -- Calculate quantities
                                                    SET @nnewq = @pick_Total - (FLOOR(@pick_Total / @witemm_pallet_qty) * @witemm_pallet_qty);
                                                    SET @newtotalnew = @pick_Total;

                                                    IF @pick_Total >= @witemm_pallet_qty
                                                    BEGIN
                                                        SET @nnewq = @pick_Total - (FLOOR(@pick_Total / @witemm_pallet_qty) * @witemm_pallet_qty);
                                                        SET @newtotalnew = @nnewq;
                                                    END

                                                    IF @newtotalnew < @witemm_case_qty
                                                    BEGIN
                                                        SET @nnewq = 0;
                                                    END
                                                    ELSE
                                                    BEGIN
                                                        IF @newtotalnew <= @witemm_case_qty
                                                        BEGIN -- CORRECTION: Added BEGIN for IF block
                                                            SET @nnewq = @newtotalnew;
                                                        END -- CORRECTION: Added END for IF block
                                                        ELSE
                                                        BEGIN -- CORRECTION: Added BEGIN for ELSE block
                                                            SET @nnewq = FLOOR(@newtotalnew / @witemm_case_qty);
                                                        END -- CORRECTION: Added END for ELSE block
                                                    END

                                                    -- Special handling for EA UOM
                                                    IF UPPER(@witemm_uom) = 'EA'
                                                    BEGIN
                                                        IF @pick_Total < @witemm_pallet_qty
                                                        BEGIN
                                                            SET @nnewq = FLOOR(@pick_Total / @witemm_case_qty);
                                                        END
                                                        ELSE
                                                        BEGIN
                                                            SET @nnewq = @pick_Total - (FLOOR(@pick_Total / @witemm_pallet_qty) * @witemm_pallet_qty);
                                                            
                                                            IF @nnewq < @witemm_case_qty
                                                            BEGIN
                                                              SET @DUMMY=2;  -- Empty block in C# code
                                                            END
                                                            ELSE
                                                            BEGIN
                                                                SET @nnewq = @nnewq - (FLOOR(@nnewq / @witemm_case_qty) * @witemm_case_qty);
                                                            END
                                                        END
                                                    END

                                                    -- Only process if quantity not zero
                                                    IF @nnewq <> 0
                                                    BEGIN
                                                        -- Try to get ForGroup data
                                                        BEGIN TRY
                                                            SELECT TOP 1 @df_ForGroup = ForGroup FROM RateDesc WHERE RateDescId = @RateDescId;

                                                            IF @df_ForGroup = 1
                                                            BEGIN
                                                                SELECT TOP 1 @groupRate = GroupRate
                                                                FROM GroupItem
                                                                WHERE Conum = @conum AND Whnum = @whnum AND RateDescId = @RateDescId 
                                                                  AND LTRIM(RTRIM(GroupName)) = LTRIM(RTRIM(@wempnum)) AND KindId = @inout;

                                                                IF @groupRate IS NOT NULL
                                                                BEGIN -- CORRECTION: Added BEGIN for IF block
                                                                    SET @RateAmount = @groupRate;
                                                                END -- CORRECTION: Added END for IF block
                                                            END
                                                        END TRY
                                                        BEGIN CATCH
                                                            IF LTRIM(RTRIM(@wempnum)) <> ''
                                                            BEGIN
                                                                SET @RateAmount = 0;
                                                                SET @SettingMin = 0;
                                                            END
                                                        END CATCH

                                                        SET @extdcost = 0;
                                                        SET @red_quantity = @nnewq;

                                                        -- Adjust quantity for HR/HHR if needed
                                                        IF UPPER(@UnitCode) IN ('HR', 'HHR') AND @foundsettingcustomer_exists = 1
                                                        BEGIN
                                                            SET @hincrem = CASE @SettingBaseNew1 WHEN 1 THEN 15 WHEN 2 THEN 30 WHEN 3 THEN 1 ELSE 15 END;
                                                            SET @hourlymin = @SettingBaseNew3;
                                                            SET @red_quantity = dbo.Getquantity('HR', @hincrem, @hourlymin, @red_quantity);
                                                        END

                                                        -- Calculate guid
                                                        SET @extdcost = @RateAmount * @red_quantity;
                                                        SET @guid = @RateAmount * @red_quantity;

                                                        -- Apply min/max constraints
                                                        IF @SettingMax > 0 AND @guid > @SettingMax
                                                        BEGIN -- CORRECTION: Added BEGIN for IF block
                                                            SET @guid = @SettingMax;
                                                        END -- CORRECTION: Added END for IF block
                                                        IF @SettingMin > 0 AND @guid < @SettingMin AND @guid <> 0
                                                        BEGIN -- CORRECTION: Added BEGIN for IF block
                                                            SET @guid = @SettingMin;
                                                        END -- CORRECTION: Added END for IF block

                                                        -- Insert the record
                                                        INSERT INTO #mylistfinal (
                                                            substat_code, wh_num, co_num, emp_num, oldunitcost, 
                                                            transmission, unitcost, extdcost, doc_id, lot, 
                                                            abs_num, action_code, fromdatetime, po_number, 
                                                            po_suffix, quantity, sugg_qty, guid, 
                                                            case_qtyitem, box_qtyitem, cc_type
                                                        )
                                                        VALUES (
                                                            @RateDescId, @whnum, @conum, @wempnum, @SettingMin,
                                                            @SettingId, @RateAmount, @extdcost, @NameAbrg, @pick_lot,
                                                            @pick_Rabsnum, @UnitCode, @ChargeID, @pick_Remotekey,
                                                            @pick_posuffix, @red_quantity, @pick_Total, @guid,
                                                            0, 0, @UnitCode
                                                        );
                                                    END
                                                END TRY
                                                BEGIN CATCH
                                                    -- Continue processing
                                                END CATCH
                                                
                                                FETCH NEXT FROM pick_cursor INTO @pick_Remotekey, @pick_Rabsnum, @pick_posuffix, 
                                                                              @pick_binnum, @pick_empnum, @pick_lot, @pick_Total;
                                            END
                                            
                                            CLOSE pick_cursor;
                                            DEALLOCATE pick_cursor;
                                        END
                                       
                                        
                                        IF @bo = 0
                                        BEGIN
                                            SET @bo = 1;
                                            SET @myponumber = @gropp_Remotekey;
                                        END
                                        
                                        SET @myponumber = @gropp_Remotekey;
                                        
                                        FETCH NEXT FROM gropp_cursor INTO @gropp_Remotekey, @gropp_posuffix, @gropp_Rabsnum, 
                                                                       @gropp_wlot, @gropp_wbinnum, @gropp_wpalletid, @gropp_Total;
                                    END
                                    
                                    CLOSE gropp_cursor;
                                    DEALLOCATE gropp_cursor;
                                END
                                ELSE IF @CalculRate != 2666
                                BEGIN
                                    -- Process groupPonew records (second part)
                                    SET @kkk = 0;
                                    
                                    DECLARE grouppn_cursor CURSOR LOCAL FAST_FORWARD FOR
                                        SELECT Remotekey, posuffix, Rabsnum, wlot, wbinnum, wpalletid, Total
                                        FROM #groupPonew
                                        WHERE Total <> 0;
                                    
                                    DECLARE @grouppn_Remotekey NVARCHAR(50), @grouppn_posuffix NVARCHAR(50), @grouppn_Rabsnum NVARCHAR(50);
                                    DECLARE @grouppn_wlot NVARCHAR(50), @grouppn_wbinnum NVARCHAR(50), @grouppn_wpalletid NVARCHAR(50), @grouppn_Total DECIMAL(18,2);
                                    
                                    OPEN grouppn_cursor;
                                    FETCH NEXT FROM grouppn_cursor INTO @grouppn_Remotekey, @grouppn_posuffix, @grouppn_Rabsnum, 
                                                                     @grouppn_wlot, @grouppn_wbinnum, @grouppn_wpalletid, @grouppn_Total;
                                    
                                    WHILE @@FETCH_STATUS = 0
                                    BEGIN
                                        SET @kkk = @kkk + 1;
                                        SET @RateAmount = @wammRate;

                                        FETCH NEXT FROM grouppn_cursor INTO @grouppn_Remotekey, @grouppn_posuffix, @grouppn_Rabsnum, 
                                                                         @grouppn_wlot, @grouppn_wbinnum, @grouppn_wpalletid, @grouppn_Total;
                                    END
                                    
                                    CLOSE grouppn_cursor;
                                    DEALLOCATE grouppn_cursor;
                                END
                                
                                else IF @CalculRate = 2666
                                BEGIN
                                    DECLARE grouppn_cursor CURSOR LOCAL FAST_FORWARD FOR
                                        SELECT Remotekey, posuffix, Rabsnum, wlot, wbinnum, wpalletid, Total
                                        FROM #groupPonew
                                        WHERE Total <> 0;
                                    
                                    --DECLARE @grouppn_Remotekey NVARCHAR(50), @grouppn_posuffix NVARCHAR(50), @grouppn_Rabsnum NVARCHAR(50);
                                    --DECLARE @grouppn_wlot NVARCHAR(50), @grouppn_wbinnum NVARCHAR(50), @grouppn_wpalletid NVARCHAR(50), @grouppn_Total DECIMAL(18,2);
                                    
                                    OPEN grouppn_cursor;
                                    FETCH NEXT FROM grouppn_cursor INTO @grouppn_Remotekey, @grouppn_posuffix, @grouppn_Rabsnum, 
                                                                     @grouppn_wlot, @grouppn_wbinnum, @grouppn_wpalletid, @grouppn_Total;
                                    
                                    WHILE @@FETCH_STATUS = 0
                                    BEGIN
                                        -- Create temp table for totalProducts grouping
                                        IF OBJECT_ID('tempdb..#totalProducts') IS NOT NULL 
                                        BEGIN -- CORRECTION: Added BEGIN for IF block
                                            DROP TABLE #totalProducts;
                                        END -- CORRECTION: Added END for IF block
                                            
                                        CREATE TABLE #totalProducts (
                                            empnum NVARCHAR(50),
                                            lot NVARCHAR(50),
                                            posuffix NVARCHAR(50),
                                            binnum NVARCHAR(50),
                                            Rabsnum NVARCHAR(50),
                                            Remotekey NVARCHAR(50),
                                            Total DECIMAL(18,6)
                                        );
                                        
                                        -- Populate the totalProducts table with aggregated data
                                        INSERT INTO #totalProducts
                                        SELECT 
                                            k.prod_grp AS empnum,
                                            c.lot,
                                            c.order_suffix AS posuffix,
                                            c.bin_num AS binnum,
                                            c.abs_num AS Rabsnum,
                                            c.order_ AS Remotekey,
                                            SUM(c.qty) AS Total
                                        FROM irms_2_5_2.dbo.pick c
                                        INNER JOIN irms_2_5_2.dbo.item k ON UPPER(c.abs_num) = UPPER(k.abs_num)
                                                      AND c.co_num = k.co_num
                                                      AND c.wh_num = k.wh_num
                                        WHERE c.order_ = @grouppn_Remotekey
                                          AND c.order_suffix = @grouppn_posuffix
                                          AND UPPER(c.abs_num) = UPPER(@grouppn_Rabsnum)
                                        GROUP BY k.prod_grp, c.lot, c.order_suffix, c.bin_num, c.abs_num, c.order_;
                                        
                                        -- Process each group in totalProducts
                                        DECLARE tp_cursor CURSOR LOCAL FAST_FORWARD FOR
                                            SELECT empnum, lot, posuffix, binnum, Rabsnum, Remotekey, Total
                                            FROM #totalProducts;
                                            
                                        DECLARE @tp_empnum NVARCHAR(50), @tp_lot NVARCHAR(50), @tp_posuffix NVARCHAR(50);
                                        DECLARE @tp_binnum NVARCHAR(50), @tp_Rabsnum NVARCHAR(50), @tp_Remotekey NVARCHAR(50), @tp_Total DECIMAL(18,6);
                                                
                                        OPEN tp_cursor;
                                        FETCH NEXT FROM tp_cursor INTO @tp_empnum, @tp_lot, @tp_posuffix, @tp_binnum, 
                                                                     @tp_Rabsnum, @tp_Remotekey, @tp_Total;
                                                     
                                        WHILE @@FETCH_STATUS = 0
                                        BEGIN
                                            BEGIN TRY
                                                DECLARE @tp_witemm_pallet_qty DECIMAL(18,6), @tp_witemm_case_qty DECIMAL(18,6), @tp_witemm_uom NVARCHAR(50);
                                                DECLARE @tp_nnewq DECIMAL(18,6), @tp_newtotalnew DECIMAL(18,6);
                                                
                                                SELECT TOP 1 @tp_witemm_pallet_qty = pallet_qty, @tp_witemm_case_qty = case_qty, @tp_witemm_uom = uom
                                                FROM irms_2_5_2.dbo.item
                                                WHERE UPPER(abs_num) = UPPER(@tp_Rabsnum) AND co_num = @conum AND wh_num = @whnum;
                                                
                                                -- Calculate quantities
                                                SET @tp_nnewq = @tp_Total - (FLOOR(@tp_Total / @tp_witemm_pallet_qty) * @tp_witemm_pallet_qty);
                                                SET @tp_newtotalnew = @tp_Total;
                                                
                                                IF @tp_Total >= @tp_witemm_pallet_qty
                                                BEGIN
                                                    SET @tp_nnewq = @tp_Total - (FLOOR(@tp_Total / @tp_witemm_pallet_qty) * @tp_witemm_pallet_qty);
                                                    SET @tp_newtotalnew = @tp_nnewq;
                                                END
                                                
                                                IF @tp_newtotalnew < @tp_witemm_case_qty
                                                BEGIN
                                                    SET @tp_nnewq = 0;
                                                END
                                                ELSE
                                                BEGIN
                                                    SET @tp_nnewq = FLOOR(@tp_newtotalnew / @tp_witemm_case_qty);
                                                END
                                                
                                                -- Special handling for EA UOM
                                                IF UPPER(@tp_witemm_uom) = 'EA'
                                                BEGIN
                                                    IF @tp_Total < @tp_witemm_pallet_qty
                                                    BEGIN
                                                        SET @tp_nnewq = FLOOR(@tp_Total / @tp_witemm_case_qty);
                                                    END
                                                    ELSE
                                                    BEGIN
                                                        SET @tp_nnewq = @tp_Total - (FLOOR(@tp_Total / @tp_witemm_pallet_qty) * @tp_witemm_pallet_qty);
                                                        
                                                        IF @tp_nnewq < @tp_witemm_case_qty
                                                        BEGIN
                                                          SET @DUMMY=1;  -- Empty in C# code
                                                        END
                                                        ELSE
                                                        BEGIN
                                                            SET @tp_nnewq = @tp_nnewq - (FLOOR(@tp_nnewq / @tp_witemm_case_qty) * @tp_witemm_case_qty);
                                                        END
                                                    END
                                                END
                                                
                                                -- Process if quantity not zero
                                                IF @tp_nnewq <> 0
                                                BEGIN
                                                    BEGIN TRY
                                                        SELECT TOP 1 @df_ForGroup = ForGroup FROM RateDesc WHERE RateDescId = @RateDescId;
                                                        
                                                        IF @df_ForGroup = 1
                                                        BEGIN
                                                            DECLARE @tp_groupRate DECIMAL(18,6);
                                                            SELECT TOP 1 @tp_groupRate = GroupRate
                                                            FROM GroupItem
                                                            WHERE Conum = @conum AND Whnum = @whnum AND RateDescId = @RateDescId 
                                                              AND LTRIM(RTRIM(GroupName)) = LTRIM(RTRIM(@tp_empnum)) AND KindId = @inout;
                                                              
                                                            IF @tp_groupRate IS NOT NULL
                                                            BEGIN -- CORRECTION: Added BEGIN for IF block
                                                                SET @RateAmount = @tp_groupRate;
                                                            END -- CORRECTION: Added END for IF block
                                                        END
                                                    END TRY
                                                    BEGIN CATCH
                                                        IF LTRIM(RTRIM(@tp_empnum)) <> ''
                                                        BEGIN
                                                            SET @RateAmount = 0;
                                                            SET @SettingMin = 0;
                                                        END
                                                    END CATCH
                                                    
                                                    DECLARE @tp_red_extdcost DECIMAL(18,6), @tp_red_quantity DECIMAL(18,6), @tp_red_guid DECIMAL(18,6);
                                                    
                                                    SET @tp_red_extdcost = 0;
                                                    SET @tp_red_quantity = @tp_nnewq;
                                                    
                                                    -- Adjust quantity for HR/HHR if needed
                                                    IF UPPER(@UnitCode) IN ('HR', 'HHR') AND @foundsettingcustomer_exists = 1
                                                    BEGIN
                                                        SET @hincrem = CASE @SettingBaseNew1 WHEN 1 THEN 15 WHEN 2 THEN 30 WHEN 3 THEN 1 ELSE 15 END;
                                                        SET @hourlymin = @SettingBaseNew3;
                                                        SET @tp_red_quantity = dbo.Getquantity('HR', @hincrem, @hourlymin, @tp_red_quantity);
                                                    END
                                                    
                                                    -- Calculate guid and extdcost
                                                    SET @tp_red_extdcost = @RateAmount * @tp_red_quantity;
                                                    SET @tp_red_guid = @RateAmount * @tp_red_quantity;
                                                    
                                                    -- Apply min/max constraints
                                                    IF @SettingMax > 0 AND @tp_red_guid > @SettingMax
                                                    BEGIN -- CORRECTION: Added BEGIN for IF block
                                                        SET @tp_red_guid = @SettingMax;
                                                    END -- CORRECTION: Added END for IF block
                                                    IF @SettingMin > 0 AND @tp_red_guid < @SettingMin AND @tp_red_guid <> 0
                                                    BEGIN -- CORRECTION: Added BEGIN for IF block
                                                        SET @tp_red_guid = @SettingMin;
                                                    END -- CORRECTION: Added END for IF block
                                                    
                                                    -- Insert the record
                                                    INSERT INTO #mylistfinal (
                                                        substat_code, wh_num, co_num, emp_num, oldunitcost, 
                                                        transmission, unitcost, extdcost, doc_id, lot,
                                                        abs_num, action_code, fromdatetime, po_number, 
                                                        po_suffix, quantity, sugg_qty, guid,
                                                        case_qtyitem, box_qtyitem, cc_type
                                                    )
                                                    VALUES (
                                                        @RateDescId, @whnum, @conum, @tp_empnum, @SettingMin,
                                                        @SettingId, @RateAmount, @tp_red_extdcost, @NameAbrg, @tp_lot,
                                                        @tp_Rabsnum, @UnitCode, @ChargeID, @tp_Remotekey,
                                                        @tp_posuffix, @tp_red_quantity, @tp_Total, @tp_red_guid,
                                                        0, 0, @UnitCode
                                                    );
                                                END
                                            END TRY
                                            BEGIN CATCH
                                                -- Continue processing
                                            END CATCH
                                            
                                            FETCH NEXT FROM tp_cursor INTO @tp_empnum, @tp_lot, @tp_posuffix, @tp_binnum, 
                                                                         @tp_Rabsnum, @tp_Remotekey, @tp_Total;
                                        END
                                      
                                        CLOSE tp_cursor;
                                        DEALLOCATE tp_cursor;
                                        
                                        DROP TABLE #totalProducts;
                                        
                                        FETCH NEXT FROM grouppn_cursor INTO @grouppn_Remotekey, @grouppn_posuffix, @grouppn_Rabsnum, 
                                                                         @grouppn_wlot, @grouppn_wbinnum, @grouppn_wpalletid, @grouppn_Total;
                                    END
                                    
                                    CLOSE grouppn_cursor;
                                    DEALLOCATE grouppn_cursor;
                                END
                                
                                -- Process other CalculRates
                                DECLARE grouppn_cursor2 CURSOR LOCAL FAST_FORWARD FOR
                                    SELECT Remotekey, posuffix, Rabsnum, Total
                                    FROM #groupPonew
                                    WHERE Total != 0;
                                
                                DECLARE @grouppn_Remotekey2 NVARCHAR(50), @grouppn_posuffix2 NVARCHAR(50);
                                DECLARE @grouppn_Rabsnum2 NVARCHAR(50), @grouppn_Total2 DECIMAL(18,6);
                                
                                OPEN grouppn_cursor2;
                                FETCH NEXT FROM grouppn_cursor2 INTO @grouppn_Remotekey2, @grouppn_posuffix2, @grouppn_Rabsnum2, @grouppn_Total2;
                                
                                WHILE @@FETCH_STATUS = 0
                                BEGIN
                                    SET @kkk = @kkk + 1;
                                    SET @RateAmount = @wammRate;
                                    
                                    -- Process different CalculRates
                                    IF @inout = 2 AND @CalculRate = 20
                                    BEGIN
                                        -- Process CalculRate 20
                                        IF @teststring != @grouppn_Remotekey2 OR @wssuf != @grouppn_posuffix2
                                        BEGIN
                                            DECLARE @countfinal INT = 0;
                                            
                                            SELECT @countfinal = COUNT(*)
                                            FROM irms_2_5_2.dbo.auditlog
                                            WHERE po_number = @grouppn_Remotekey2 AND po_suffix = @grouppn_posuffix2
                                              AND wh_num = @whnum AND co_num = @conum
                                              AND lot IS NOT NULL AND lot != ''
                                              AND UPPER(trans_type) = 'IG';
                                            
                                            -- Calculate and apply constraints
                                            SET @guid = @RateAmount * @countfinal;
                                            IF @SettingMin > @guid
                                            BEGIN -- CORRECTION: Added BEGIN for IF block
                                                SET @guid = @SettingMin;
                                            END
											ELSE SET @guid = @RateAmount * @countfinal;-- CORRECTION: Added END for IF block
                                            IF @guid > @SettingMax AND @SettingMax != 0
                                            BEGIN -- CORRECTION: Added BEGIN for IF block
                                                SET @guid = @SettingMax;
                                            END 
											ELSE SET @guid = @RateAmount * @countfinal;-- CORRECTION: Added END for IF block
                                            
                                            INSERT INTO #mylistfinal (
                                                substat_code, wh_num, co_num, oldunitcost, unitcost,
                                                transmission, action_code, fromdatetime, po_number, po_suffix,
                                                abs_num, po_line, lot, row_status, sugg_qty, act_qty,
                                                item_type, emp_num, result_msg, case_qtyitem, box_qtyitem,
                                                quantity, extdcost, doc_id, guid, cc_type
                                            )
                                            VALUES (
                                                @RateDescId, @whnum, @conum, @SettingMin, @RateAmount,
                                                @SettingId, @UnitCode, @ChargeID, @grouppn_Remotekey2, @grouppn_posuffix2,
                                                '', 0, '', '', @countfinal, 0,
                                                '', '0', '', 0, 0,
                                                @countfinal, @RateAmount * @countfinal, @NameAbrg, @guid, @UnitCode
                                            );
                                        END
                                        
                                        SET @teststring = @grouppn_Remotekey2;
                                        SET @wssuf = @grouppn_posuffix2;
                                    END


                                    
                                    FETCH NEXT FROM grouppn_cursor2 INTO @grouppn_Remotekey2, @grouppn_posuffix2, @grouppn_Rabsnum2, @grouppn_Total2;
                                END
                                
                                CLOSE grouppn_cursor2;
                                DEALLOCATE grouppn_cursor2;

								      -- CalculRate = 71 for outbound
                IF @inout = 2 AND @CalculRate = 71
                BEGIN
                    SET @kkk  = 0;
                    
                    -- Process pick records for each group
                    DECLARE grouppn_cursor_71 CURSOR LOCAL FAST_FORWARD FOR
                        SELECT Remotekey, posuffix, Rabsnum, Total
                        FROM #groupPonew
                        WHERE Total <> 0;
                    
                    DECLARE @gpn_Remotekey NVARCHAR(50),
                            @gpn_posuffix NVARCHAR(50),
                            @gpn_Rabsnum NVARCHAR(50),
                            @gpn_Total DECIMAL(18,2);
                    
                    OPEN grouppn_cursor_71;
                    FETCH NEXT FROM grouppn_cursor_71 INTO @gpn_Remotekey, @gpn_posuffix, @gpn_Rabsnum, @gpn_Total;
                    
                    WHILE @@FETCH_STATUS = 0
                    BEGIN
                        SET @kkk = @kkk + 1;
                        SET @RateAmount = @wammRate;
                        
                        IF @teststring <> @gpn_Remotekey OR @wssuf <> @gpn_posuffix
                        BEGIN
                            -- Create temp table for audit logs
                            IF OBJECT_ID('tempdb..#calresult') IS NOT NULL DROP TABLE #calresult;
                            CREATE TABLE #calresult (
                                lot NVARCHAR(100),
                                abs_num NVARCHAR(100)
                            );
                            
                            -- Get distinct lot and abs_num combinations
                            INSERT INTO #calresult (lot, abs_num)
                            SELECT DISTINCT c.lot, UPPER(c.abs_num) as abs_num
                            FROM irms_2_5_2.dbo.auditlog c
                            WHERE c.po_number = @gpn_Remotekey 
                              AND c.po_suffix = @gpn_posuffix 
                              AND c.wh_num = @whnum
                              AND c.co_num = @conum 
                              AND c.lot IS NOT NULL
                              AND c.lot <> ''
                              AND c.lot <> 'NULL';
                            
                            -- Get count of groups
                            SELECT @calresult_count = COUNT(*) FROM #calresult;
                            
                            -- Process each audit log record
                            DECLARE @wi INT = 0;
                            SET @amountofcal = 0;
                            
                            DECLARE calresult_cursor CURSOR LOCAL FAST_FORWARD FOR
                                SELECT lot, abs_num FROM #calresult;
                            
                            DECLARE @itemcal_lot NVARCHAR(100),
                                    @itemcal_abs_num NVARCHAR(100);
                            
                            OPEN calresult_cursor;
                            FETCH NEXT FROM calresult_cursor INTO @itemcal_lot, @itemcal_abs_num;
                            
                            WHILE @@FETCH_STATUS = 0
                            BEGIN
                                SET @wi = @wi + 1;
                                
                                -- Calculate guid based on conditions
                                IF @SettingMin > (@RateAmount * 1) 
                                BEGIN
                                    IF @calresult_count = 1
                                        SET @red_guid = @SettingMin;
                                    ELSE
                                        SET @red_guid = @RateAmount * 1;
                                END
                                ELSE
                                BEGIN
                                    SET @red_guid = @RateAmount * 1;
                                END
                                
                                IF @red_guid > @SettingMax AND @SettingMax <> 0
                                BEGIN
                                    IF @calresult_count = 1
                                        SET @red_guid = @SettingMax;
                                END
                                
                                IF @calresult_count > 1
                                BEGIN
                                    SET @amountofcal = @amountofcal + (@RateAmount * 1);
                                    SET @red_guid = @RateAmount * 1;
                                END
                                
                                -- Insert record for each group
                                INSERT INTO #mylistfinal (
                                    substat_code, wh_num, co_num, abs_num, transmission, 
                                    oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                                    po_line, lot, row_status, sugg_qty, act_qty, 
                                    item_type, emp_num, quantity, result_msg, case_qtyitem,
                                    box_qtyitem, cc_type, extdcost, doc_id, guid
                                )
                                VALUES (
                                    @RateDescId, @whnum, @conum, @itemcal_abs_num, @SettingId,
                                    @SettingMin, @RateAmount, @ChargeName, @gpn_Remotekey, @gpn_posuffix,
                                    0, @itemcal_lot, '', 1, 0,
                                    '', '0', 1, @gpn_Remotekey + ' ' + @gpn_posuffix, 0,
                                    0, @UnitCode, @RateAmount * 1, @NameAbrg, @red_guid
                                );
                                
                                FETCH NEXT FROM calresult_cursor INTO @itemcal_lot, @itemcal_abs_num;
                            END
                            
                            CLOSE calresult_cursor;
                            DEALLOCATE calresult_cursor;
                            
                            -- Handle special cases for multiple records
                            IF @calresult_count > 1
                            BEGIN
                                -- Handle case where total exceeds max
                                IF @amountofcal > @SettingMax AND @SettingMax <> 0
                                BEGIN
                                    INSERT INTO #mylistfinal (
                                        substat_code, wh_num, co_num, abs_num, transmission, 
                                        oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                                        po_line, lot, row_status, sugg_qty, act_qty, 
                                        item_type, emp_num, quantity, result_msg, case_qtyitem,
                                        box_qtyitem, cc_type, extdcost, doc_id, guid
                                    )
                                    VALUES (
                                        @RateDescId, @whnum, @conum, '', @SettingId,
                                        @SettingMin, @RateAmount, @ChargeName, @gpn_Remotekey, @gpn_posuffix,
                                        0, '', '', 1, 0,
                                        '', '0', 1, @gpn_Remotekey + ' ' + @gpn_posuffix, 0,
                                        0, @UnitCode, @amountofcal - @SettingMax, @NameAbrg, @amountofcal - @SettingMax
                                    );
                                END
                                
                                -- Handle case where total is below min
                                IF @amountofcal < @SettingMin AND @SettingMin <> 0
                                BEGIN
                                    INSERT INTO #mylistfinal (
                                        substat_code, wh_num, co_num, abs_num, transmission, 
                                        oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                                        po_line, lot, row_status, sugg_qty, act_qty, 
                                        item_type, emp_num, quantity, result_msg, case_qtyitem,
                                        box_qtyitem, cc_type, extdcost, doc_id, guid
                                    )
                                    VALUES (
                                        @RateDescId, @whnum, @conum, '', @SettingId,
                                        @SettingMin - @amountofcal, @RateAmount, @ChargeName, @gpn_Remotekey, @gpn_posuffix,
                                        0, '', '', 1, 0,
                                        '', '0', 1, @gpn_Remotekey + ' ' + @gpn_posuffix, 0,
                                        0, @UnitCode, @SettingMin - @amountofcal, @NameAbrg, @SettingMin - @amountofcal
                                    );
                                END
                            END
                            
                            -- Clean up temp table
                            DROP TABLE #calresult;
                        END
                        
                        -- Update tracking variables
                        SET @teststring = @gpn_Remotekey;
                        SET @wssuf = @gpn_posuffix;
                        
                        -- Move to next record
                        FETCH NEXT FROM grouppn_cursor_71 INTO @gpn_Remotekey, @gpn_posuffix, @gpn_Rabsnum, @gpn_Total;
                    END
                    
                    CLOSE grouppn_cursor_71;
                    DEALLOCATE grouppn_cursor_71;
                END

                -- CalculRate = 8 for outbound
                IF @inout = 2 AND @CalculRate = 8
                BEGIN
                    -- Process pick records
                    DECLARE grouppn_cursor_8 CURSOR LOCAL FAST_FORWARD FOR
                        SELECT Remotekey, posuffix, Rabsnum, Total
                        FROM #groupPonew
                        WHERE Total <> 0;
                    
                    DECLARE @gpn_Remotekey8 NVARCHAR(50),
                            @gpn_posuffix8 NVARCHAR(50),
                            @gpn_Rabsnum8 NVARCHAR(50),
                            @gpn_Total8 DECIMAL(18,2);
                    
                    OPEN grouppn_cursor_8;
                    FETCH NEXT FROM grouppn_cursor_8 INTO @gpn_Remotekey8, @gpn_posuffix8, @gpn_Rabsnum8, @gpn_Total8;
                    
                    WHILE @@FETCH_STATUS = 0
                    BEGIN
                        SET @kkk = @kkk + 1;
                        SET @RateAmount = @wammRate;
                        
                        IF @teststring <> @gpn_Remotekey8 OR @wssuf <> @gpn_posuffix8
                        BEGIN
                            -- Get TypeCalculate from RateDesc
                            DECLARE @TypeCalculate8 INT;
                            SELECT TOP 1 @TypeCalculate8 = TypeCalculate
                            FROM RateDesc
                            WHERE RateDescId = @RateDescId;
                            
                            -- Count records based on TypeCalculate
                            IF @TypeCalculate8 = 4
                            BEGIN
                                -- Count with lot_ctrl filter
                                SELECT @calresult_count = COUNT(*)
                                FROM irms_2_5_2.dbo.orddtl c
                                JOIN irms_2_5_2.dbo.ordhdr k ON c.id = k.id
                                JOIN irms_2_5_2.dbo.item p ON k.co_num = p.co_num 
                                                          AND k.wh_num = p.wh_num 
                                                          AND c.abs_num = p.abs_num
                                WHERE k.order_ = @gpn_Remotekey8
                                  AND k.order_suffix = @gpn_posuffix8
                                  AND k.wh_num = @whnum
                                  AND k.co_num = @conum
                                  AND p.lot_ctrl = 1;
                            END
                            ELSE
                            BEGIN
                                -- Count without lot_ctrl filter
                                SELECT @calresult_count = COUNT(*)
                                FROM irms_2_5_2.dbo.orddtl c
                                JOIN irms_2_5_2.dbo.ordhdr k ON c.id = k.id
                                WHERE k.order_ = @gpn_Remotekey8
                                  AND k.order_suffix = @gpn_posuffix8
                                  AND k.wh_num = @whnum
                                  AND k.co_num = @conum;
                            END
                            
                            -- Calculate amounts
                            SET @extdcost = @RateAmount * @calresult_count;
                            
                            -- Apply min/max logic
                            IF @SettingMin > @extdcost
                            BEGIN
                                SET @guid = @SettingMin;
                            END
                            ELSE
                            BEGIN
                                SET @guid = @RateAmount * @calresult_count;
                            END
                            
                            IF @guid > @SettingMax AND @SettingMax <> 0
                            BEGIN
                                SET @guid = @SettingMax;
                            END
                            
                            -- Insert the record
                            INSERT INTO #mylistfinal (
                                substat_code, wh_num, co_num, abs_num, transmission, 
                                oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                                po_line, lot, row_status, sugg_qty, act_qty, 
                                item_type, emp_num, quantity, result_msg, case_qtyitem,
                                box_qtyitem, cc_type, extdcost, doc_id, guid
                            )
                            VALUES (
                                @RateDescId, @whnum, @conum, '', @SettingId,
                                @SettingMin, @RateAmount, @ChargeName, @gpn_Remotekey8, @gpn_posuffix8,
                                0, '', '', @calresult_count, 0,
                                '', '0', @calresult_count, @gpn_Remotekey8 + ' ' + @gpn_posuffix8, 0,
                                0, @UnitCode, @extdcost, @NameAbrg, @guid
                            );
                        END
                        
                        -- Update tracking variables
                        SET @teststring = @gpn_Remotekey8;
                        SET @wssuf = @gpn_posuffix8;
                        
                        -- Move to next record
                        FETCH NEXT FROM grouppn_cursor_8 INTO @gpn_Remotekey8, @gpn_posuffix8, @gpn_Rabsnum8, @gpn_Total8;
                    END
                    
                    CLOSE grouppn_cursor_8;
                    DEALLOCATE grouppn_cursor_8;
                END

                -- CalculRate = 320
                IF @CalculRate = 320
                BEGIN
                    -- Set calculation method based on testpallet
                    IF @testpallet = 1 SET @wcalcul = 260;
                    IF @testpallet = 2 SET @wcalcul = 2610;
                    IF @testpallet = 3 SET @wcalcul = 26100;
                    
                    -- Process each group
                    DECLARE grouppn_cursor_320 CURSOR LOCAL FAST_FORWARD FOR
                        SELECT Remotekey, posuffix, Rabsnum, Total
                        FROM #groupPonew
                        WHERE Total <> 0;
                    
                    DECLARE @gpn_Remotekey320 NVARCHAR(50),
                            @gpn_posuffix320 NVARCHAR(50),
                            @gpn_Rabsnum320 NVARCHAR(50),
                            @gpn_Total320 DECIMAL(18,2);
                    
                    OPEN grouppn_cursor_320;
                    FETCH NEXT FROM grouppn_cursor_320 INTO @gpn_Remotekey320, @gpn_posuffix320, @gpn_Rabsnum320, @gpn_Total320;
                    
                    WHILE @@FETCH_STATUS = 0
                    BEGIN
                        -- Get item information
                        DECLARE @thegroup_prod_grp NVARCHAR(50),
                                @thegroup_pallet_qty DECIMAL(18,2),
                                @thegroup_box_qty DECIMAL(18,2),
                                @thegroup_case_qty DECIMAL(18,2);
                        
                        SELECT TOP 1 
                            @thegroup_prod_grp = prod_grp,
                            @thegroup_pallet_qty = pallet_qty,
                            @thegroup_box_qty = box_qty,
                            @thegroup_case_qty = case_qty
                        FROM irms_2_5_2.dbo.item
                        WHERE co_num = @conum 
                          AND wh_num = @whnum 
                          AND LTRIM(RTRIM(UPPER(abs_num))) = LTRIM(RTRIM(UPPER(@gpn_Rabsnum320)));
                        
                        -- Try to get rate from GroupItems
                        BEGIN TRY
                            SELECT TOP 1 @df_ForGroup = ForGroup
                            FROM RateDesc
                            WHERE RateDescId = @RateDescId;
                            
                            IF @df_ForGroup = 1 AND @thegroup_prod_grp IS NOT NULL
                            BEGIN
                                SELECT TOP 1 @groupRate = GroupRate
                                FROM GroupItem
                                WHERE Conum = @conum 
                                  AND Whnum = @whnum 
                                  AND RateDescId = @RateDescId 
                                  AND LTRIM(RTRIM(GroupName)) = LTRIM(RTRIM(@thegroup_prod_grp))
                                  AND KindId = @inout;
                                
                                IF @groupRate IS NOT NULL
                                    SET @RateAmount = @groupRate;
                            END
                        END TRY
                        BEGIN CATCH
                            -- Handle exception
                            IF @thegroup_prod_grp IS NOT NULL AND LEN(LTRIM(RTRIM(@thegroup_prod_grp))) > 0
                            BEGIN
                                SET @RateAmount = 0;
                                SET @SettingMin = 0;
                            END
                        END CATCH
                        
                        -- Get picks grouped by bin
                        IF OBJECT_ID('tempdb..#groupPonewbyloca') IS NOT NULL 
                            DROP TABLE #groupPonewbyloca;
                        
                        CREATE TABLE #groupPonewbyloca (
                            binnum NVARCHAR(50),
                            Total DECIMAL(18,2)
                        );
                        
                        -- Insert grouped picks
                        INSERT INTO #groupPonewbyloca (binnum, Total)
                        SELECT 
                            c.bin_num,
                            SUM(c.qty)
                        FROM 
                            irms_2_5_2.dbo.pick c
                        WHERE 
                            c.order_ = @gpn_Remotekey320
                            AND c.order_suffix = @gpn_posuffix320
                            AND c.co_num = @conum
                            AND c.wh_num = @whnum
                            AND LTRIM(RTRIM(UPPER(c.abs_num))) = LTRIM(RTRIM(UPPER(@gpn_Rabsnum320)))
                        GROUP BY 
                            c.bin_num
                        ORDER BY 
                            c.bin_num;
                        
                        -- Process each bin location
                        DECLARE binloc_cursor CURSOR LOCAL FAST_FORWARD FOR
                            SELECT binnum, Total
                            FROM #groupPonewbyloca;
                        
                        DECLARE @wbyloca_binnum NVARCHAR(50),
                                @wbyloca_Total DECIMAL(18,2);
                        
                        OPEN binloc_cursor;
                        FETCH NEXT FROM binloc_cursor INTO @wbyloca_binnum, @wbyloca_Total;
                        
                        WHILE @@FETCH_STATUS = 0
                        BEGIN
                            -- Use simplified calculations for quantities
                            DECLARE @myswitch_Item3 DECIMAL(18,6);
                            SET @myswitch_Item3 = @wbyloca_Total;
                            
                            -- Find corresponding record in mylist
                            DECLARE @mylistgo_exists BIT = 0,
                                    @mylistgo_po_line INT,
                                    @mylistgo_lot NVARCHAR(50),
                                    @mylistgo_row_status NVARCHAR(50),
                                    @mylistgo_act_qty DECIMAL(18,2),
                                    @mylistgo_item_type NVARCHAR(50),
                                    @mylistgo_date_time2 DATETIME,
                                    @mylistgo_emp_num NVARCHAR(50),
                                    @mylistgo_result_msg NVARCHAR(MAX),
                                    @mylistgo_case_qtyitem DECIMAL(18,2),
                                    @mylistgo_box_qtyitem DECIMAL(18,2),
                                    @mylistgo_cc_type NVARCHAR(50);
                            
                            SELECT TOP 1 
                                @mylistgo_exists = 1,
                                @mylistgo_po_line = ISNULL(po_line, 0),
                                @mylistgo_lot = ISNULL(lot, ''),
                                @mylistgo_row_status = ISNULL(row_status, ''),
                                @mylistgo_act_qty = ISNULL(act_qty, 0),
                                @mylistgo_item_type = ISNULL(item_type, ''),
                                @mylistgo_date_time2 = date_time2,
                                @mylistgo_emp_num = ISNULL(emp_num, ''),
                                @mylistgo_result_msg = ISNULL(result_msg, ''),
                                @mylistgo_case_qtyitem = ISNULL(case_qtyitem, 0),
                                @mylistgo_box_qtyitem = ISNULL(box_qtyitem, 0),
                                @mylistgo_cc_type = ISNULL(cc_type, '')
                            FROM #mylist
                            WHERE LTRIM(RTRIM(po_number)) = LTRIM(RTRIM(@gpn_Remotekey320))
                              AND LTRIM(RTRIM(po_suffix)) = LTRIM(RTRIM(@gpn_posuffix320))
                              AND LTRIM(RTRIM(UPPER(abs_num))) = LTRIM(RTRIM(UPPER(@gpn_Rabsnum320)))
                              AND bin_to = @wbyloca_binnum;
                            
                            -- Process if record found
                            IF @mylistgo_exists = 1
                            BEGIN
                                -- Adjust for HR/HHR
                                IF UPPER(@UnitCode) = 'HR' OR UPPER(@UnitCode) = 'HHR'
                                BEGIN
                                    -- Get customer settings
                                    SELECT TOP 1 
                                        @SettingBaseNew1 = SettingBaseNew1,
                                        @SettingBaseNew3 = SettingBaseNew3
                                    FROM SettingCustomer
                                    WHERE SettingBaseConum = @conum 
                                      AND SettingBaseWhnum = @whnum;
                                      
                                    IF @SettingBaseNew1 IS NOT NULL AND @myswitch_Item3 <> 0
                                    BEGIN
                                        IF @SettingBaseNew1 = 1 SET @hincrem = 15;
                                        IF @SettingBaseNew1 = 2 SET @hincrem = 30;
                                        IF @SettingBaseNew1 = 3 SET @hincrem = 1;
                                        SET @hourlymin = @SettingBaseNew3;
                                        
                                        -- Adjust quantity
                                        SET @myswitch_Item3 = dbo.Getquantity('HR', @hincrem, @hourlymin, @myswitch_Item3);
                                    END
                                END
                                
                                -- Calculate guid
                                SET @red_guid = @RateAmount * @myswitch_Item3;
                                
                                -- Apply min constraint
                                IF @SettingMin > @red_guid
                                    SET @red_guid = @SettingMin;
                                
                                -- Apply max constraint
                                IF @red_guid > @SettingMax AND @SettingMax <> 0
                                    SET @red_guid = @SettingMax;
                                
                                -- Insert record
                                INSERT INTO #mylistfinal (
                                    substat_code, wh_num, co_num, abs_num, emp_num, oldunitcost,
                                    transmission, unitcost, action_code, fromdatetime, po_number,
                                    po_suffix, po_line, lot, row_status, sugg_qty,
                                    act_qty, item_type, date_time2, result_msg, case_qtyitem,
                                    box_qtyitem, quantity, extdcost, doc_id, guid, cc_type
                                )
                                VALUES (
                                    @RateDescId, @whnum, @conum, @gpn_Rabsnum320, @mylistgo_emp_num, @SettingMin,
                                    @SettingId, @RateAmount, @UnitCode, @ChargeName, @gpn_Remotekey320,
                                    @gpn_posuffix320, @mylistgo_po_line, @mylistgo_lot, @mylistgo_row_status, @wbyloca_Total,
                                    @mylistgo_act_qty, @mylistgo_item_type, @mylistgo_date_time2, @mylistgo_result_msg, @mylistgo_case_qtyitem,
                                    @mylistgo_box_qtyitem, @myswitch_Item3, @RateAmount * @myswitch_Item3, @NameAbrg, @red_guid, @mylistgo_cc_type
                                );
                            END
                            
                            -- Move to next bin
                            FETCH NEXT FROM binloc_cursor INTO @wbyloca_binnum, @wbyloca_Total;
                        END
                        
                        CLOSE binloc_cursor;
                        DEALLOCATE binloc_cursor;
                        
                        -- Clean up
                        DROP TABLE #groupPonewbyloca;
                        
                        -- Move to next group
                        FETCH NEXT FROM grouppn_cursor_320 INTO @gpn_Remotekey320, @gpn_posuffix320, @gpn_Rabsnum320, @gpn_Total320;
                    END
                    
                    CLOSE grouppn_cursor_320;
                    DEALLOCATE grouppn_cursor_320;
                END

                -- CalculRate = 260
                IF @CalculRate = 260
                BEGIN
                    -- Process each group
                    DECLARE grouppn_cursor_260 CURSOR LOCAL FAST_FORWARD FOR
                        SELECT Remotekey, posuffix, Rabsnum, Total
                        FROM #groupPonew
                        WHERE Total <> 0;
                    
                    DECLARE 
                        @gpn_Remotekey260 NVARCHAR(50),
                        @gpn_posuffix260 NVARCHAR(50),
                        @gpn_Rabsnum260 NVARCHAR(50),
                        @gpn_Total260 DECIMAL(18,2);
                    
                    OPEN grouppn_cursor_260;
                    FETCH NEXT FROM grouppn_cursor_260 INTO @gpn_Remotekey260, @gpn_posuffix260, @gpn_Rabsnum260, @gpn_Total260;
                    
                    WHILE @@FETCH_STATUS = 0
                    BEGIN
                        -- Create temporary table for pick data
                        IF OBJECT_ID('tempdb..#pickTable2') IS NOT NULL 
                            DROP TABLE #pickTable2;
                        
                        CREATE TABLE #pickTable2 (
                            Remotekey NVARCHAR(50),
                            Rabsnum NVARCHAR(50),
                            posuffix NVARCHAR(50),
                            empnum NVARCHAR(50),
                            lot NVARCHAR(50),
                            pallet DECIMAL(18,2),
                            binnum NVARCHAR(50),
                            Total DECIMAL(18,2)
                        );
                        
                        -- Get pick data with item join
                        INSERT INTO #pickTable2 (Remotekey, Rabsnum, posuffix, empnum, lot, pallet, binnum, Total)
                        SELECT 
                            c.order_,
                            c.abs_num,
                            c.order_suffix,
                            k.prod_grp,
                            c.lot,
                            k.pallet_qty,
                            c.bin_num,
                            c.qty
                        FROM 
                            irms_2_5_2.dbo.pick c
                        JOIN 
                            irms_2_5_2.dbo.item k ON c.co_num = k.co_num 
                                                AND c.wh_num = k.wh_num 
                                                AND UPPER(c.abs_num) = UPPER(k.abs_num)
                        WHERE 
                            c.order_ = @gpn_Remotekey260
                            AND c.order_suffix = @gpn_posuffix260
                            AND UPPER(c.abs_num) = UPPER(@gpn_Rabsnum260)
                        ORDER BY 
                            c.order_;
                        
                        -- Group picks by various fields
                        IF OBJECT_ID('tempdb..#totalProdcuts') IS NOT NULL 
                            DROP TABLE #totalProdcuts;
                        
                        CREATE TABLE #totalProdcuts (
                            empnum NVARCHAR(50),
                            lot NVARCHAR(50),
                            pallet DECIMAL(18,2),
                            binnum NVARCHAR(50),
                            posuffix NVARCHAR(50),
                            Rabsnum NVARCHAR(50),
                            Remotekey NVARCHAR(50),
                            Total DECIMAL(18,2)
                        );
                        
                        -- Group pick data
                        INSERT INTO #totalProdcuts (empnum, lot, pallet, binnum, posuffix, Rabsnum, Remotekey, Total)
                        SELECT 
                            empnum,
                            lot,
                            pallet,
                            binnum,
                            posuffix,
                            Rabsnum,
                            Remotekey,
                            SUM(Total)
                        FROM 
                            #pickTable2
                        GROUP BY 
                            empnum, lot, posuffix, Rabsnum, Remotekey, binnum, pallet;
                        
                        -- Process each grouped record
                        DECLARE totalProdcuts_cursor CURSOR LOCAL FAST_FORWARD FOR
                            SELECT empnum, lot, pallet, binnum, posuffix, Rabsnum, Remotekey, Total
                            FROM #totalProdcuts;
                        
                        DECLARE @pictabl_empnum NVARCHAR(50),
                                @pictabl_lot NVARCHAR(50),
                                @pictabl_pallet DECIMAL(18,2),
                                @pictabl_binnum NVARCHAR(50),
                                @pictabl_posuffix NVARCHAR(50),
                                @pictabl_Rabsnum NVARCHAR(50),
                                @pictabl_Remotekey NVARCHAR(50),
                                @pictabl_Total DECIMAL(18,2);
                        
                        OPEN totalProdcuts_cursor;
                        FETCH NEXT FROM totalProdcuts_cursor INTO 
                            @pictabl_empnum, @pictabl_lot, @pictabl_pallet, @pictabl_binnum, 
                            @pictabl_posuffix, @pictabl_Rabsnum, @pictabl_Remotekey, @pictabl_Total;
                        
                        WHILE @@FETCH_STATUS = 0
                        BEGIN
                            -- Get rate for this group
                            SET @wempnum = @pictabl_empnum;
                            
                            -- Try to get ForGroup data
                            BEGIN TRY
                                SELECT TOP 1 @df_ForGroup = ForGroup
                                FROM RateDesc
                                WHERE RateDescId = @RateDescId;
                                
                                IF @df_ForGroup = 1
                                BEGIN
                                    -- Find group rate
                                    SELECT TOP 1 @groupRate = GroupRate
                                    FROM GroupItem
                                    WHERE Conum = @conum 
                                      AND Whnum = @whnum 
                                      AND RateDescId = @RateDescId 
                                      AND LTRIM(RTRIM(GroupName)) = LTRIM(RTRIM(@wempnum))
                                      AND KindId = @inout;
                                    
                                    -- Update rate if found
                                    IF @groupRate IS NOT NULL
                                        SET @RateAmount = @groupRate;
                                END
                            END TRY
                            BEGIN CATCH
                                -- Handle exception
                                IF LTRIM(RTRIM(@wempnum)) <> ''
                                BEGIN
                                    SET @RateAmount = 0;
                                    SET @SettingMin = 0;
                                END
                            END CATCH
                            
                            -- Calculate quantity (integer division)
                            DECLARE @quantity INT = 0;
                            
                            IF @pictabl_pallet <> 0
                                SET @quantity = CAST(@pictabl_Total / @pictabl_pallet AS INT);
                            
                            -- Adjust quantity for HR/HHR
                            IF UPPER(@UnitCode) = 'HR' OR UPPER(@UnitCode) = 'HHR'
                            BEGIN
                                -- Get customer settings
                                SELECT TOP 1 
                                    @SettingBaseNew1 = SettingBaseNew1,
                                    @SettingBaseNew3 = SettingBaseNew3
                                FROM SettingCustomer
                                WHERE SettingBaseConum = @conum 
                                  AND SettingBaseWhnum = @whnum;
                                  
                                IF @SettingBaseNew1 IS NOT NULL
                                BEGIN
                                    IF @SettingBaseNew1 = 1 SET @hincrem = 15;
                                    IF @SettingBaseNew1 = 2 SET @hincrem = 30;
                                    IF @SettingBaseNew1 = 3 SET @hincrem = 1;
                                    SET @hourlymin = @SettingBaseNew3;
                                    
                                    -- Adjust quantity
                                    SET @quantity = dbo.Getquantity('HR', @hincrem, @hourlymin, @quantity);
                                END
                            END
                            
                            -- Calculate guid
                            SET @guid = @RateAmount * @quantity;
                            
                            -- Apply max constraint
                            IF @SettingMax > 0 AND @guid > @SettingMax
                            BEGIN
                                SET @guid = @SettingMax;
                            END
                            
                            -- Apply min constraint
                            IF @SettingMin > 0 AND @guid < @SettingMin AND @guid <> 0
                            BEGIN
                                SET @guid = @SettingMin;
                            END
                            
                            -- Insert the record
                            INSERT INTO #mylistfinal (
                                substat_code, wh_num, co_num, emp_num, oldunitcost, 
                                transmission, unitcost, extdcost, doc_id, lot, 
                                abs_num, action_code, fromdatetime, po_number, po_suffix,
                                quantity, sugg_qty, guid, case_qtyitem, box_qtyitem, cc_type
                            )
                            VALUES (
                                @RateDescId, @whnum, @conum, @wempnum, @SettingMin,
                                @SettingId, @RateAmount, @RateAmount * @quantity, @NameAbrg, @pictabl_lot,
                                @pictabl_Rabsnum, @UnitCode, @ChargeName, @pictabl_Remotekey, @pictabl_posuffix,
                                @quantity, @pictabl_Total, @guid, 0, 0, @UnitCode
                            );
                            
                            -- Move to next record
                            FETCH NEXT FROM totalProdcuts_cursor INTO 
                                @pictabl_empnum, @pictabl_lot, @pictabl_pallet, @pictabl_binnum, 
                                @pictabl_posuffix, @pictabl_Rabsnum, @pictabl_Remotekey, @pictabl_Total;
                        END
                        
                        CLOSE totalProdcuts_cursor;
                        DEALLOCATE totalProdcuts_cursor;
                        
                        -- Clean up temp tables
                        DROP TABLE #pickTable2;
                        DROP TABLE #totalProdcuts;
                        
                        -- Move to next group
                        FETCH NEXT FROM grouppn_cursor_260 INTO @gpn_Remotekey260, @gpn_posuffix260, @gpn_Rabsnum260, @gpn_Total260;
                    END
                    
                    CLOSE grouppn_cursor_260;
                    DEALLOCATE grouppn_cursor_260;
                END

                            END
                        END
                        ELSE -- PalletId != 0 processing (complete implementation from C# code)
                        BEGIN
                            -- Process PalletId != 0 cases - complex pallet-based calculations
                            SET @addwpik = 0;
                            SET @addwpik = @addwpik + 1;
                            
                            DECLARE grouppn_pallet_cursor CURSOR LOCAL FAST_FORWARD FOR
                                SELECT po_number as Remotekey, po_suffix as posuffix, abs_num as Rabsnum, sum(quantity) as Total
                                FROM #mylist
                                WHERE quantity != 0
                                group by po_number,po_suffix,abs_num;
                            
                            DECLARE @grouppn_pallet_Remotekey NVARCHAR(50), @grouppn_pallet_posuffix NVARCHAR(50);
                            DECLARE @grouppn_pallet_Rabsnum NVARCHAR(50), @grouppn_pallet_Total DECIMAL(18,6);
                            
                            OPEN grouppn_pallet_cursor;
                            FETCH NEXT FROM grouppn_pallet_cursor INTO @grouppn_pallet_Remotekey, @grouppn_pallet_posuffix, @grouppn_pallet_Rabsnum, @grouppn_pallet_Total;
                            
                            WHILE @@FETCH_STATUS = 0
                            BEGIN
                                SET @RateAmount = @wammRate;
                                SET @abs_num = '';
                                
                                DECLARE @newquatity DECIMAL(18,6) = @grouppn_pallet_Total;
                                
                                -- Create temporary table for mylistgo
                                IF OBJECT_ID('tempdb..#mylistgo_pallet') IS NOT NULL 
                                BEGIN -- CORRECTION: Added BEGIN for IF block
                                    DROP TABLE #mylistgo_pallet;
                                END -- CORRECTION: Added END for IF block
                                CREATE TABLE #mylistgo_pallet (
                                    po_number NVARCHAR(50),
                                    po_suffix NVARCHAR(50),
                                    abs_num NVARCHAR(50),
                                    po_line INT,
                                    date_time2 DATETIME,
                                    lot NVARCHAR(50),
                                    row_status NVARCHAR(50),
                                    act_qty DECIMAL(18,6),
                                    item_type NVARCHAR(50),
                                    emp_num NVARCHAR(50),
                                    result_msg NVARCHAR(MAX),
                                    case_qtyitem DECIMAL(18,6),
                                    box_qtyitem DECIMAL(18,6),
                                    cc_type NVARCHAR(50),
                                    item_qty DECIMAL(18,6)
                                );
                                
                                -- Populate mylistgo
                                INSERT INTO #mylistgo_pallet
                                SELECT po_number, po_suffix, abs_num, po_line, date_time2, lot, row_status,
                                       act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem,
                                       cc_type, item_qty
                                FROM #mylist
                                WHERE po_number = @grouppn_pallet_Remotekey 
                                  AND po_suffix = @grouppn_pallet_posuffix
                                ORDER BY abs_num;
                                
                                -- Initialize variables
                                DECLARE @zalanew INT = 0;
                                DECLARE @forthesame INT = 0;
                                DECLARE @binnumb INT = 0;
                                DECLARE @wwabsnum NVARCHAR(50) = '';
                                
                                SET @forflat = 0;
                                
                                -- Process each item33 in mylistgo
                                DECLARE mylistgo_pallet_cursor CURSOR LOCAL FAST_FORWARD FOR
                                    SELECT po_number, po_suffix, abs_num, po_line, date_time2, lot, row_status,
                                           act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem,
                                           cc_type, item_qty
                                    FROM #mylistgo_pallet;
                                    
                                DECLARE @item33_p_po_number NVARCHAR(50), @item33_p_po_suffix NVARCHAR(50), @item33_p_abs_num NVARCHAR(50);
                                DECLARE @item33_p_po_line INT, @item33_p_date_time2 DATETIME, @item33_p_lot NVARCHAR(50);
                                DECLARE @item33_p_row_status NVARCHAR(50), @item33_p_act_qty DECIMAL(18,6), @item33_p_item_type NVARCHAR(50);
                                DECLARE @item33_p_emp_num NVARCHAR(50), @item33_p_result_msg NVARCHAR(MAX), @item33_p_case_qtyitem DECIMAL(18,6);
                                DECLARE @item33_p_box_qtyitem DECIMAL(18,6), @item33_p_cc_type NVARCHAR(50), @item33_p_item_qty DECIMAL(18,6);
                                        
                                OPEN mylistgo_pallet_cursor;
                                FETCH NEXT FROM mylistgo_pallet_cursor INTO @item33_p_po_number, @item33_p_po_suffix, @item33_p_abs_num,
                                                                          @item33_p_po_line, @item33_p_date_time2, @item33_p_lot, @item33_p_row_status,
                                                                          @item33_p_act_qty, @item33_p_item_type, @item33_p_emp_num, @item33_p_result_msg,
                                                                          @item33_p_case_qtyitem, @item33_p_box_qtyitem, @item33_p_cc_type, @item33_p_item_qty;
                                
                                WHILE @@FETCH_STATUS = 0
                                BEGIN
                                    -- Get listgroup data
                                    DECLARE @listgroup_Total DECIMAL(18,6);
                                    SELECT @listgroup_Total = Total
                                    FROM #groupPonew
                                    WHERE Remotekey = @grouppn_pallet_Remotekey 
                                      AND posuffix = @grouppn_pallet_posuffix 
                                      AND LTRIM(RTRIM(Rabsnum)) = LTRIM(RTRIM(@item33_p_abs_num));
                                    
                                    -- Check if listgroup.Total != 0
                                    IF @listgroup_Total != 0
                                    BEGIN
                                        SET @forflat = @forflat + 1;
                                        SET @forthesame = @forthesame + 1;
                                        
                                        -- Check PalletId condition
                                        IF @CurrentPalletId = 1
                                        BEGIN -- CORRECTION: Added BEGIN for IF block
                                            SET @zalanew = 0;
                                        END -- CORRECTION: Added END for IF block
                                        
                                        -- Try-catch block
                                        BEGIN TRY
                                            SELECT @df_ForGroup = ForGroup
                                            FROM RateDesc
                                            WHERE RateDescId = @RateDescId;
                                            
                                            IF @df_ForGroup = 1
                                            BEGIN
                                                SELECT @groupRate = GroupRate
                                                FROM GroupItem
                                                WHERE Conum = @conum 
                                                  AND Whnum = @whnum 
                                                  AND RateDescId = @RateDescId
                                                  AND LTRIM(RTRIM(GroupName)) = LTRIM(RTRIM(@item33_p_emp_num))
                                                  AND KindId = @inout;
                                                
                                                SET @RateAmount = @groupRate;
                                                
                                                IF @wwabsnum = @item33_p_abs_num
                                                BEGIN
                                                    SET @abs_num = @item33_p_abs_num;
                                                END
                                                ELSE
                                                BEGIN
                                                    SET @abs_num = '';
                                                END
                                            END
                                        END TRY
                                        BEGIN CATCH
                                            IF LEN(@item33_p_emp_num) != 0
                                            BEGIN
                                                SET @RateAmount = 0;
                                                SET @SettingMin = 0;
                                            END
                                        END CATCH
                                        
                                        -- Check wwabsnum condition
                                        IF @wwabsnum = @item33_p_abs_num
                                        BEGIN
                                            SET @newquatity = 0;
                                            SET @abs_num = @item33_p_abs_num;
                                        END
                                        
                                        -- Check if item1.abs_num != item33.abs_num
                                        IF @abs_num != @item33_p_abs_num
                                        BEGIN
                                            SET @zalanew = @zalanew + 1;
                                            
                                            
                                            -- Check PalletId condition
                                            IF @CurrentPalletId != 0
                                            BEGIN
                                                IF @zalanew = 1
                                                BEGIN
                                                    SET @binnumb = 0;
                                                    
                                                    -- Create temporary table for searchpalletid
                                                    IF OBJECT_ID('tempdb..#searchpalletid') IS NOT NULL 
                                                    BEGIN -- CORRECTION: Added BEGIN for IF block
                                                        DROP TABLE #searchpalletid;
                                                    END -- CORRECTION: Added END for IF block
                                                    CREATE TABLE #searchpalletid (
                                                        pallet_id NVARCHAR(50),
                                                        bin_num NVARCHAR(50)
                                                    );
                                                    
                                                 
                                                    
                                                    -- Get distinct count
                                                    SELECT @newquatity = COUNT(DISTINCT CASE 
                                                        WHEN pallet_id != '' THEN pallet_id 
                                                        WHEN bin_num != '' THEN bin_num 
                                                        ELSE NULL END)
                                                    FROM #searchpalletid;
                                                    
                                                    -- Check binnumb conditions
                                                    IF @binnumb >= 1
                                                    BEGIN -- CORRECTION: Added BEGIN for IF block
                                                        SET @newquatity = 0;
                                                    END -- CORRECTION: Added END for IF block
                                                    IF @binnumb = 0
                                                    BEGIN -- CORRECTION: Added BEGIN for IF block
                                                        SET @binnumb = 1;
                                                    END -- CORRECTION: Added END for IF block
                                                    
                                                    DROP TABLE #searchpalletid;
                                                END
                                                ELSE
                                                BEGIN
                                                    SET @newquatity = 0;
                                                    DECLARE @release_id NVARCHAR(50) = 'N';
                                                END
                                            END
                                            ELSE
                                            BEGIN
                                                -- Call CalculFirst function
                                                DECLARE @wabs NVARCHAR(50) = '999AAA999';
                                                -- Call CalculFirst scalar function (matches C# method call)
                                                SET @newquatity = dbo.CalculFirst(@CalculRate, @mylistinvoice, @grouppn_pallet_Remotekey, @grouppn_pallet_posuffix, @wabs, @newquatity);
                                            END
                                            
                                            -- Create new record
                                            DECLARE @red_p_wh_num NVARCHAR(50) = @whnum;
                                            DECLARE @red_p_co_num NVARCHAR(50) = @conum;
                                            DECLARE @red_p_substat_code INT = @RateDescId;
                                            DECLARE @red_p_oldunitcost DECIMAL(18,6) = @SettingMin;
                                            DECLARE @red_p_unitcost DECIMAL(18,6) = @RateAmount;
                                            DECLARE @red_p_transmission INT = @SettingId;
                                            DECLARE @red_p_action_code NVARCHAR(50) = @UnitCode;
                                            
                                            -- Check CONT condition
                                            IF @item33_p_emp_num IS NOT NULL AND @item33_p_emp_num != ''
                                            BEGIN
                                                IF LTRIM(RTRIM(UPPER(@item33_p_emp_num))) = 'CONT'
                                                BEGIN
                                                    SET @red_p_unitcost = 0;
                                                END
                                            END
                                            
                                            -- Get resullt data
                                            DECLARE @resullt_Total DECIMAL(18,6);
                                            SELECT @resullt_Total = Total
                                            FROM #groupPonew
                                            WHERE Remotekey = @item33_p_po_number 
                                              AND posuffix = @item33_p_po_suffix 
                                              AND Rabsnum = UPPER(@item33_p_abs_num);
                                            
                                            -- Set red properties
                                            DECLARE @red_p_fromdatetime NVARCHAR(50) = @ChargeID;
                                            DECLARE @red_p_po_number NVARCHAR(50) = @item33_p_po_number;
                                            DECLARE @red_p_po_suffix NVARCHAR(50) = @item33_p_po_suffix;
                                            DECLARE @red_p_abs_num NVARCHAR(50) = @item33_p_abs_num;
                                            DECLARE @red_p_po_line INT = @item33_p_po_line;
                                            DECLARE @red_p_date_time2 DATETIME = @item33_p_date_time2;
                                            DECLARE @red_p_lot NVARCHAR(50) = @item33_p_lot;
                                            DECLARE @red_p_row_status NVARCHAR(50) = @item33_p_row_status;
                                            DECLARE @red_p_sugg_qty DECIMAL(18,6) = @resullt_Total;
                                            DECLARE @red_p_act_qty DECIMAL(18,6) = @item33_p_act_qty;
                                            DECLARE @red_p_item_type NVARCHAR(50) = @item33_p_item_type;
                                            DECLARE @red_p_emp_num NVARCHAR(50) = @item33_p_emp_num;
                                            DECLARE @red_p_result_msg NVARCHAR(MAX) = @item33_p_result_msg;
                                            DECLARE @red_p_case_qtyitem DECIMAL(18,6) = @item33_p_case_qtyitem;
                                            DECLARE @red_p_box_qtyitem DECIMAL(18,6) = @item33_p_box_qtyitem;
                                            DECLARE @red_p_cc_type NVARCHAR(50) = @item33_p_cc_type;
                                            DECLARE @red_p_quantity DECIMAL(18,6) = @newquatity;
                                            
                                            SET @itemqty = @item33_p_item_qty;
                                            
                                            -- Check PalletId condition
                                            IF @CurrentPalletId = 0
                                            BEGIN
                                                -- Calculate using CalculSecond
                                                DECLARE @calc_p DECIMAL(18,6);
                                                SELECT @calc_p = @newquantity
                                                FROM dbo.CalculSecond(@CalculRate, @CurrentPalletId, @newquatity, @itemqty);
                                                
                                                -- Calculate using CalculRate
                                                DECLARE @myres_p_Item1 DECIMAL(18,6), @myres_p_Item2 DECIMAL(18,6);
                                                SELECT @myres_p_Item1 = @newquantity, @myres_p_Item2 = @calc_p
                                                FROM dbo.CalculRate(@CalculRate, @calc_p, @newquatity, @red_p_sugg_qty);
                                                
                                                                                                SET @calc_p = @myres_p_Item1;
                                                SET @newquatity = @myres_p_Item2;
                                                
                                                -- Calculate using CalculRateFore
                                                DECLARE @myswitch_p_Item1 DECIMAL(18,6), @myswitch_p_Item2 DECIMAL(18,6), @myswitch_p_Item3 DECIMAL(18,6);
                                                SELECT @myswitch_p_Item1 = @red_extdcost, @myswitch_p_Item2 = @RateAmount, @myswitch_p_Item3 = @newquantity
                                                FROM dbo.CalculRateFore(@CalculRate, @forthesame, @calc_p, @red_extdcost, 
                                                                       @RateAmount, @red_p_quantity, @newquatity, @item33_p_item_qty, @red_p_act_qty, @red_p_case_qtyitem);
                                                
                                                SET @red_extdcost = @myswitch_p_Item1;
                                                SET @newquatity = @myswitch_p_Item3;
                                                SET @red_p_quantity = @myswitch_p_Item2;
                                            END
                                            
                                            -- Check CalculRate == 44 condition
                                            IF @CalculRate = 44
                                            BEGIN
                                                IF @forflat = 1
                                                BEGIN
                                                    SET @red_p_quantity = 1;
                                                    SET @newquatity = 1;
                                                    SET @guid = @RateAmount;
                                                END
                                                ELSE
                                                BEGIN
                                                    SET @red_p_quantity = 0;
                                                    SET @red_p_oldunitcost = 0;
                                                    SET @red_extdcost = 0;
                                                    SET @guid = 0;
                                                    SET @newquatity = 0;
                                                END
                                            END
                                            
                                            -- Set doc_id
                                            DECLARE @red_p_doc_id NVARCHAR(50) = @NameAbrg;
                            
                                            -- Check cost condition
                                            IF @red_p_oldunitcost > @extdcost
                                            BEGIN
                                                SET @guid = @SettingMin;
                                            END
                                            ELSE
                                            BEGIN
                                                IF LTRIM(RTRIM(UPPER(@item33_p_emp_num))) = 'CONT'
                                                BEGIN
                                                    SET @guid = 0;
                                                    SET @red_p_quantity = 0;
                                                END
                                                ELSE
                                                BEGIN
                                                    SET @guid = @RateAmount * @newquatity;
                                                END
                                            END
                                            
                                            -- Apply max constraint
                                            IF @guid > @SettingMax AND @SettingMax != 0
                                            BEGIN
                                                SET @guid = @SettingMax;
                                            END
                                            
                                            -- Insert into mylistfinal
                                            INSERT INTO #mylistfinal (
                                                wh_num, co_num, substat_code, oldunitcost, unitcost, transmission,
                                                action_code, fromdatetime, po_number, po_suffix, abs_num, po_line,
                                                date_time2, lot, row_status, sugg_qty, act_qty, item_type, emp_num,
                                                result_msg, case_qtyitem, box_qtyitem, cc_type, quantity, extdcost,
                                                doc_id, guid, release_id
                                            )
                                            VALUES (
                                                @red_p_wh_num, @red_p_co_num, @red_p_substat_code, @red_p_oldunitcost, @red_p_unitcost, @red_p_transmission,
                                                @red_p_action_code, @red_p_fromdatetime, @red_p_po_number, @red_p_po_suffix, @red_p_abs_num, @red_p_po_line,
                                                @red_p_date_time2, @red_p_lot, @red_p_row_status, @red_p_sugg_qty, @red_p_act_qty, @red_p_item_type, @red_p_emp_num,
                                                @red_p_result_msg, @red_p_case_qtyitem, @red_p_box_qtyitem, @red_p_cc_type, @red_p_quantity, @extdcost,
                                                @red_p_doc_id, @guid, @release_id
                                            );
                                        END
                                        
                                        IF @wwabsnum != @item33_p_abs_num
                                        BEGIN
                                            SET @wwabsnum = @item33_p_abs_num;
                                        END
                                    END
                                    
                                    FETCH NEXT FROM mylistgo_pallet_cursor INTO @item33_p_po_number, @item33_p_po_suffix, @item33_p_abs_num,
                                                                              @item33_p_po_line, @item33_p_date_time2, @item33_p_lot, @item33_p_row_status,
                                                                              @item33_p_act_qty, @item33_p_item_type, @item33_p_emp_num, @item33_p_result_msg,
                                                                              @item33_p_case_qtyitem, @item33_p_box_qtyitem, @item33_p_cc_type, @item33_p_item_qty;
                                END
                                
                                CLOSE mylistgo_pallet_cursor;
                                DEALLOCATE mylistgo_pallet_cursor;
                                
                                DROP TABLE #mylistgo_pallet;
                                
                                FETCH NEXT FROM grouppn_pallet_cursor INTO @grouppn_pallet_Remotekey, @grouppn_pallet_posuffix, @grouppn_pallet_Rabsnum, @grouppn_pallet_Total;
                            END
                            
                            CLOSE grouppn_pallet_cursor;
                            DEALLOCATE grouppn_pallet_cursor;
                        END
                    END 
                    ELSE -- CalculRate == 9 processing
                    BEGIN
                        IF @inout = 2
                        BEGIN
                            DECLARE grouppn_cursor_9 CURSOR LOCAL FAST_FORWARD FOR
                                SELECT Remotekey, posuffix FROM #groupPonew2;
                            
                            DECLARE @grp_Remotekey9 NVARCHAR(50), @grp_posuffix9 NVARCHAR(50);
                            
                            OPEN grouppn_cursor_9;
                            FETCH NEXT FROM grouppn_cursor_9 INTO @grp_Remotekey9, @grp_posuffix9;
                            
                            WHILE @@FETCH_STATUS = 0
                            BEGIN
                                SET @RateAmount = @wammRate;
                                
                                SELECT @calresult_count = COUNT(DISTINCT lot)
                                FROM irms_2_5_2.dbo.pick c
                                WHERE c.order_ = @grp_Remotekey9 AND c.order_suffix = @grp_posuffix9 
                                  AND c.co_num = @conum AND c.wh_num = @whnum
                                  AND c.lot IS NOT NULL AND c.lot != '';
                                
                                DECLARE @calresultt INT = @calresult_count;
                                
                                IF @calresultt != 0 AND UPPER(@UnitCode) IN ('HR', 'HHR') AND @foundsettingcustomer_exists = 1
                                BEGIN
                                    SET @hincrem = CASE @SettingBaseNew1 WHEN 1 THEN 15 WHEN 2 THEN 30 WHEN 3 THEN 1 ELSE 15 END;
                                    SET @hourlymin = @SettingBaseNew3;
                                    SET @calresultt = CAST(dbo.Getquantity('HR', @hincrem, @hourlymin, @calresultt) AS INT);
                                END
                                
                                SET @extdcost = @RateAmount * @calresultt;
                                SET @guid = CASE WHEN @SettingMin > @extdcost THEN @SettingMin ELSE @RateAmount * @calresultt END;
                                
                                IF @guid > @SettingMax AND @SettingMax != 0
                                BEGIN
                                    SET @guid = @SettingMax;
                                END
                                
                                INSERT INTO #mylistfinal (substat_code, wh_num, co_num, oldunitcost, transmission, unitcost, action_code, fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty, act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, cc_type, extdcost, doc_id, guid)
                                VALUES (@RateDescId, @whnum, @conum, @SettingMin, @SettingId, @RateAmount, @UnitCode, @ChargeID, @grp_Remotekey9, @grp_posuffix9, '', 0, '', '', @calresult_count, 0, '', '0', @grp_Remotekey9 + ' ' + @grp_posuffix9, 0, 0, @UnitCode, @extdcost, @NameAbrg, @guid);
                                
                                FETCH NEXT FROM grouppn_cursor_9 INTO @grp_Remotekey9, @grp_posuffix9;
                            END
                            
                            CLOSE grouppn_cursor_9;
                            DEALLOCATE grouppn_cursor_9;
                        END
                    END
                END
                ELSE -- CalculRate == 31 processing (nested)
                BEGIN
                    INSERT INTO #mylistfinal (substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code, fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty, act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, extdcost, doc_id, guid, cc_type)
                    SELECT @RateDescId, @whnum, @conum, @SettingMin, @RateAmount, @SettingId, @UnitCode, @ChargeID, '', '', '', 0, '', '', 0, 0, '', '0', 'CalculRate 31 Nested', 0, 0, 0, @NameAbrg, 0, @UnitCode;
                END
            END
        END
        ELSE -- foundRatecal.CalculRate == 31 processing (main)
        BEGIN
            INSERT INTO #mylistfinal (substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code, fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty, act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, extdcost, doc_id, guid, cc_type)
            SELECT @RateDescId, @whnum, @conum, @SettingMin, @RateAmount, @SettingId, @UnitCode, @ChargeID, '', '', '', 0, '', '', 0, 0, '', '0', 'CalculRate 31 Main', 0, 0, 0, @NameAbrg, 0, @UnitCode;
        END
    END
    
    FETCH NEXT FROM wsetting_cursor INTO @SettingId, @RatebyId, @RateDescId, @RateAmount, @abs_num, 
                                         @SettingMin, @SettingMax, @ChargeID, @UnitCode;
END

CLOSE wsetting_cursor;
DEALLOCATE wsetting_cursor;



-------------------------------------------------------------wsetting ends------------------------------------------------------------------------

    -- Create temporary table for grouped results
    CREATE TABLE #ress1 (
        po_number NVARCHAR(50),
        po_suffix NVARCHAR(50),
        fromdatetime NVARCHAR(150)
    );

    -- Group by po_number, po_suffix, fromdatetime
    INSERT INTO #ress1 (po_number, po_suffix, fromdatetime)
    SELECT po_number, po_suffix, fromdatetime
    FROM #mylistfinal5
    GROUP BY po_number, po_suffix, fromdatetime;





    -- Process each group
    DECLARE group_cursor CURSOR LOCAL FAST_FORWARD FOR 
        SELECT po_number, po_suffix, fromdatetime FROM #ress1;

    OPEN group_cursor;
    FETCH NEXT FROM group_cursor INTO @po_number, @po_suffix, @fromdatetime;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Reset counters for each group
        SET @newcall = 0;
        SET @gencall = 0;
        
        -- Calculate sum of quantity * extdcost and get oldunitcost
        SELECT 
            @gencall = MAX(oldunitcost), -- Assuming all oldunitcost values are the same in the group
            @newcall = SUM(ISNULL(quantity, 0) * ISNULL(extdcost, 0))
        FROM #mylistfinal5
        WHERE po_number = @po_number 
          AND po_suffix = @po_suffix 
          AND fromdatetime = @fromdatetime;
        
        -- Check if we have records in this group
        IF EXISTS (
            SELECT 1 
            FROM #mylistfinal5
            WHERE po_number = @po_number 
              AND po_suffix = @po_suffix 
              AND fromdatetime = @fromdatetime
        )
        BEGIN
            -- Get the first record to use as a template
            DECLARE @template_record TABLE (
                trans_num INT,
                transmission INT,
                ifaces_file NVARCHAR(255),
                ifaces_time NVARCHAR(50),
                co_num NVARCHAR(50),
                wh_num NVARCHAR(50),
                task_id INT,
                pallet_id NVARCHAR(50),
                pallet_id_from NVARCHAR(50),
                carton_id NVARCHAR(50),
                date_time NVARCHAR(50),
                trans_sec_time INT,
                trans_type NVARCHAR(50),
                emp_num NVARCHAR(50),
                abs_num NVARCHAR(50),
                ns_comment NVARCHAR(MAX),
                exp_abs NVARCHAR(50),
                serial_num NVARCHAR(50),
                item_num NVARCHAR(50),
                box_qtyitem DECIMAL(18,6),
                case_qtyitem DECIMAL(18,6),
                item_qty DECIMAL(18,6),
                act_qty DECIMAL(18,6),
                sugg_qty DECIMAL(18,6),
                bin_num NVARCHAR(50),
                bin_from NVARCHAR(50),
                bin_to NVARCHAR(50),
                cc_type NVARCHAR(50),
                cc_string NVARCHAR(255),
                shf_num INT,
                adj_code NVARCHAR(50),
                item_type NVARCHAR(50),
                uom NVARCHAR(50),
                case_qty INT,
                quantity DECIMAL(18,6),
                stock_stat NVARCHAR(50),
                old_stock_stat NVARCHAR(50),
                lot NVARCHAR(50),
                pool NVARCHAR(50),
                dept_num INT,
                mach_type NVARCHAR(50),
                rt_num NVARCHAR(50),
                po_number NVARCHAR(50),
                po_suffix NVARCHAR(50),
                po_line INT,
                line_sequence INT,
                packer NVARCHAR(50),
                action_code NVARCHAR(50),
                result_code NVARCHAR(50),
                result_msg NVARCHAR(MAX),
                trans_link INT,
                record_type NVARCHAR(50),
                comments NVARCHAR(MAX),
                proc_created NVARCHAR(50),
                truck_id NVARCHAR(50),
                batch INT,
                cargo_control NVARCHAR(50),
                qa_release_id INT,
                release_id NVARCHAR(50),
                voidx TINYINT,
                cancelled TINYINT,
                cancelled_by NVARCHAR(50),
                cancelled_at NVARCHAR(50),
                doc_id NVARCHAR(50),
                row_status NVARCHAR(50),
                substat_code INT,
                unitcost DECIMAL(18,6),
                extdcost DECIMAL(18,6),
                oldunitcost DECIMAL(18,6),
                oldextdcost DECIMAL(18,6),
                msg_status NVARCHAR(50),
                guid DECIMAL(18,6),
                fromdatetime NVARCHAR(150),
                todatetime NVARCHAR(50),
                elapsedtime INT,
                country_code NVARCHAR(50),
                PROGRESS_RECID INT,
                PROGRESS_RECID_IDENT_ INT,
                date_time2 DATETIME,
                DateShip DATETIME
            );
            
            -- Get the first record from the group
            INSERT INTO @template_record
            SELECT TOP 1 *
            FROM #mylistfinal5
            WHERE po_number = @po_number 
              AND po_suffix = @po_suffix 
              AND fromdatetime = @fromdatetime;
            
            -- Insert into mylistfinal with our modifications
            INSERT INTO #mylistfinal
            SELECT 
                trans_num,
                transmission,
                ifaces_file,
                ifaces_time,
                co_num,
                wh_num,
                task_id,
                pallet_id,
                pallet_id_from,
                carton_id,
                date_time,
                trans_sec_time,
                trans_type,
                emp_num,
                '', -- abs_num (set to empty string)
                ns_comment,
                exp_abs,
                serial_num,
                item_num,
                box_qtyitem,
                case_qtyitem,
                item_qty,
                act_qty,
                sugg_qty,
                bin_num,
                bin_from,
                bin_to,
                cc_type,
                cc_string,
                shf_num,
                adj_code,
                item_type,
                uom,
                case_qty,
                1, -- quantity (set to 1)
                stock_stat,
                old_stock_stat,
                lot,
                pool,
                dept_num,
                mach_type,
                rt_num,
                po_number,
                po_suffix,
                po_line,
                line_sequence,
                packer,
                action_code,
                result_code,
                result_msg,
                trans_link,
                record_type,
                comments,
                proc_created,
                truck_id,
                batch,
                cargo_control,
                qa_release_id,
                release_id,
                voidx,
                cancelled,
                cancelled_by,
                cancelled_at,
                doc_id,
                row_status,
                substat_code,
                unitcost,
                extdcost,
                oldunitcost,
                oldextdcost,
                msg_status,
                CASE WHEN @newcall < @gencall THEN @gencall ELSE guid END, -- Adjusted guid
                fromdatetime,
                todatetime,
                elapsedtime,
                country_code,
                PROGRESS_RECID,
                PROGRESS_RECID_IDENT_,
                date_time2,
                DateShip
            FROM @template_record;
        END
        
        FETCH NEXT FROM group_cursor INTO @po_number, @po_suffix, @fromdatetime;
    END

    CLOSE group_cursor;
    DEALLOCATE group_cursor;


    -- Update mylist if mylistfinal has records
    IF EXISTS (SELECT 1 FROM #mylistfinal)
    BEGIN
        TRUNCATE TABLE #mylist;
        
        INSERT INTO #mylist
        SELECT * FROM #mylistfinal;
    END


SET NOCOUNT ON;

---------------------------------------------------------------------------
-- 0.  House-keeping variables
---------------------------------------------------------------------------
SET @forflatout = 0;
 



-- Get customer settings 
SELECT TOP 1 
    @SettingBaseNew1 = cs.SettingBaseNew1, 
    @SettingBaseNew3 = cs.SettingBaseNew3
FROM SettingCustomer cs
WHERE cs.SettingBaseConum = @conum 
  AND cs.SettingBaseWhnum = @whnum;

---------------------------------------------------------------------------
-- 1.  Main cursor over #rt
---------------------------------------------------------------------------
DECLARE @rt_ratebyid INT;
DECLARE main_rt_cursor CURSOR LOCAL FAST_FORWARD FOR
SELECT SettingId, RateDescId, RateAmount, SettingMin, SettingMax, UnitCode, 
       ChargeID, co_num, wh_num, abs_num, RatebyId, 
       CalculRate, TypeCalculate, RateDescName, NameAbrg, RateDescCountPo
FROM   #rt;

OPEN main_rt_cursor;
FETCH NEXT FROM main_rt_cursor INTO
    @rt_SettingId, @rt_RateDescId, @rt_RateAmount, @rt_SettingMin, @rt_SettingMax,
    @rt_UnitCode, @rt_ChargeID, @rt_Co_num, @rt_Wh_num, @rt_abs_num,
    @rt_RatebyId, @rt_CalculRate, @rt_TypeCalculate, @rt_RateDescName,
    @rt_NameAbrg, @rt_RateDescCountPo;

WHILE @@FETCH_STATUS = 0
BEGIN
    /* ---------------------------------------------------------------
       >>>  CHANGED  <<<                                               
       Skip every record whose CalculRate = 31                         
       (the C# never processes those rows)                             
       ---------------------------------------------------------------*/
    IF @rt_CalculRate = 31
    BEGIN
        FETCH NEXT FROM main_rt_cursor INTO
            @rt_SettingId, @rt_RateDescId, @rt_RateAmount, @rt_SettingMin,
            @rt_SettingMax, @rt_UnitCode, @rt_ChargeID, @rt_Co_num,
            @rt_Wh_num, @rt_abs_num, @rt_RatebyId, @rt_CalculRate,
            @rt_TypeCalculate, @rt_RateDescName, @rt_NameAbrg,
            @rt_RateDescCountPo;
        CONTINUE;                           -- jump to next #rt record
    END
    /* ---------------------------------------------------------------*/

    ------------------------------------------------------------------
    -- 1.1  Base rate amount for the current item
    ------------------------------------------------------------------
    SELECT TOP (1) @wamount = sr.RateAmount 
    FROM          SettingRate sr 
    WHERE         sr.SettingId = @rt_SettingId;

    IF @wamount IS NULL SET @wamount = 0;

    ------------------------------------------------------------------
    -- 1.2  Variable initialisations used in several branches
    ------------------------------------------------------------------
    DECLARE @current_item_so_RateAmount DECIMAL(18,4) = @wamount;
          --@red_fromdatetime       NVARCHAR(10);

    SELECT TOP (1) @foundnameabrg = rd.NameAbrg
    FROM   RateDesc rd 
    WHERE  rd.RateDescId = @rt_RateDescId;

    -- Reset forflatout for each main item
    SET @forflatout = 0;

    /* ###############################################################
       # 2.  All business rules                                      #
       ############################################################### */

    /*-----------------------------------------------------------------
      2.1  CalculRate = 310 (Hazardous items) for outbound (inout = 2)
      -----------------------------------------------------------------*/
    IF @rt_CalculRate = 310 AND @inout = 2
    BEGIN
        -- Check for hazardous items
        IF OBJECT_ID('tempdb..#result10checkinv') IS NOT NULL 
            DROP TABLE #result10checkinv;
            
        SELECT inv.abs_num, SUM(inv.total_qty) AS total_qty_sum 
        INTO #result10checkinv
        FROM irms_2_5_2.dbo.inventory inv 
        JOIN irms_2_5_2.dbo.item itm 
            ON inv.co_num = itm.co_num 
            AND inv.wh_num = itm.wh_num 
            AND inv.abs_num = itm.abs_num
        WHERE inv.co_num = @conum 
          AND inv.wh_num = @whnum 
          AND itm.hazardous = 'T' 
        GROUP BY inv.abs_num;

        IF EXISTS (SELECT 1 FROM #result10checkinv)
        BEGIN
            DECLARE @hazardous_count INT; 
            SELECT @hazardous_count = COUNT(*) FROM #result10checkinv;

            SET @red_oldunitcost = @rt_SettingMin;
            SET @red_unitcost = @current_item_so_RateAmount;
            SET @red_quantity = @hazardous_count;
            
            SET @red_substat_code = @rt_RateDescId;
            SET @red_wh_num = @whnum;
            SET @red_co_num = @conum;
            SET @red_action_code = @rt_UnitCode;
            SET @red_transmission = @rt_SettingId;
            SET @red_fromdatetime = @rt_ChargeID;
            SET @red_po_number = '';
            SET @red_po_suffix = '';
            SET @red_sugg_qty = 0;
            SET @red_case_qtyitem = 0;
            SET @red_box_qtyitem = 0;
            SET @red_result_msg = '';
            SET @red_emp_num = '';
            SET @red_abs_num = NULL;
            SET @red_doc_id = NULL;

            -- Adjust HR/HHR quantities
            IF UPPER(@rt_UnitCode) = 'HR' OR UPPER(@rt_UnitCode) = 'HHR'
            BEGIN
                SET @hincrem = CASE @SettingBaseNew1 
                                 WHEN 1 THEN 15 
                                 WHEN 2 THEN 30 
                                 WHEN 3 THEN 1 
                                 ELSE 15 
                               END;
                SET @hourlymin = ISNULL(@SettingBaseNew3, 0);
                SET @red_quantity = dbo.Getquantity('HR', @hincrem, @hourlymin, @red_quantity);
            END

            SET @red_extdcost = @red_unitcost * @red_quantity;
            SET @red_guid = @red_extdcost;

            -- Apply min/max constraints
            IF @rt_SettingMin > 0 AND @red_guid < @rt_SettingMin AND @red_quantity <> 0 
                SET @red_guid = @rt_SettingMin;
                
            IF @rt_SettingMax > 0 AND @red_guid > @rt_SettingMax AND @red_quantity <> 0 
                SET @red_guid = @rt_SettingMax;
                
            IF @red_oldunitcost > @red_extdcost 
                SET @red_guid = @rt_SettingMin;

            IF @red_guid > @rt_SettingMax AND @rt_SettingMax <> 0 
                SET @red_guid = @rt_SettingMax;

            -- Insert record
            INSERT INTO #mylistfinal (
                substat_code, wh_num, co_num, quantity, action_code, transmission,
                oldunitcost, unitcost, fromdatetime, po_number, po_suffix, extdcost, 
                sugg_qty, guid, case_qtyitem, box_qtyitem, result_msg, emp_num, doc_id
            )
            VALUES (
                @red_substat_code, @red_wh_num, @red_co_num, @red_quantity, @red_action_code, @red_transmission,
                @red_oldunitcost, @red_unitcost, @red_fromdatetime, @red_po_number, @red_po_suffix, @red_extdcost, 
                @red_sugg_qty, @red_guid, @red_case_qtyitem, @red_box_qtyitem, @red_result_msg, @red_emp_num, @red_doc_id
            );
        END
        
        DROP TABLE IF EXISTS #result10checkinv;
    END

    /*-----------------------------------------------------------------
      2.2  CalculRate = 200
      -----------------------------------------------------------------*/
    ELSE IF @rt_CalculRate = 200
    BEGIN
        -- Process each PO
        --DECLARE @group_Remotekey VARCHAR(50), @group_posuffix VARCHAR(10);
        DECLARE group_cursor_200 CURSOR LOCAL FAST_FORWARD FOR 
            SELECT Remotekey, posuffix FROM #groupPonew88;
            
        OPEN group_cursor_200; 
        FETCH NEXT FROM group_cursor_200 INTO @group_Remotekey, @group_posuffix;
        
        WHILE @@FETCH_STATUS = 0 
        BEGIN
            SET @red_oldunitcost = @rt_SettingMin;
            SET @red_unitcost = @current_item_so_RateAmount;
            SET @red_quantity = 1;
            
            SET @red_substat_code = @rt_RateDescId;
            SET @red_wh_num = @whnum;
            SET @red_co_num = @conum;
            SET @red_transmission = @rt_SettingId;
            SET @red_action_code = @rt_UnitCode;
            SET @red_fromdatetime = @rt_ChargeID;
            SET @red_po_number = @group_Remotekey;
            SET @red_po_suffix = @group_posuffix;
            SET @red_abs_num = '';
            SET @red_po_line = 0;
            SET @red_lot = '';
            SET @red_row_status = '';
            SET @red_sugg_qty = 1;
            SET @red_act_qty = 0;
            SET @red_item_type = '';
            SET @red_emp_num = '0';
            SET @red_result_msg = '';
            SET @red_case_qtyitem = 0;
            SET @red_box_qtyitem = 0;
            SET @red_doc_id = @foundnameabrg;
            SET @red_cc_type = @rt_UnitCode;

            SET @red_extdcost = @red_unitcost * 1;
            SET @red_guid = @red_extdcost;

            -- Apply min/max constraints
            IF @rt_SettingMin > @red_guid 
                SET @red_guid = @rt_SettingMin;
                
            IF @red_guid > @rt_SettingMax AND @rt_SettingMax <> 0 
                SET @red_guid = @rt_SettingMax;

            -- Check for parcel carrier
            IF @rt_TypeCalculate IN (8, 9, 10)
            BEGIN
                DECLARE @parcelusps VARCHAR(10) = CASE UPPER(@rt_RateDescName) 
                                                     WHEN 'PARCEL UPS' THEN 'UPS' 
                                                     WHEN 'PARCEL FEDEX' THEN 'FEPL' 
                                                     WHEN 'PARCEL USPS' THEN 'USPS' 
                                                     ELSE '' 
                                                  END;
                                                  
                IF NOT EXISTS (
                    SELECT 1 
                    FROM irms_2_5_2.dbo.ordhdr 
                    WHERE order_ = @group_Remotekey 
                      AND order_suffix = @group_posuffix 
                      AND co_num = @conum 
                      AND wh_num = @whnum 
                      AND carrier = @parcelusps
                )
                BEGIN
                    SET @red_guid = 0;
                    SET @red_extdcost = 0;
                    SET @red_quantity = 0;
                END
            END

            -- Insert record
            INSERT INTO #mylistfinal (
                substat_code, wh_num, co_num, oldunitcost, transmission, action_code,
                unitcost, quantity, fromdatetime, po_number, po_suffix, abs_num,
                po_line, lot, row_status, sugg_qty, act_qty, item_type,
                emp_num, result_msg, case_qtyitem, box_qtyitem, extdcost,
                doc_id, guid, cc_type
            )
            VALUES (
                @red_substat_code, @red_wh_num, @red_co_num, @red_oldunitcost, @red_transmission, @red_action_code,
                @red_unitcost, @red_quantity, @red_fromdatetime, @red_po_number, @red_po_suffix, @red_abs_num,
                @red_po_line, @red_lot, @red_row_status, @red_sugg_qty, @red_act_qty, @red_item_type,
                @red_emp_num, @red_result_msg, @red_case_qtyitem, @red_box_qtyitem, @red_extdcost,
                @red_doc_id, @red_guid, @red_cc_type
            );
            
            FETCH NEXT FROM group_cursor_200 INTO @group_Remotekey, @group_posuffix;
        END
        
        CLOSE group_cursor_200; 
        DEALLOCATE group_cursor_200;
    END

    /*-----------------------------------------------------------------
      2.3  Handle other CalculRates
      -----------------------------------------------------------------*/
    ELSE
    BEGIN
        -- Handle RateDescCountPo = 1
        IF @rt_RateDescCountPo = 1
        BEGIN
            SET @amountofcal = 0;
            DECLARE @fgh_RateDescCountPo1 INT = 0;
            DECLARE @loop_forflatout_RateDescCountPo1 INT = 0;
            
            -- Process each PO
            DECLARE group_cursor_RateDescCountPo1 CURSOR LOCAL FAST_FORWARD FOR 
                SELECT Remotekey, posuffix FROM #groupPonew2;
                
            OPEN group_cursor_RateDescCountPo1; 
            FETCH NEXT FROM group_cursor_RateDescCountPo1 INTO @group_Remotekey, @group_posuffix;
            
            WHILE @@FETCH_STATUS = 0
            BEGIN
                SET @current_item_so_RateAmount = @wamount;
              SET @wfreight  = 0;
                DECLARE @vb_RateDescCountPo1 VARCHAR(100) = UPPER(RTRIM(@group_Remotekey));
                
                IF OBJECT_ID('tempdb..#myquery_RateDescCountPo1') IS NOT NULL 
                    DROP TABLE #myquery_RateDescCountPo1;
                    
                SELECT UserNumber1, VoidFlag, Shipper 
                INTO #myquery_RateDescCountPo1 
                FROM cstm.dbo.history ui 
                WHERE ui.UserText2 = @conum 
                  AND ui.UserText3 = @whnum 
                  AND UPPER(RTRIM(ui.InvoiceNumber)) = @vb_RateDescCountPo1;
                  
                SELECT @wfreight = ISNULL(SUM(CASE WHEN VoidFlag = 'N' THEN UserNumber1 ELSE 0 END), 0) 
                FROM #myquery_RateDescCountPo1;
                
                SET @loop_forflatout_RateDescCountPo1 = @loop_forflatout_RateDescCountPo1 + 1;
                SET @forflatout = @loop_forflatout_RateDescCountPo1;

                SET @red_oldunitcost = @rt_SettingMin;
                SET @red_quantity = 0;
                SET @red_doc_id = CASE WHEN @inout = 3 THEN 'S' ELSE NULL END;
                SET @red_substat_code = @rt_RateDescId;
                SET @red_wh_num = @whnum;
                SET @red_co_num = @conum;
                SET @red_action_code = @rt_UnitCode;
                SET @red_transmission = @rt_SettingId;
                SET @red_fromdatetime = @rt_ChargeID;
                SET @red_po_number = @group_Remotekey;
                SET @red_po_suffix = @group_posuffix;
                
                -- Set quantity based on CalculRate
                IF @rt_CalculRate = 8 AND @inout = 2
                BEGIN
                    SELECT @red_quantity = COUNT(c.id) 
                    FROM irms_2_5_2.dbo.orddtl c 
                    INNER JOIN irms_2_5_2.dbo.ordhdr k ON c.id = k.id 
                    WHERE k.order_ = @red_po_number 
                      AND k.order_suffix = @red_po_suffix 
                      AND k.co_num = @conum;
                END
                ELSE IF @rt_CalculRate = 44
                BEGIN
                    SET @red_po_number = '';
                    SET @red_po_suffix = '';
                    IF @forflatout = 1 
                        SET @red_quantity = 1;
					ELSE SET @red_quantity = 0;
                END
                ELSE IF @rt_CalculRate = 251 AND @inout = 2
                BEGIN
                    DECLARE @calresult_carrier_251 VARCHAR(50);
                    SELECT TOP 1 @calresult_carrier_251 = k.carrier 
                    FROM irms_2_5_2.dbo.ordhdr k 
                    WHERE k.order_ = @red_po_number 
                      AND k.order_suffix = @red_po_suffix 
                      AND k.co_num = @conum 
                      AND k.wh_num = @whnum;
                      
                    IF UPPER(ISNULL(@calresult_carrier_251,'')) = 'USPS'
                    BEGIN
                        SET @red_quantity = @wfreight;
                        SET @current_item_so_RateAmount = @current_item_so_RateAmount + 1;
                        SET @fgh_RateDescCountPo1 = 1;
                        
                        IF NOT EXISTS (SELECT 1 FROM #myquery_RateDescCountPo1) 
                           OR EXISTS (SELECT 1 FROM #myquery_RateDescCountPo1 WHERE UPPER(Shipper) <> 'AC01')
                        BEGIN
                            SET @red_quantity = 0;
                            SET @current_item_so_RateAmount = @current_item_so_RateAmount - 1;
                            SET @fgh_RateDescCountPo1 = 0;
                        END
                    END
                    ELSE
                        SET @red_quantity = 0;
                END
                ELSE IF @rt_CalculRate = 30
                    SET @red_quantity = 0;

                -- Rate adjustment for CalculRate 251
                IF @rt_CalculRate = 251 AND @inout = 2
                BEGIN
                    SET @current_item_so_RateAmount = 1;
                    
                    IF EXISTS (SELECT 1 FROM #myquery_RateDescCountPo1 WHERE UPPER(Shipper) <> 'AC01')
                        SET @red_quantity = 0;
                END

                SET @red_unitcost = @current_item_so_RateAmount;
                SET @red_extdcost = @red_unitcost * @red_quantity;
                SET @red_guid = @red_extdcost;
                SET @red_sugg_qty = 0;
                
                -- Apply min/max constraints for non-251
                IF @rt_CalculRate <> 251
                BEGIN
                    IF @rt_SettingMin > 0 AND @red_guid < @rt_SettingMin AND @red_quantity <> 0
                        SET @red_guid = @rt_SettingMin;
                        
                    IF @rt_SettingMax > 0 AND @red_guid > @rt_SettingMax AND @red_quantity <> 0
                        SET @red_guid = @rt_SettingMax;
                END
                
                SET @red_case_qtyitem = 0;
                SET @red_box_qtyitem = 0;
                SET @red_result_msg = @group_Remotekey + '-' + @group_posuffix;

                -- Override based on oldunitcost
                IF @red_oldunitcost > @red_extdcost
                    SET @red_guid = @rt_SettingMin;
				
                    
                -- Final max check    
                IF @red_guid > @rt_SettingMax AND @rt_SettingMax <> 0
                    SET @red_guid = @rt_SettingMax;
			
                    
                -- Set doc_id for outbound H
                IF @inout = 2 AND @rt_NameAbrg = 'H'
                    SET @red_doc_id = 'H';
                
                /*-----------------------------------------------------------------
                  2.3.1  Special conditions for CalculRate = 80, TypeCalculate = 24
                  -----------------------------------------------------------------*/
                IF @rt_CalculRate = 80 AND @inout = 2 AND @rt_TypeCalculate = 24
                BEGIN
                    SET @red_abs_num = '';
                    IF NOT EXISTS (
                        SELECT 1 
                        FROM irms_2_5_2.dbo.ordhdr 
                        WHERE order_ = @group_Remotekey 
                          AND order_suffix = @group_posuffix 
                          AND co_num = @conum 
                          AND wh_num = @whnum 
                          AND type = 'E'
                    )
                    BEGIN
                        SET @red_guid = 0;
                        SET @red_extdcost = 0;
                        SET @red_quantity = 0;
                    END
                    ELSE
                    BEGIN
                        SET @red_quantity = 1;
                        SET @red_guid = @current_item_so_RateAmount * @red_quantity;
                        SET @red_extdcost = @current_item_so_RateAmount;
                    END
                END
                
                /*-----------------------------------------------------------------
                  2.3.2  Special conditions for CalculRate = 70
                  -----------------------------------------------------------------*/
                IF @rt_CalculRate = 70 AND @inout = 2
                BEGIN
                    DECLARE @carrier_70 VARCHAR(50);
                    SELECT TOP 1 @carrier_70 = carrier 
                    FROM irms_2_5_2.dbo.ordhdr 
                    WHERE order_ = @group_Remotekey 
                      AND order_suffix = @group_posuffix 
                      AND co_num = @conum 
                      AND wh_num = @whnum;
                      
                    IF UPPER(ISNULL(@carrier_70,'')) NOT IN ('CUST', 'WILL')
                    BEGIN
                        SET @red_guid = 0;
                        SET @red_extdcost = 0;
                        SET @red_quantity = 0;
                    END
                    ELSE
                    BEGIN
                        SET @red_quantity = 1;
                        SET @red_extdcost = @wamount * @red_quantity;
                        SET @red_sugg_qty = 0;
                        SET @red_guid = @wamount * @red_quantity;
                        
                        IF @rt_SettingMin > 0 AND @red_guid < @rt_SettingMin AND @red_quantity <> 0
                            SET @red_guid = @rt_SettingMin;
				
                            
                        IF @rt_SettingMax > 0 AND @red_guid > @rt_SettingMax AND @red_quantity <> 0
                            SET @red_guid = @rt_SettingMax;
					
                    END
                END
                
                /*-----------------------------------------------------------------
                  2.3.3  Special conditions for TypeCalculate = 8 (UPS)
                  -----------------------------------------------------------------*/
                IF @rt_TypeCalculate = 8 AND @inout = 2
                BEGIN
                    IF @rt_CalculRate <> 42
                    BEGIN
                        DECLARE @ordhdr_carrier_8 VARCHAR(50);
                        SELECT TOP 1 @ordhdr_carrier_8 = carrier 
                        FROM irms_2_5_2.dbo.ordhdr 
                        WHERE order_ = @group_Remotekey 
                          AND order_suffix = @group_posuffix 
                          AND co_num = @conum 
                          AND wh_num = @whnum;
                          
                        IF UPPER(ISNULL(@ordhdr_carrier_8,'')) <> 'UPS'
                        BEGIN
                            SET @red_guid = 0;
                            SET @red_extdcost = 0;
                            SET @red_quantity = 0;
                        END
                    END
                    ELSE -- CalculRate = 42
                    BEGIN
                        DECLARE @ups_packages_count INT = 0;
                        DECLARE @ordhdr_carrier_8_42 VARCHAR(10);
                        
                        SELECT TOP 1 @ordhdr_carrier_8_42 = carrier 
                        FROM irms_2_5_2.dbo.ordhdr 
                        WHERE order_ = @group_Remotekey 
                          AND order_suffix = @group_posuffix 
                          AND co_num = @conum 
                          AND wh_num = @whnum;
                        
                        IF UPPER(ISNULL(@ordhdr_carrier_8_42,'')) = 'UPS'
                        BEGIN
                            -- Count packages
                            DECLARE @carton_cursor CURSOR;
                            SET @carton_cursor = CURSOR FOR 
                                SELECT carton_id 
                                FROM irms_2_5_2.dbo.CartonMst
                                WHERE order_ = @group_Remotekey 
                                  AND order_suffix = @group_posuffix 
                                  AND co_num = @conum 
                                  AND wh_num = @whnum;
                                  
                            DECLARE @current_carton_id VARCHAR(100);
                            
                            OPEN @carton_cursor;
                            FETCH NEXT FROM @carton_cursor INTO @current_carton_id;
                            
                            WHILE @@FETCH_STATUS = 0
                            BEGIN
                                DECLARE @distinct_packages INT = 0;
                                
                                BEGIN TRY
                                    SELECT @distinct_packages = COUNT(DISTINCT PackageID) 
                                    FROM cstm.dbo.history 
                                    WHERE PackageID = @current_carton_id 
                                      AND VoidFlag = 'N';
                                      
                                    SET @ups_packages_count = @ups_packages_count + @distinct_packages;
                                END TRY
                                BEGIN CATCH
                                    -- Continue processing
                                END CATCH
                                
                                FETCH NEXT FROM @carton_cursor INTO @current_carton_id;
                            END
                            
                            CLOSE @carton_cursor;
                            DEALLOCATE @carton_cursor;
                            
                            SET @red_unitcost = @current_item_so_RateAmount;
                            SET @red_extdcost = @red_unitcost;
                            SET @red_quantity = @ups_packages_count;
                            SET @red_guid = @red_unitcost * @red_quantity;
                            
                            IF @rt_SettingMin > 0 AND @red_guid < @rt_SettingMin
                                SET @red_guid = @rt_SettingMin;
						
                                
                            IF @rt_SettingMax > 0 AND @red_guid > @rt_SettingMax
                                SET @red_guid = @rt_SettingMax;
					
                        END
                    END
                END
                
                /*-----------------------------------------------------------------
                  2.3.4  Special conditions for TypeCalculate = 9 (FedEx)
                  -----------------------------------------------------------------*/
                IF @rt_TypeCalculate = 9 AND @inout = 2
                BEGIN
                    IF @rt_CalculRate <> 42
                    BEGIN
                        DECLARE @ordhdr_carrier_9 VARCHAR(50);
                        SELECT TOP 1 @ordhdr_carrier_9 = carrier 
                        FROM irms_2_5_2.dbo.ordhdr 
                        WHERE order_ = @group_Remotekey 
                          AND order_suffix = @group_posuffix 
                          AND co_num = @conum 
                          AND wh_num = @whnum;
                          
                        IF UPPER(ISNULL(@ordhdr_carrier_9,'')) <> 'FEPL'
                        BEGIN
                            SET @red_guid = 0;
                            SET @red_extdcost = 0;
                            SET @red_quantity = 0;
                        END
                    END
                    ELSE -- CalculRate = 42
                    BEGIN
                        DECLARE @fedex_packages_count INT = 0;
                        DECLARE @ordhdr_carrier_9_42 VARCHAR(10);
                        
                        SELECT TOP 1 @ordhdr_carrier_9_42 = carrier 
                        FROM irms_2_5_2.dbo.ordhdr 
                        WHERE order_ = @group_Remotekey 
                          AND order_suffix = @group_posuffix 
                          AND co_num = @conum 
                          AND wh_num = @whnum;
                        
                        IF UPPER(ISNULL(@ordhdr_carrier_9_42,'')) = 'FEPL'
                        BEGIN
                            -- Count packages
                            DECLARE @carton_cursor_fedex CURSOR;
                            SET @carton_cursor_fedex = CURSOR FOR 
                                SELECT carton_id 
                                FROM irms_2_5_2.dbo.CartonMst
                                WHERE order_ = @group_Remotekey 
                                  AND order_suffix = @group_posuffix 
                                  AND co_num = @conum 
                                  AND wh_num = @whnum;
                                  
                            DECLARE @current_carton_id_fedex VARCHAR(100);
                            
                            OPEN @carton_cursor_fedex;
                            FETCH NEXT FROM @carton_cursor_fedex INTO @current_carton_id_fedex;
                            
                            WHILE @@FETCH_STATUS = 0
                            BEGIN
                                DECLARE @distinct_packages_fedex INT = 0;
                                
                                BEGIN TRY
                                    SELECT @distinct_packages_fedex = COUNT(DISTINCT PackageID) 
                                    FROM cstm.dbo.history 
                                    WHERE PackageID = @current_carton_id_fedex 
                                      AND VoidFlag = 'N';
                                      
                                    SET @fedex_packages_count = @fedex_packages_count + @distinct_packages_fedex;
                                END TRY
                                BEGIN CATCH
                                    -- Continue processing
                                END CATCH
                                
                                FETCH NEXT FROM @carton_cursor_fedex INTO @current_carton_id_fedex;
                            END
                            
                            CLOSE @carton_cursor_fedex;
                            DEALLOCATE @carton_cursor_fedex;
                            
                            SET @red_unitcost = @current_item_so_RateAmount;
                            SET @red_extdcost = @red_unitcost;
                            SET @red_quantity = @fedex_packages_count;
                            SET @red_guid = @red_unitcost * @red_quantity;
                            
                            IF @rt_SettingMin > 0 AND @red_guid < @rt_SettingMin
                                SET @red_guid = @rt_SettingMin;
						
                                
                            IF @rt_SettingMax > 0 AND @red_guid > @rt_SettingMax
                                SET @red_guid = @rt_SettingMax;
						
                        END
                    END
                END
                
                /*-----------------------------------------------------------------
                  2.3.5  Special conditions for TypeCalculate = 10 (USPS)
                  -----------------------------------------------------------------*/
                IF @rt_TypeCalculate = 10 AND @inout = 2
                BEGIN
                    IF @rt_CalculRate <> 42
                    BEGIN
                        DECLARE @ordhdr_carrier_10 VARCHAR(50);
                        SELECT TOP 1 @ordhdr_carrier_10 = carrier 
                        FROM irms_2_5_2.dbo.ordhdr 
                        WHERE order_ = @group_Remotekey 
                          AND order_suffix = @group_posuffix 
                          AND co_num = @conum 
                          AND wh_num = @whnum;
                          
                        IF UPPER(ISNULL(@ordhdr_carrier_10,'')) <> 'USPS'
                        BEGIN
                            SET @red_guid = 0;
                            SET @red_extdcost = 0;
                            SET @red_quantity = 0;
                        END
                    END
                    ELSE -- CalculRate = 42
                    BEGIN
                        DECLARE @usps_packages_count INT = 0;
                        DECLARE @ordhdr_carrier_10_42 VARCHAR(10);
                        
                        SELECT TOP 1 @ordhdr_carrier_10_42 = carrier 
                        FROM irms_2_5_2.dbo.ordhdr 
                        WHERE order_ = @group_Remotekey 
                          AND order_suffix = @group_posuffix 
                          AND co_num = @conum 
                          AND wh_num = @whnum;
                        
                        IF UPPER(ISNULL(@ordhdr_carrier_10_42,'')) = 'USPS'
                        BEGIN
                            -- Count packages
                            DECLARE @carton_cursor_usps CURSOR;
                            SET @carton_cursor_usps = CURSOR FOR 
                                SELECT carton_id 
                                FROM irms_2_5_2.dbo.CartonMst
                                WHERE order_ = @group_Remotekey 
                                  AND order_suffix = @group_posuffix 
                                  AND co_num = @conum 
                                  AND wh_num = @whnum;
                                  
                            DECLARE @current_carton_id_usps VARCHAR(100);
                            
                            OPEN @carton_cursor_usps;
                            FETCH NEXT FROM @carton_cursor_usps INTO @current_carton_id_usps;
                            
                            WHILE @@FETCH_STATUS = 0
                            BEGIN
                                DECLARE @distinct_packages_usps INT = 0;
                                
                                BEGIN TRY
                                    SELECT @distinct_packages_usps = COUNT(DISTINCT PackageID) 
                                    FROM cstm.dbo.history 
                                    WHERE PackageID = @current_carton_id_usps 
                                      AND VoidFlag = 'N';
                                      
                                    SET @usps_packages_count = @usps_packages_count + @distinct_packages_usps;
                                END TRY
                                BEGIN CATCH
                                    -- Continue processing
                                END CATCH
                                
                                FETCH NEXT FROM @carton_cursor_usps INTO @current_carton_id_usps;
                            END
                            
                            CLOSE @carton_cursor_usps;
                            DEALLOCATE @carton_cursor_usps;
                            
                            SET @red_unitcost = @current_item_so_RateAmount;
                            SET @red_extdcost = @red_unitcost;
                            SET @red_quantity = @usps_packages_count;
                            SET @red_guid = @red_unitcost * @red_quantity;
                            
                            IF @rt_SettingMin > 0 AND @red_guid < @rt_SettingMin
                                SET @red_guid = @rt_SettingMin;
					
                                
                            IF @rt_SettingMax > 0 AND @red_guid > @rt_SettingMax
                                SET @red_guid = @rt_SettingMax;
							
                        END
                    END
                END
                
                /*-----------------------------------------------------------------
                  2.3.6  TypeCalculate 12 / CalculRate 42 (International)
                  -----------------------------------------------------------------
                  C# code (logical-OR of three <> tests) is ALWAYS true, therefore
                  red.guid / extdcost / quantity are ALWAYS zero.
                  -----------------------------------------------------------------*/
                IF @rt_TypeCalculate = 12 AND @inout = 2 AND @rt_CalculRate = 42
                BEGIN
                    /* >>>  CHANGED  <<<  – single always-zero branch */
                    SET @red_guid = 0;
                    SET @red_extdcost = 0;
                    SET @red_quantity = 0;
                END
                
                /*-----------------------------------------------------------------
                  2.3.7  TypeCalculate = 21, CalculRate = 252 (Hazardous)
                  -----------------------------------------------------------------*/
                IF @rt_TypeCalculate = 21 AND @inout = 2 AND @rt_CalculRate = 252
                BEGIN
                    IF EXISTS (
                        SELECT 1 
                        FROM irms_2_5_2.dbo.item 
                        WHERE abs_num = @rt_abs_num 
                          AND co_num = @rt_Co_num 
                          AND wh_num = @rt_Wh_num 
                          AND hazardous = 'T'
                    )
                    BEGIN
                        SET @red_unitcost = @current_item_so_RateAmount;
                        SET @red_extdcost = @red_unitcost * 1;
                        SET @red_quantity = 1;
                        SET @red_guid = @red_extdcost;
                        
                        IF @rt_SettingMin > 0 AND @red_guid < @rt_SettingMin
                            SET @red_guid = @rt_SettingMin;
				
                            
                        IF @rt_SettingMax > 0 AND @red_guid > @rt_SettingMax
                            SET @red_guid = @rt_SettingMax;
						
                    END
                    ELSE
                    BEGIN
                        SET @red_guid = 0;
                        SET @red_extdcost = 0;
                        SET @red_quantity = 0;
                    END
                END
                
                /*-----------------------------------------------------------------
                  2.3.8  TypeCalculate = 22, CalculRate = 253 (OE transaction)
                  -----------------------------------------------------------------*/
                IF @rt_TypeCalculate = 22 AND @inout = 2 AND @rt_CalculRate = 253
                BEGIN
                    IF EXISTS (
                        SELECT 1 
                        FROM irms_2_5_2.dbo.auditlog 
                        WHERE po_number = @group_Remotekey 
                          AND po_suffix = @group_posuffix 
                          AND co_num = @conum 
                          AND wh_num = @whnum 
                          AND trans_type = 'OE'
                    )
                    BEGIN
                        SET @red_unitcost = @current_item_so_RateAmount;
                        SET @red_extdcost = @red_unitcost * 1;
                        SET @red_quantity = 1;
                        SET @red_guid = @red_extdcost;
                        
                        IF @rt_SettingMin > 0 AND @red_guid < @rt_SettingMin
                            SET @red_guid = @rt_SettingMin;
						
                            
                        IF @rt_SettingMax > 0 AND @red_guid > @rt_SettingMax
                            SET @red_guid = @rt_SettingMax;
					
                    END
                    ELSE
                    BEGIN
                        SET @red_guid = 0;
                        SET @red_extdcost = 0;
                        SET @red_quantity = 0;
                    END
                END
                
                /*-----------------------------------------------------------------
                  2.3.9  CalculRate = 30 (PoCloseRequired)
                  -----------------------------------------------------------------*/
                IF @rt_CalculRate = 30
                BEGIN
                    SELECT TOP 1 @findco_PoCloseRate = PoCloseRate 
                    FROM PoCloseRequired 
                    WHERE Poconum = @conum 
                      AND Powhnum = @whnum 
                      AND Poponumber = @group_Remotekey 
                      AND Posuffix = @group_posuffix 
                      AND PoCloseDescId = @rt_RateDescId;
                      
                    IF @findco_PoCloseRate IS NOT NULL
                    BEGIN
                        SET @red_unitcost = @current_item_so_RateAmount;
                        SET @red_quantity = @findco_PoCloseRate;
                        SET @red_extdcost = @red_unitcost * @red_quantity;
                        SET @red_guid = @red_extdcost;
                        
                        IF @rt_SettingMin > 0 AND @red_guid < @rt_SettingMin
                            SET @red_guid = @rt_SettingMin;
							ELSE SET @red_guid = @red_extdcost;
                            
                        IF @rt_SettingMax > 0 AND @red_guid > @rt_SettingMax
                            SET @red_guid = @rt_SettingMax;
					
                    END
                    ELSE
                    BEGIN
                        SET @red_sugg_qty = 0;
                        SET @red_oldunitcost = 0;
                        SET @red_guid = 0;
                        SET @red_extdcost = 0;
                        SET @red_quantity = 0;
                    END
                END
                
                SET @totalgeneral = @totalgeneral + @red_guid;
                
                -- First insert for primary charge
                INSERT INTO #mylistfinal (
                    substat_code, wh_num, co_num, quantity, action_code, transmission,
                    oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                    extdcost, sugg_qty, guid, case_qtyitem, box_qtyitem,
                    result_msg, emp_num, abs_num, doc_id, cc_type
                )
                VALUES (
                    @red_substat_code, @red_wh_num, @red_co_num, @red_quantity, @red_action_code, @red_transmission,
                    @red_oldunitcost, @red_unitcost, @red_fromdatetime, @red_po_number, @red_po_suffix,
                    @red_extdcost, @red_sugg_qty, @red_guid, @red_case_qtyitem, @red_box_qtyitem,
                    @red_result_msg, @red_emp_num, @red_abs_num, @red_doc_id, @red_cc_type
                );

                /*-----------------------------------------------------------------
                  2.3.10  Second charge part for CalculRate = 251 (USPS)
                  -----------------------------------------------------------------*/
                IF @rt_CalculRate = 251 AND @inout = 2 AND @fgh_RateDescCountPo1 = 1
                BEGIN
                    -- Store guid of first charge part
                    DECLARE @pre_red67_red_guid DECIMAL(18,4) = @red_guid;
                    DECLARE @wqunt_for_red67 DECIMAL(18,4) = @wfreight;
                    DECLARE @rateAmount_for_red67 DECIMAL(18,4) = @wamount;
                    DECLARE @red67_guid DECIMAL(18,4);
                    DECLARE @red67_extdcost DECIMAL(18,4) = @rateAmount_for_red67 * @wqunt_for_red67;
                    
                    SET @red67_guid = @red67_extdcost;
                    
                    -- Apply min/max to combined amount
                    DECLARE @ammmount DECIMAL(18,4) = @red67_extdcost + @pre_red67_red_guid;
                    
                    IF @rt_SettingMin > 0 AND @ammmount < @rt_SettingMin AND @wqunt_for_red67 <> 0
                        SET @red67_guid = @rt_SettingMin;
					
                    
                    IF @rt_SettingMax > 0 AND @ammmount > @rt_SettingMax AND @wqunt_for_red67 <> 0
                        SET @red67_guid = @rt_SettingMax;
				
                    
                    SET @totalgeneral = @totalgeneral + @red67_guid;
                    
                    -- Insert second charge part
                    INSERT INTO #mylistfinal (
                        substat_code, wh_num, co_num, quantity, action_code, transmission,
                        oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                        extdcost, sugg_qty, guid, case_qtyitem, box_qtyitem,
                        result_msg, emp_num, doc_id
                    )
                    VALUES (
                        @rt_RateDescId, @whnum, @conum, @wqunt_for_red67, @rt_UnitCode, @rt_SettingId,
                        @rt_SettingMin, @rateAmount_for_red67, '61', @group_Remotekey, @group_posuffix,
                        @red67_extdcost, 0, @red67_guid, 0, 0,
                        @group_Remotekey + '-' + @group_posuffix, NULL, CASE WHEN @inout = 3 THEN 'S' ELSE NULL END
                    );
                END
                
                DROP TABLE IF EXISTS #myquery_RateDescCountPo1;
                FETCH NEXT FROM group_cursor_RateDescCountPo1 INTO @group_Remotekey, @group_posuffix;
            END
            
            CLOSE group_cursor_RateDescCountPo1;
            DEALLOCATE group_cursor_RateDescCountPo1;
        END
        /*-----------------------------------------------------------------
          2.4  Handle RateDescCountPo != 1 (Standard flat rate charge)
          -----------------------------------------------------------------*/
        ELSE
        BEGIN
            SET @current_item_so_RateAmount = @wamount;
            SET @red_oldunitcost = @rt_SettingMin;
            SET @red_unitcost = @current_item_so_RateAmount;
            SET @red_quantity = 1;
            SET @red_extdcost = @red_unitcost * @red_quantity;
            SET @red_guid = @red_extdcost;
            
            SET @red_substat_code = @rt_RateDescId;
            SET @red_wh_num = @whnum;
            SET @red_co_num = @conum;
            SET @red_action_code = @rt_UnitCode;
            SET @red_cc_type = @rt_UnitCode;
            SET @red_transmission = @rt_SettingId;
            SET @red_fromdatetime = @rt_ChargeID;
            SET @red_po_number = '';
            SET @red_po_suffix = '';
            SET @red_sugg_qty = 0;
            SET @red_emp_num = '';
            SET @red_result_msg = '';

            -- Apply min/max constraints
            IF @rt_SettingMin > 0 AND @red_guid < @rt_SettingMin
                SET @red_guid = @rt_SettingMin;
		
                
            IF @rt_SettingMax > 0 AND @red_guid > @rt_SettingMax
                SET @red_guid = @rt_SettingMax;
		
            
            SET @totalgeneral = @totalgeneral + @red_guid;
            
            SET @red_case_qtyitem = 0;
            SET @red_box_qtyitem = 0;
            
            -- Insert the record
            INSERT INTO #mylistfinal (
                substat_code, wh_num, co_num, quantity, action_code, transmission,
                oldunitcost, unitcost, fromdatetime, po_number, po_suffix, extdcost,
                sugg_qty, guid, case_qtyitem, box_qtyitem, result_msg, emp_num, cc_type
            )
            VALUES (
                @red_substat_code, @red_wh_num, @red_co_num, @red_quantity, @red_action_code, @red_transmission,
                @red_oldunitcost, @red_unitcost, @red_fromdatetime, @red_po_number, @red_po_suffix, @red_extdcost,
                @red_sugg_qty, @red_guid, @red_case_qtyitem, @red_box_qtyitem, @red_result_msg, @red_emp_num, @red_cc_type
            );
        END
    END
    
    /* ###############################################################
       # 3.  fetch next #rt row                                      #
       ############################################################### */
    FETCH NEXT FROM main_rt_cursor INTO
        @rt_SettingId, @rt_RateDescId, @rt_RateAmount, @rt_SettingMin,
        @rt_SettingMax, @rt_UnitCode, @rt_ChargeID, @rt_Co_num,
        @rt_Wh_num, @rt_abs_num, @rt_RatebyId, @rt_CalculRate,
        @rt_TypeCalculate, @rt_RateDescName, @rt_NameAbrg,
        @rt_RateDescCountPo;
END  -- while #rt rows

CLOSE main_rt_cursor;
DEALLOCATE main_rt_cursor;

/*=======================================================================
  #mylistfinal now contains the charges exactly as the C# code produced #
  =======================================================================*/
--SELECT *
--FROM   #mylistfinal;


------------------------------------------------------------------------rt ends------------------------------------------------------


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
--GO
BEGIN
-- Declare variables to match C# code
SET  @newquantity2 = 0;  -- Renamed to match C# variable newquantity2
DECLARE @newtotal DECIMAL(18,6) = 0;
DECLARE @splitt INT = 0;
DECLARE @firstDayOfMonth00 DATETIME;
DECLARE @lastDayOfMonth00 DATETIME;
SET @teststorage  = 0;
SET @forflat = 0;
SET @calzala = 0;
SET @wponumber  = '';
SET @wposuffix  = '';
SET @empnum  = '';
DECLARE @SplitQty DECIMAL(18,6);
DECLARE @TypeCalculate INT;
DECLARE @ForGroup BIT;
DECLARE @PalletId INT;


-- Create a temp table to represent the palletidlist ArrayList
IF OBJECT_ID('tempdb..#palletidlist') IS NOT NULL 
    DROP TABLE #palletidlist;

CREATE TABLE #palletidlist (
    palletid NVARCHAR(50)
);

-- Create temp table for takeoff data (used in C# code)
--IF OBJECT_ID('tempdb..#takeoff') IS NOT NULL 
--    DROP TABLE #takeoff;

--CREATE TABLE #takeoff (
--    AbsnumName NVARCHAR(50)
--);

---- Populate with AbsnumRemove records
--INSERT INTO #takeoff (AbsnumName)
--SELECT AbsnumName FROM AbsnumRemove;

-- Create temp tables for processing - equivalent to C# mylistfinal2
IF OBJECT_ID('tempdb..#mylistfinal2') IS NOT NULL 
    DROP TABLE #mylistfinal2;

select * into #mylistfinal2 from #mylist;

-- Calculate date ranges - matching the C# calculation exactly
DECLARE @dt100 DATETIME = DATEADD(DAY, -1, @fromdatestorage); -- Subtracting one day like in C#
SET @firstDayOfMonth00 = DATEFROMPARTS(YEAR(@dt100), MONTH(@dt100), 1);
SET @lastDayOfMonth00 = EOMONTH(@dt100);

-- Get customer settings - matching what's in C#
SELECT TOP 1 
    @SettingBaseNew1 = SettingBaseNew1,
    @SettingBaseNew3 = SettingBaseNew3,
    @splitt = SettingBaseSplitMinth
FROM SettingCustomer
WHERE SettingBaseWhnum = @whnum 
  AND SettingBaseConum = @conum;

-- Store settings in a variable for later use similar to the C# code
DECLARE @foundsettingcustomer TABLE (
    SettingBaseNew1 INT,
    SettingBaseNew3 INT,
    SettingBaseSplitMinth INT
);

INSERT INTO @foundsettingcustomer
SELECT @SettingBaseNew1, @SettingBaseNew3, @splitt;

-- Create a cursor to loop through rate items (equivalent to the foreach loop in C#)
DECLARE rate_cursor CURSOR FOR 
    SELECT 
        sr.SettingId, sr.RateDescId, sr.RateAmount, sr.SettingMin, sr.SettingMax,
        sr.UnitCode, C.ChargeID, sr.SplitQty, sr.RatebyId, rd.TypeCalculate,
        rd.ForGroup, rd.NameAbrg
    FROM SettingRate sr
    JOIN RateDesc rd ON sr.RateDescId = rd.RateDescId
	LEFT JOIN CHARGENAME C on c.ChargeNameDesc=sr.chargename
    WHERE sr.co_num = @conum 
      AND sr.wh_num = @whnum 
      AND rd.RateDescCountPo = 1 
      AND rd.RatebyQty = 1 
      AND sr.KindId = @inout;

OPEN rate_cursor;
FETCH NEXT FROM rate_cursor INTO 
    @SettingId, @RateDescId, @RateAmount, @SettingMin, @SettingMax,
    @UnitCode, @ChargeID, @SplitQty, @RatebyId, @TypeCalculate,
    @ForGroup, @NameAbrg;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @forflat = 0;
    SET @teststorage = 0;
    
    -- Reset PalletIDList for each rate item - Same as palletidlist.Clear()
    DELETE FROM #palletidlist;
    
    -- Get updated rate amount - equivalent to var wamm = db1.SettingRates.FirstOrDefault(x => x.SettingId == item44.so.SettingId);
    SELECT TOP 1 @RateAmount = RateAmount 
    FROM SettingRate 
    WHERE SettingId = @SettingId;
    
    -- Check TypeCalculate values - matches teststorage = 1 conditional
    IF @TypeCalculate IN (39, 50, 51) 
        SET @teststorage = 1;
    
    -- Get CalculRate from Rateby - matches var search = db1.Ratebys.FirstOrDefault(x => x.RatebyId == item44.so.RatebyId);
    SELECT @CalculRate = CalculRate
    FROM Rateby
    WHERE RatebyId = @RatebyId;
    
    IF @CalculRate <> 31
    BEGIN
        IF @TypeCalculate <> 26
        BEGIN
            -- Create temp table for grouping results 
            IF OBJECT_ID('tempdb..#lastmylist2') IS NOT NULL 
                DROP TABLE IF EXISTS #lastmylist2;
            
            CREATE TABLE #lastmylist2 (
                Remotekey NVARCHAR(50),
                posuffix NVARCHAR(50),
                absnum NVARCHAR(50),
                empnum NVARCHAR(50),
                Total DECIMAL(18,6),
                bin_num NVARCHAR(50)
            );
            
            -- Base query for grouping (varies based on CalculRate) - matches the LINQ queries in C#
            IF @CalculRate = 12
            BEGIN
                -- Group by bin_num for CalculRate = 12
                INSERT INTO #lastmylist2
                SELECT 
                    po_number AS Remotekey, 
                    po_suffix AS posuffix, 
                    abs_num AS absnum, 
                    emp_num AS empnum,
                    SUM(quantity) AS Total,
                    bin_num
                FROM #mylistfinal2
                WHERE quantity <> 0 
                  AND abs_num IS NOT NULL 
                  AND (doc_id <> 'S' OR doc_id IS NULL)
                GROUP BY po_number, po_suffix, abs_num, emp_num, bin_num
                ORDER BY po_number;
            END
            ELSE
            BEGIN
                -- Standard grouping for other CalculRates
                INSERT INTO #lastmylist2
                SELECT 
                    po_number AS Remotekey, 
                    po_suffix AS posuffix, 
                    abs_num AS absnum, 
                    emp_num AS empnum,
                    SUM(quantity) AS Total,
                    NULL AS bin_num
                FROM #mylistfinal2
                WHERE quantity <> 0 
                  AND abs_num IS NOT NULL 
                  AND (doc_id <> 'S' OR doc_id IS NULL)
                  AND bin_to = 'x'
                GROUP BY po_number, po_suffix, abs_num, emp_num
                ORDER BY po_number;
            END
            
            -- Handle CalculRate = 42 for outbound (inout = 2)
            IF @inout = 2 AND @CalculRate = 42
            BEGIN
                -- Create temp table for special calculation
                IF OBJECT_ID('tempdb..#calresult') IS NOT NULL 
                    DROP TABLE #calresult1;
                
                CREATE TABLE #calresult1 (
                    Remotekey NVARCHAR(50),
                    posuffix NVARCHAR(50),
                    absnum NVARCHAR(50),
                    Total DECIMAL(18,6)
                );
                
                -- Group by PO for calculation - matches the LINQ in C#
                INSERT INTO #calresult1
                SELECT 
                    po_number AS Remotekey, 
                    po_suffix AS posuffix, 
                    abs_num AS absnum,
                    SUM(quantity) AS Total
                FROM #mylistfinal2
                WHERE quantity <> 0 
                  AND abs_num IS NOT NULL 
                  AND (doc_id <> 'S' OR doc_id IS NULL)
                  AND bin_to = 'x'
                GROUP BY po_number, po_suffix, abs_num
                ORDER BY po_number;
                
                -- Process each grouped PO
                DECLARE po_cursor CURSOR FOR
                    SELECT DISTINCT Remotekey, posuffix
                    FROM #calresult1
                    ORDER BY Remotekey, posuffix;
                
                DECLARE @cur_po NVARCHAR(50), @cur_suffix NVARCHAR(50);
                DECLARE @newcount INT;
                
                OPEN po_cursor;
                FETCH NEXT FROM po_cursor INTO @cur_po, @cur_suffix;
                
                WHILE @@FETCH_STATUS = 0
                BEGIN
                    -- Count records for this PO
                    SELECT @newcount = COUNT(*) 
                    FROM #calresult1
                    WHERE Remotekey = @cur_po AND posuffix = @cur_suffix;
                    
                    -- Calculate total amount
                    SELECT @amountofcal = SUM(@RateAmount * Total) 
                    FROM #calresult1
                    WHERE Remotekey = @cur_po AND posuffix = @cur_suffix;
                    
                    -- Insert individual records - matches AudiViewModel creation in C#
                    INSERT INTO #mylistfinal (
                        substat_code, wh_num, co_num, abs_num, transmission,
                        oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                        po_line, lot, row_status, sugg_qty, act_qty,
                        item_type, emp_num, quantity, result_msg, case_qtyitem,
                        box_qtyitem, cc_type, extdcost, doc_id, guid
                    )
                    SELECT 
                        @RateDescId, @whnum, @conum, absnum, @SettingId,
                        @SettingMin, @RateAmount, @ChargeID, Remotekey, posuffix,
                        0, '', '', Total, 0,
                        '', '0', Total, Remotekey + ' ' + posuffix, 0,
                        0, @UnitCode, @RateAmount * Total, @NameAbrg,
                        -- CORRECTION: Apply guid calculations properly as in C# code
                        CASE 
                            WHEN @newcount = 1 AND @SettingMin > (@RateAmount * Total) THEN @SettingMin
                            WHEN @newcount = 1 AND (@RateAmount * Total) > @SettingMax AND @SettingMax <> 0 THEN @SettingMax
                            ELSE @RateAmount * Total
                        END
                    FROM #calresult1
                    WHERE Remotekey = @cur_po AND posuffix = @cur_suffix;
                    
                    -- Add adjustment record if over max
                    IF @newcount > 1 AND @amountofcal > @SettingMax AND @SettingMax <> 0
                    BEGIN
                        INSERT INTO #mylistfinal (
                            substat_code, wh_num, co_num, abs_num, transmission,
                            oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                            po_line, lot, row_status, sugg_qty, act_qty,
                            item_type, emp_num, quantity, result_msg, case_qtyitem,
                            box_qtyitem, cc_type, extdcost, doc_id, guid
                        )
                        VALUES (
                            @RateDescId, @whnum, @conum, '', @SettingId,
                            @SettingMin, @RateAmount, @ChargeID, @cur_po, @cur_suffix,
                            0, '', '', 1, 0,
                            '', '0', 1, @cur_po + ' ' + @cur_suffix, 0,
                            0, @UnitCode, @amountofcal - @SettingMax, @NameAbrg, @amountofcal - @SettingMax
                        );
                    END
                    
                    -- Add adjustment record if under min
                    IF @newcount > 1 AND @amountofcal < @SettingMin AND @SettingMin <> 0
                    BEGIN
                        INSERT INTO #mylistfinal (
                            substat_code, wh_num, co_num, abs_num, transmission,
                            oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                            po_line, lot, row_status, sugg_qty, act_qty,
                            item_type, emp_num, quantity, result_msg, case_qtyitem,
                            box_qtyitem, cc_type, extdcost, doc_id, guid
                        )
                        VALUES (
                            @RateDescId, @whnum, @conum, '', @SettingId,
                            @SettingMin - @amountofcal, @RateAmount, @ChargeID, @cur_po, @cur_suffix,
                            0, '', '', 1, 0,
                            '', '0', 1, @cur_po + ' ' + @cur_suffix, 0,
                            0, @UnitCode, @SettingMin - @amountofcal, @NameAbrg, @SettingMin - @amountofcal
                        );
                    END
                    
                    FETCH NEXT FROM po_cursor INTO @cur_po, @cur_suffix;
                END
                
                CLOSE po_cursor;
                DEALLOCATE po_cursor;
            END
            ELSE -- Handle all other rates
            BEGIN
                -- Create a temp table to track processed PO+suffix pairs
                IF OBJECT_ID('tempdb..#processed_po') IS NOT NULL 
                    DROP TABLE #processed_po;
                    
                CREATE TABLE #processed_po (
                    po_key NVARCHAR(100) PRIMARY KEY
                );
                
                -- Process each line item
                DECLARE item_cursor CURSOR FOR 
                    SELECT Remotekey, posuffix, absnum, empnum, Total 
                    FROM #lastmylist2;
                
                DECLARE 
                    @item_Remotekey NVARCHAR(50),
                    @item_posuffix NVARCHAR(50),
                    @item_absnum NVARCHAR(50),
                    @item_empnum NVARCHAR(50),
                    @item_Total DECIMAL(18,6),
                    @processed BIT,
                    @po_close_rate DECIMAL(18,4);
                
                OPEN item_cursor;
                FETCH NEXT FROM item_cursor INTO 
                    @item_Remotekey, @item_posuffix, @item_absnum, @item_empnum, @item_Total;
                
                WHILE @@FETCH_STATUS = 0
                BEGIN
                    SET @forflat = @forflat + 1;
                    SET @newtotal = @item_Total;
                    
                    -- Check if PO has been processed already
                    SET @processed = 0;
                    
                    SELECT @processed = 1 
                    FROM #processed_po 
                    WHERE po_key = @item_Remotekey + '-' + @item_posuffix;
                    
                    -- CalculRate = 30 specific handling (PoCloseRequired)
                    IF @CalculRate = 30
                    BEGIN
                        -- Only process each PO once
                        IF @processed = 0
                        BEGIN
                            -- Find in PoCloseRequired
                            SELECT TOP 1 @po_close_rate = PoCloseRate
                            FROM PoCloseRequired
                            WHERE Poconum = @conum 
                              AND Powhnum = @whnum
                              AND Poponumber = @item_Remotekey 
                              AND Posuffix = @item_posuffix
                              AND PoCloseDescId = @RateDescId;
                            
                            -- Get group rate if ForGroup = 1
                            IF @ForGroup = 1
                            BEGIN
                                BEGIN TRY
                                    SELECT TOP 1 @groupRate = GroupRate
                                    FROM GroupItem
                                    WHERE Conum = @conum 
                                      AND Whnum = @whnum 
                                      AND RateDescId = @RateDescId 
                                      AND LTRIM(RTRIM(GroupName)) = LTRIM(RTRIM(@item_empnum))
                                      AND KindId = @inout;
                                    
                                    IF @@ROWCOUNT > 0
                                        SET @RateAmount = @groupRate;
                                END TRY
                                BEGIN CATCH
                                    IF LEN(LTRIM(RTRIM(@item_empnum))) > 0
                                    BEGIN
                                        SET @RateAmount = 0;
                                        SET @SettingMin = 0;
                                    END
                                END CATCH
                            END
                            
                            -- Apply HR/HHR adjustments if needed
                            IF @po_close_rate <> 0 AND (UPPER(@UnitCode) = 'HR' OR UPPER(@UnitCode) = 'HHR')
                            BEGIN
                                -- CORRECTION: Explicitly handle hour increment
                                SET @hour_increment = CASE @SettingBaseNew1
                                    WHEN 1 THEN 15
                                    WHEN 2 THEN 30
                                    WHEN 3 THEN 1
                                    ELSE 15
                                END;
                                
                                -- Call GetQuantity function equivalent
                                SET @po_close_rate = dbo.GetQuantity('HR', @hour_increment, @SettingBaseNew3, @po_close_rate);
                            END
                            
                            -- Insert into final result
                            INSERT INTO #mylistfinal (
                                substat_code, wh_num, co_num, abs_num, transmission,
                                oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                                quantity, sugg_qty, guid, doc_id, result_msg,
                                extdcost, case_qtyitem, box_qtyitem, emp_num
                            )
                            VALUES (
                                @RateDescId, @whnum, @conum, @item_absnum, @SettingId,
                                @SettingMin, @RateAmount, @ChargeID, @item_Remotekey, @item_posuffix,
                                @po_close_rate, @po_close_rate,
                                -- CORRECTION: Apply guid calculations properly
                                CASE
                                    WHEN @RateAmount * @po_close_rate < @SettingMin AND @SettingMin <> 0 THEN @SettingMin
                                    WHEN @RateAmount * @po_close_rate > @SettingMax AND @SettingMax <> 0 THEN @SettingMax
                                    ELSE @RateAmount * @po_close_rate
                                END,
                                @NameAbrg, @item_Remotekey + '-' + @item_posuffix,
                                @RateAmount * @po_close_rate, 0, 0, @item_empnum
                            );
                            
                            -- Mark as processed
                            INSERT INTO #processed_po (po_key) 
                            VALUES (@item_Remotekey + '-' + @item_posuffix);
                        END
                    END
                    ELSE -- Handle other rates
                    BEGIN
                        -- Set initial quantities
                        SET @newquantity2 = @newtotal;
                        
                        -- Special handling for CalculRate = 44
                        IF @CalculRate = 44
                        BEGIN
                            IF @forflat = 1
                            BEGIN
                                SET @newquantity2 = 1;
                                SET @newtotal = 1;
                            END
                            ELSE
                            BEGIN
                                SET @newquantity2 = 0;
                                SET @newtotal = 0;
                            END
                        END
                        
                        -- Update tracking variables
                        IF @wponumber <> @item_Remotekey OR @wposuffix <> @item_posuffix
                        BEGIN
                            DELETE FROM #palletidlist;
                        END
                        
                        IF @calzala = 0
                        BEGIN
                            SET @wponumber = @item_Remotekey;
                            SET @wposuffix = @item_posuffix;
                            SET @empnum = ISNULL(@item_empnum, '');
                            SET @calzala = 1;
                        END
                        
                        IF @wponumber <> @item_Remotekey OR @wposuffix <> @item_posuffix OR @empnum <> ISNULL(@item_empnum, '')
                        BEGIN
                            SET @wponumber = @item_Remotekey;
                            SET @wposuffix = @item_posuffix;
                            SET @empnum = ISNULL(@item_empnum, '');
                            SET @calzala = 1;
                        END
                        
                        -- Get PalletId from Rateby
                        SELECT @PalletId = PalletId 
                        FROM Rateby
                        WHERE RatebyId = @RatebyId;
                        
                        -- Special handling for PalletId = 1
                        IF @PalletId = 1
                        BEGIN
                            SET @calzala = @calzala + 1;
                            
                            -- Inbound vs. Outbound processing is different
                            IF @inout <> 3
                            BEGIN
                                -- Create temp table for pallet processing
                                IF OBJECT_ID('tempdb..#withoutgroup') IS NOT NULL 
                                    DROP TABLE #withoutgroup;
                                
                                -- Get pallet data filtering out excluded abs_nums
                                SELECT m.*
                                INTO #withoutgroup
                                FROM #mylistpaletid m
                                WHERE m.co_num = @conum 
                                  AND m.wh_num = @whnum 
                                  AND m.po_number = @item_Remotekey 
                                  AND m.po_suffix = @item_posuffix
                                  AND UPPER(m.abs_num) = UPPER(@item_absnum)
                                  AND m.trans_type = 'RE'
                                  AND NOT EXISTS (
                                      SELECT 1 
                                      FROM #takeoff t
                                      WHERE UPPER(m.abs_num) = UPPER(t.AbsnumName)
                                  );
                                
                                -- Group by pallet_id
                                IF OBJECT_ID('tempdb..#lastgroup') IS NOT NULL 
                                    DROP TABLE #lastgroup;
                                
                                SELECT 
                                    pallet_id AS palettid,
                                    SUM(quantity) AS Total9
                                INTO #lastgroup
                                FROM #withoutgroup
                                WHERE quantity <> 0 
                                  AND UPPER(abs_num) = UPPER(@item_absnum)
                                GROUP BY pallet_id;
                                
                                -- Process each pallet
                                SET @newtotal = 0;
                                
                                DECLARE pallet_cursor CURSOR FOR
                                    SELECT palettid FROM #lastgroup;
                                
                                DECLARE @pallet_id NVARCHAR(50);
                                
                                OPEN pallet_cursor;
                                FETCH NEXT FROM pallet_cursor INTO @pallet_id;
                                
                                WHILE @@FETCH_STATUS = 0
                                BEGIN
                                    -- Check if already in palletidlist
                                    IF NOT EXISTS (SELECT 1 FROM #palletidlist WHERE palletid = @pallet_id)
                                    BEGIN
                                        -- Add to palletidlist
                                        INSERT INTO #palletidlist (palletid) VALUES (@pallet_id);
                                        
                                        -- Increment newtotal
                                        SET @newtotal = @newtotal + 1;
                                        SET @newquantity2 = @newtotal;
                                    END
                                    
                                    FETCH NEXT FROM pallet_cursor INTO @pallet_id;
                                END
                                
                                CLOSE pallet_cursor;
                                DEALLOCATE pallet_cursor;
                            END
                            ELSE -- Inbound logic
                            BEGIN
                                -- Get item data for calculations
                                DECLARE 
                                    @item_qty DECIMAL(18,6),
                                    @act_qty DECIMAL(18,6),
                                    @case_qtyitem DECIMAL(18,6),
                                    @box_qtyitem DECIMAL(18,6);
                                
                                SELECT TOP 1 
                                    @item_qty = item_qty,
                                    @act_qty = act_qty,
                                    @case_qtyitem = case_qtyitem,
                                    @box_qtyitem = box_qtyitem
                                FROM #mylistfinal2
                                WHERE UPPER(abs_num) = UPPER(@item_absnum);
                                
                                -- CORRECTION: Implement proper CalculRateFore2 logic
                                -- This is a SQL implementation of the C# CalculRateFore2 method
                                IF @CalculRate = 2
                                BEGIN
                                    IF @item_qty > 0
                                        SET @newtotal = FLOOR(@newquantity2 / @item_qty);
                                    ELSE
                                        SET @newtotal = @newquantity2;
                                END
                                ELSE IF @CalculRate = 3
                                BEGIN
                                    IF @case_qtyitem > 0
                                        SET @newtotal = FLOOR(@newquantity2 / @case_qtyitem);
                                    ELSE
                                        SET @newtotal = @newquantity2;
                                END
                                ELSE IF @CalculRate = 4
                                BEGIN
                                    IF @box_qtyitem > 0
                                        SET @newtotal = FLOOR(@newquantity2 / @box_qtyitem);
                                    ELSE
                                        SET @newtotal = @newquantity2;
                                END
                                ELSE -- Default case
                                BEGIN
                                    SET @newtotal = @newquantity2;
                                END
                                
                                SET @newquantity2 = @newtotal;
                            END
                        END
                        ELSE -- PalletId <> 1
                        BEGIN
                            -- Standard item processing
                            BEGIN TRY
                                -- Get item details for calculations
                                DECLARE 
                                    @item_qty2 DECIMAL(18,6),
                                    @act_qty2 DECIMAL(18,6),
                                    @case_qtyitem2 DECIMAL(18,6),
                                    @box_qtyitem2 DECIMAL(18,6),
                                    @newtotal1 DECIMAL(18,6);
                                
                                -- Get the total from mylistfinal2
                                SELECT @newtotal1 = SUM(quantity)
                                FROM #mylistfinal2
                                WHERE quantity <> 0 
                                  AND UPPER(abs_num) = UPPER(@item_absnum) 
                                  AND (doc_id <> 'S' OR doc_id IS NULL)
                                  AND po_number = @item_Remotekey 
                                  AND po_suffix = @item_posuffix
                                  AND bin_to = 'x';
                                
                                IF @newtotal1 <> 0
                                    SET @newtotal = @newtotal1;
                                
                                -- Get item information
                                SELECT TOP 1 
                                    @item_qty2 = item_qty,
                                    @act_qty2 = act_qty,
                                    @case_qtyitem2 = case_qtyitem,
                                    @box_qtyitem2 = box_qtyitem
                                FROM #mylistfinal2
                                WHERE UPPER(abs_num) = UPPER(@item_absnum);
                                
                                -- CORRECTION: Implement proper CalculRateFore2 logic
                                IF @CalculRate = 2
                                BEGIN
                                    IF @item_qty2 > 0
                                        SET @newtotal = FLOOR(@newtotal1 / @item_qty2);
                                    ELSE
                                        SET @newtotal = @newtotal1;
                                END
                                ELSE IF @CalculRate = 3
                                BEGIN
                                    IF @case_qtyitem2 > 0
                                        SET @newtotal = FLOOR(@newtotal1 / @case_qtyitem2);
                                    ELSE
                                        SET @newtotal = @newtotal1;
                                END
                                ELSE IF @CalculRate = 4
                                BEGIN
                                    IF @box_qtyitem2 > 0
                                        SET @newtotal = FLOOR(@newtotal1 / @box_qtyitem2);
                                    ELSE
                                        SET @newtotal = @newtotal1;
                                END
                                ELSE -- Default case
                                BEGIN
                                    SET @newtotal = @newtotal1;
                                END
                                
                                SET @newquantity2 = @newtotal;
                                
                                -- Special handling for CalculRate = 44
                                IF @CalculRate = 44
                                BEGIN
                                    IF @forflat = 1
                                    BEGIN
                                        SET @newtotal = 1;
                                        SET @newquantity2 = 1;
                                    END
                                    ELSE
                                    BEGIN
                                        SET @newtotal = 0;
                                        SET @newquantity2 = 0;
                                    END
                                END
                            END TRY
                            BEGIN CATCH
                                SET @newtotal = 0;
                                SET @newquantity2 = 0;
                            END CATCH
                        END
                        
                        -- Get group rate if applicable
                        BEGIN TRY
                            IF @ForGroup = 1
                            BEGIN
                                SELECT TOP 1 @groupRate = GroupRate
                                FROM GroupItem
                                WHERE Conum = @conum 
                                  AND Whnum = @whnum 
                                  AND RateDescId = @RateDescId 
                                  AND LTRIM(RTRIM(GroupName)) = LTRIM(RTRIM(@empnum))
                                  AND KindId = @inout;
                                
                                IF @@ROWCOUNT > 0
                                    SET @RateAmount = @groupRate;
                            END
                        END TRY
                        BEGIN CATCH
                            IF LEN(LTRIM(RTRIM(@empnum))) > 0
                            BEGIN
                                SET @RateAmount = 0;
                                SET @SettingMin = 0;
                            END
                        END CATCH
                        
                        -- Insert into final result
                        INSERT INTO #mylistfinal (
                            wh_num, co_num, substat_code, abs_num, oldunitcost,
                            transmission, unitcost, fromdatetime, po_number, po_suffix,
                            extdcost, quantity, sugg_qty, guid, doc_id,
                            case_qtyitem, box_qtyitem, emp_num, result_msg, cc_type
                        )
                        VALUES (
                            @whnum, @conum, @RateDescId, @item_absnum, @SettingMin,
                            @SettingId, @RateAmount, @ChargeID, @item_Remotekey, @item_posuffix,
                            @RateAmount * @newquantity2, @newtotal, @item_Total, 
                            -- CORRECTION: Proper guid calculation with min/max constraints
                            CASE
                                WHEN @RateAmount * @newquantity2 < @SettingMin AND @SettingMin <> 0 THEN @SettingMin
                                WHEN @RateAmount * @newquantity2 > @SettingMax AND @SettingMax <> 0 THEN @SettingMax
                                ELSE @RateAmount * @newquantity2
                            END,
                            @NameAbrg, 0, 0, @empnum, @item_Remotekey + '-' + @item_posuffix, @UnitCode
                        );
                    END
                    
                    FETCH NEXT FROM item_cursor INTO 
                        @item_Remotekey, @item_posuffix, @item_absnum, @item_empnum, @item_Total;
                END
                
                CLOSE item_cursor;
                DEALLOCATE item_cursor;
            END
        END
        ELSE IF @TypeCalculate = 26 AND @CalculRate = 30
        BEGIN
            -- Group orders only by po_number and po_suffix
            IF OBJECT_ID('tempdb..#lastmylist2_po') IS NOT NULL 
                DROP TABLE #lastmylist2_po;
            
            CREATE TABLE #lastmylist2_po (
                Remotekey NVARCHAR(50),
                posuffix NVARCHAR(50)
            );
            
            -- Get distinct PO numbers
            INSERT INTO #lastmylist2_po
            SELECT DISTINCT po_number, po_suffix
            FROM #mylistfinal2
            GROUP BY po_number, po_suffix
            ORDER BY po_number, po_suffix;
            
            -- Process each PO for TypeCalculate = 26
            IF @inout = 2
            BEGIN
                DECLARE po26_cursor CURSOR FOR
                    SELECT Remotekey, posuffix FROM #lastmylist2_po;
                
                DECLARE @po26_Remotekey NVARCHAR(50), @po26_posuffix NVARCHAR(50);
                
                OPEN po26_cursor;
                FETCH NEXT FROM po26_cursor INTO @po26_Remotekey, @po26_posuffix;
                
                WHILE @@FETCH_STATUS = 0
                BEGIN
                    -- Find order in ordhdr
                    IF EXISTS (
                        SELECT 1 
                        FROM irms_2_5_2.dbo.ordhdr 
                        WHERE order_ = @po26_Remotekey 
                          AND order_suffix = @po26_posuffix
                    )
                    BEGIN
                        -- Get order ID
                        DECLARE @order_id INT;
                        
                        SELECT TOP 1 @order_id = id
                        FROM  irms_2_5_2.dbo.ordhdr 
                        WHERE order_ = @po26_Remotekey 
                          AND order_suffix = @po26_posuffix;
                        
                        -- Check for PoClose records
                        IF EXISTS (
                            SELECT 1 
                            FROM PoCloseRequired
                            WHERE PoCloseid = @order_id
                            HAVING COUNT(*) > 1
                        )
                        BEGIN
                            -- Find specific charge (ChargeId = 9)
                            IF EXISTS (
                                SELECT 1 
                                FROM PoCloseRequired
                                WHERE PoCloseid = @order_id
                                  AND PoCloseChargeId = 9
                            )
                            BEGIN
                                -- Get rate from PoClose
                                DECLARE @po_rate DECIMAL(18,6);
                                
                                SELECT TOP 1 @po_rate = PoCloseRate
                                FROM PoCloseRequired
                                WHERE PoCloseid = @order_id
                                  AND PoCloseChargeId = 9;
                                
                                -- Apply HR/HHR adjustments if needed
                                IF @po_rate <> 0 AND (UPPER(@UnitCode) = 'HR' OR UPPER(@UnitCode) = 'HHR')
                                BEGIN
                                    -- CORRECTION: Explicitly set hour increment
                                    SET @hour_increment = CASE @SettingBaseNew1
                                        WHEN 1 THEN 15
                                        WHEN 2 THEN 30
                                        WHEN 3 THEN 1
                                        ELSE 15
                                    END;
                                    
                                    -- Call GetQuantity function
                                    SET @po_rate = dbo.GetQuantity('HR', @hour_increment, @SettingBaseNew3, @po_rate);
                                END
                                
                                -- Calculate guid
                                DECLARE @po_guid DECIMAL(18,6);
                                SET @po_guid = @RateAmount * @po_rate;
                                
                                -- Apply min/max constraints
                                IF @SettingMax > 0 AND @po_guid > @SettingMax
                                    SET @po_guid = @SettingMax;
                                
                                IF @SettingMin > 0 AND @po_guid < @SettingMin
                                    SET @po_guid = @SettingMin;
                                
                                -- Insert into final result
                                INSERT INTO #mylistfinal (
                                    extdcost, wh_num, co_num, substat_code, transmission,
                                    action_code, cc_type, oldunitcost, unitcost, fromdatetime,
                                    po_number, po_suffix, quantity, sugg_qty, guid,
                                    case_qtyitem, box_qtyitem
                                )
                                VALUES (
                                    @RateAmount, @whnum, @conum, @RateDescId, @SettingId,
                                    @UnitCode, @UnitCode, @SettingMin, @RateAmount, @ChargeID,
                                    @po26_Remotekey, @po26_posuffix, @po_rate, @po_rate, @po_guid,
                                    0, 0
                                );
                            END
                        END
                        ELSE IF EXISTS (
                            SELECT 1 
                            FROM PoCloseRequired
                            WHERE PoCloseid = @order_id
                        )
                        BEGIN
                            -- Get single rate from PoClose
                            DECLARE @single_rate DECIMAL(18,6);
                            
                            SELECT TOP 1 @single_rate = PoCloseRate
                            FROM PoCloseRequired
                            WHERE PoCloseid = @order_id;
                            
                            -- Apply HR/HHR adjustments if needed
                            IF @single_rate <> 0 AND (UPPER(@UnitCode) = 'HR' OR UPPER(@UnitCode) = 'HHR')
                            BEGIN
                                -- CORRECTION: Explicitly set hour increment
                                SET @hour_increment = CASE @SettingBaseNew1
                                    WHEN 1 THEN 15
                                    WHEN 2 THEN 30
                                    WHEN 3 THEN 1
                                    ELSE 15
                                END;
                                
                                -- Call GetQuantity function
                                SET @single_rate = dbo.GetQuantity('HR', @hour_increment, @SettingBaseNew3, @single_rate);
                            END
                            
                            -- Calculate guid
                            DECLARE @single_guid DECIMAL(18,6);
                            SET @single_guid = @RateAmount * @single_rate;
                            
                            -- Apply min/max constraints
                            IF @SettingMax > 0 AND @single_guid > @SettingMax
                                SET @single_guid = @SettingMax;
                            
                            IF @SettingMin > 0 AND @single_guid < @SettingMin
                                SET @single_guid = @SettingMin;
                            
                            -- Insert into final result
                            INSERT INTO #mylistfinal (
                                extdcost, wh_num, co_num, substat_code, transmission,
                                action_code, cc_type, oldunitcost, unitcost, fromdatetime,
                                po_number, po_suffix, quantity, sugg_qty, guid,
                                case_qtyitem, box_qtyitem
                            )
                            VALUES (
                                @RateAmount, @whnum, @conum, @RateDescId, @SettingId,
                                @UnitCode, @UnitCode, @SettingMin, @RateAmount, @ChargeID,
                                @po26_Remotekey, @po26_posuffix, @single_rate, @single_rate, @single_guid,
                                0, 0
                            );
                        END
                    END
                    
                    FETCH NEXT FROM po26_cursor INTO @po26_Remotekey, @po26_posuffix;
                END
                
                CLOSE po26_cursor;
                DEALLOCATE po26_cursor;
            END
        END
        ELSE IF @TypeCalculate = 26 AND @CalculRate <> 30
        BEGIN
            -- Handle TypeCalculate = 26 with non-30 CalculRate
            IF OBJECT_ID('tempdb..#lastmylist2_all') IS NOT NULL 
                DROP TABLE #lastmylist2_all;
            
            -- Base grouping
            CREATE TABLE #lastmylist2_all (
                Remotekey NVARCHAR(50),
                posuffix NVARCHAR(50),
                absnum NVARCHAR(50),
                empnum NVARCHAR(50),
                Total DECIMAL(18,6),
                bin_num NVARCHAR(50)
            );
            
            -- Adjust grouping based on CalculRate
            IF @CalculRate = 12
            BEGIN
                INSERT INTO #lastmylist2_all
                SELECT 
                    po_number AS Remotekey, 
                    po_suffix AS posuffix, 
                    abs_num AS absnum, 
                    emp_num AS empnum,
                    SUM(quantity) AS Total,
                    bin_num
                FROM #mylistfinal2
                WHERE quantity <> 0 
                  AND abs_num IS NOT NULL 
                  AND (doc_id <> 'S' OR doc_id IS NULL)
                GROUP BY po_number, po_suffix, abs_num, emp_num, bin_num
                ORDER BY po_number;
            END
            ELSE
            BEGIN
                INSERT INTO #lastmylist2_all
                SELECT 
                    po_number AS Remotekey, 
                    po_suffix AS posuffix, 
                    abs_num AS absnum, 
                    emp_num AS empnum,
                    SUM(quantity) AS Total,
                    NULL
                FROM #mylistfinal2
                WHERE quantity <> 0 
                  AND abs_num IS NOT NULL 
                  AND (doc_id <> 'S' OR doc_id IS NULL)
                GROUP BY po_number, po_suffix, abs_num, emp_num
                ORDER BY po_number;
            END

            -- Special handling for SplitQty <> 0
            IF @SplitQty <> 0
            BEGIN
                -- Create temp table for date-based grouping
                IF OBJECT_ID('tempdb..#lastmylist22') IS NOT NULL 
                    DROP TABLE #lastmylist22;
                
                CREATE TABLE #lastmylist22 (
                    Remotekey NVARCHAR(50),
                    posuffix NVARCHAR(50),
                    absnum NVARCHAR(50),
                    empnum NVARCHAR(50),
                    datetime2 DATETIME,
                    Total DECIMAL(18,6)
                );
                
                -- Group by date_time2
                INSERT INTO #lastmylist22
                SELECT 
                    po_number AS Remotekey, 
                    po_suffix AS posuffix, 
                    abs_num AS absnum, 
                    emp_num AS empnum,
                    date_time2,
                    SUM(quantity) AS Total
                FROM #mylistfinal2
                WHERE quantity <> 0 
                  AND abs_num IS NOT NULL
                GROUP BY po_number, po_suffix, abs_num, emp_num, date_time2;
                
                -- Process each grouped item
                DECLARE dt_cursor CURSOR FOR
                    SELECT Remotekey, posuffix, absnum, empnum, datetime2, Total
                    FROM #lastmylist22;
                
                DECLARE 
                    @dt_Remotekey NVARCHAR(50),
                    @dt_posuffix NVARCHAR(50),
                    @dt_absnum NVARCHAR(50),
                    @dt_empnum NVARCHAR(50),
                    @dt_datetime2 DATETIME,
                    @dt_Total DECIMAL(18,6),
                    @wdatt DATETIME;
                
                OPEN dt_cursor;
                FETCH NEXT FROM dt_cursor INTO 
                    @dt_Remotekey, @dt_posuffix, @dt_absnum, @dt_empnum, @dt_datetime2, @dt_Total;
                
                WHILE @@FETCH_STATUS = 0
                BEGIN
                    -- Get transaction date
                    SET @wdatt = GETDATE();
                    
                    -- CORRECTION: Parse date properly
                    SELECT TOP 1 @wdatt = 
                        TRY_CONVERT(DATETIME, 
                            SUBSTRING(date_time, 1, 4) + '-' + 
                            SUBSTRING(date_time, 5, 2) + '-' + 
                            SUBSTRING(date_time, 7, 2)
                        )
                    FROM #mylistfinal2
                    WHERE po_number = @dt_Remotekey 
                      AND po_suffix = @dt_posuffix 
                      AND trans_type = 'RC';
                    
                    -- Initialize quantity
                    SET @newtotal = @dt_Total;
                    
                    -- Skip certain items
                    IF UPPER(LTRIM(RTRIM(@dt_empnum))) = 'CONT' SET @newtotal = 0;
                    IF @dt_absnum = 'Container' SET @newtotal = 0;
                    
                    -- Update tracking variables
                    IF @calzala = 0
                    BEGIN
                        SET @wponumber = @dt_Remotekey;
                        SET @wposuffix = @dt_posuffix;
                        SET @empnum = ISNULL(@dt_empnum, '');
                        SET @calzala = 1;
                    END
                    
                    IF @wponumber <> @dt_Remotekey OR @wposuffix <> @dt_posuffix
                    BEGIN
                        DELETE FROM #palletidlist;
                    END
                    
                    IF @wponumber <> @dt_Remotekey OR @wposuffix <> @dt_posuffix OR @empnum <> ISNULL(@dt_empnum, '')
                    BEGIN
                        SET @wponumber = @dt_Remotekey;
                        SET @wposuffix = @dt_posuffix;
                        SET @empnum = ISNULL(@dt_empnum, '');
                        SET @calzala = 1;
                    END
                    
                    -- Initialize quantity
                    SET @newquantity2 = @newtotal;
                    
                    -- Get PalletId from Rateby
                    SELECT @PalletId = PalletId 
                    FROM Rateby
                    WHERE RatebyId = @RatebyId;
                    
                    IF @PalletId = 1
                    BEGIN
                        SET @calzala = @calzala + 1;
                        
                        -- Process pallets
                        IF OBJECT_ID('tempdb..#withoutgroup_dt') IS NOT NULL 
                            DROP TABLE #withoutgroup_dt;
                        
                        -- Get pallet data filtering out excluded abs_nums
                        SELECT m.*
                        INTO #withoutgroup_dt
                        FROM #mylistpaletid m
                        WHERE m.co_num = @conum 
                          AND m.wh_num = @whnum 
                          AND m.po_number = @dt_Remotekey 
                          AND m.po_suffix = @dt_posuffix
                          AND UPPER(m.abs_num) = UPPER(@dt_absnum)
                          AND m.trans_type = 'RE'
                          AND NOT EXISTS (
                              SELECT 1 
                              FROM #takeoff t
                              WHERE UPPER(m.abs_num) = UPPER(t.AbsnumName)
                          );
                        
                        -- Group by pallet_id
                        IF OBJECT_ID('tempdb..#lastgroup_dt') IS NOT NULL 
                            DROP TABLE #lastgroup_dt;
                        
                        SELECT 
                            pallet_id AS palettid,
                            SUM(quantity) AS Total9
                        INTO #lastgroup_dt
                        FROM #withoutgroup_dt
                        WHERE UPPER(abs_num) = UPPER(@dt_absnum)
                        GROUP BY pallet_id;
                        
                        -- Process each pallet
                        SET @newtotal = 0;
                        
                        DECLARE pallet_dt_cursor CURSOR FOR
                            SELECT palettid FROM #lastgroup_dt;
                        
                        DECLARE @pallet_dt_id NVARCHAR(50);
                        
                        OPEN pallet_dt_cursor;
                        FETCH NEXT FROM pallet_dt_cursor INTO @pallet_dt_id;
                        
                        WHILE @@FETCH_STATUS = 0
                        BEGIN
                            -- Check if already in palletidlist
                            IF NOT EXISTS (SELECT 1 FROM #palletidlist WHERE palletid = @pallet_dt_id)
                            BEGIN
                                -- Add to palletidlist
                                INSERT INTO #palletidlist (palletid) VALUES (@pallet_dt_id);
                                
                                -- Increment newtotal
                                SET @newtotal = @newtotal + 1;
                                SET @newquantity2 = @newtotal;
                            END
                            
                            FETCH NEXT FROM pallet_dt_cursor INTO @pallet_dt_id;
                        END
                        
                        CLOSE pallet_dt_cursor;
                        DEALLOCATE pallet_dt_cursor;
                    END
                    
                    -- Get item information for calculations
                    DECLARE @dt_PalletQty DECIMAL(18,6),
                            @dt_Weight DECIMAL(18,6),
                            @dt_CaseQty DECIMAL(18,6),
                            @dt_BoxQty DECIMAL(18,6);
                    
                    SELECT TOP 1 
                        @dt_PalletQty = pallet_qty,
                        @dt_Weight = weight,
                        @dt_CaseQty = case_qty,
                        @dt_BoxQty = box_qty
                    FROM irms_2_5_2.dbo.item
                    WHERE UPPER(abs_num) = UPPER(@dt_absnum)
                      AND wh_num = @whnum;
                    
                    -- CORRECTION: Implement proper CalculRateFore2 logic
                    IF @CalculRate = 2
                    BEGIN
                        IF @dt_PalletQty > 0
                            SET @newtotal = FLOOR(@newtotal / @dt_PalletQty);
                        ELSE
                            SET @newtotal = @newtotal;
                    END
                    ELSE IF @CalculRate = 3
                    BEGIN
                        IF @dt_CaseQty > 0
                            SET @newtotal = FLOOR(@newtotal / @dt_CaseQty);
                        ELSE
                            SET @newtotal = @newtotal;
                    END
                    ELSE IF @CalculRate = 4
                    BEGIN
                        IF @dt_BoxQty > 0
                            SET @newtotal = FLOOR(@newtotal / @dt_BoxQty);
                        ELSE
                            SET @newtotal = @newtotal;
                    END
                    
                    -- Update newRateamount based on date/SplitQty
                    DECLARE @newRateamount DECIMAL(18,6) = @RateAmount;
                    
                    BEGIN TRY
                        -- CORRECTION: Proper SplitQty handling
                        IF @SplitQty < DAY(@wdatt)
                        BEGIN
                            IF @TypeCalculate IN (39, 50, 51)
                            BEGIN
                                IF DAY(@wdatt) >= 16
                                    SET @newRateamount = @newRateamount / 2;
                            END
                        END
                    END TRY
                    BEGIN CATCH
                        SET @newRateamount = @RateAmount;
                    END CATCH
                    
                    -- Apply HR/HHR adjustments if needed
                    IF @newquantity2 <> 0 AND (UPPER(@UnitCode) = 'HR' OR UPPER(@UnitCode) = 'HHR')
                    BEGIN
                        -- CORRECTION: Explicitly set hour increment
                        SET @hour_increment = CASE @SettingBaseNew1
                            WHEN 1 THEN 15
                            WHEN 2 THEN 30
                            WHEN 3 THEN 1
                            ELSE 15
                        END;
                        
                        -- Call GetQuantity function
                        SET @newquantity2 = dbo.GetQuantity('HR', @hour_increment, @SettingBaseNew3, @newquantity2);
                    END
                    
                    -- Get group rate if applicable
                    BEGIN TRY
                        IF @ForGroup = 1
                        BEGIN
                            SELECT TOP 1 @groupRate = GroupRate
                            FROM GroupItem
                            WHERE Conum = @conum 
                              AND Whnum = @whnum 
                              AND RateDescId = @RateDescId 
                              AND LTRIM(RTRIM(GroupName)) = LTRIM(RTRIM(@empnum))
                              AND KindId = @inout;
                            
                            IF @@ROWCOUNT > 0
                                SET @RateAmount = @groupRate;
                        END
                    END TRY
                    BEGIN CATCH
                        IF LEN(LTRIM(RTRIM(@empnum))) > 0
                        BEGIN
                            SET @RateAmount = 0;
                            SET @SettingMin = 0;
                        END
                    END CATCH
                    
                    -- Insert into final result
                    INSERT INTO #mylistfinal (
                        wh_num, co_num, substat_code, abs_num, transmission,
                        oldunitcost, unitcost, fromdatetime, po_number, po_suffix,
                        extdcost, quantity, sugg_qty, guid, doc_id,
                        case_qtyitem, box_qtyitem, emp_num, result_msg
                    )
                    VALUES (
                        @whnum, @conum, @RateDescId, @dt_absnum, @SettingId,
                        @SettingMin, @newRateamount, @ChargeID, @dt_Remotekey, @dt_posuffix,
                        @newRateamount * @newquantity2, @newtotal, @newtotal, 
                        -- CORRECTION: Proper guid calculation with min/max constraints
                        CASE
                            WHEN @newRateamount * @newquantity2 > @SettingMax AND @SettingMax <> 0 THEN @SettingMax
                            WHEN @newRateamount * @newquantity2 < @SettingMin AND @SettingMin <> 0 THEN @SettingMin
                            ELSE @newRateamount * @newquantity2
                        END,
                        @NameAbrg, 0, 0, @empnum, @dt_Remotekey + '-' + @dt_posuffix
                    );
                    
                    FETCH NEXT FROM dt_cursor INTO 
                        @dt_Remotekey, @dt_posuffix, @dt_absnum, @dt_empnum, @dt_datetime2, @dt_Total;
                END
                
                CLOSE dt_cursor;
                DEALLOCATE dt_cursor;
            END
            ELSE -- Standard processing (SplitQty = 0)
            BEGIN
                -- Clear palletidlist
                DELETE FROM #palletidlist;
                
                -- Process each item
                DECLARE item_all_cursor CURSOR FOR 
                    SELECT Remotekey, posuffix, absnum, empnum, Total 
                    FROM #lastmylist2_all;
                
                DECLARE 
                    @item_all_Remotekey NVARCHAR(50),
                    @item_all_posuffix NVARCHAR(50),
                    @item_all_absnum NVARCHAR(50),
                    @item_all_empnum NVARCHAR(50),
                    @item_all_Total DECIMAL(18,6);
                
                OPEN item_all_cursor;
                FETCH NEXT FROM item_all_cursor INTO 
                    @item_all_Remotekey, @item_all_posuffix, @item_all_absnum, @item_all_empnum, @item_all_Total;
                
                WHILE @@FETCH_STATUS = 0
                BEGIN
                    SET @forflat = @forflat + 1;
                    SET @newtotal = @item_all_Total;
                    
                    -- Update rates
                    SELECT TOP 1 @RateAmount = RateAmount 
                    FROM SettingRate 
                    WHERE SettingId = @SettingId;
                    
                    -- Update tracking variables
                    IF @wponumber <> @item_all_Remotekey OR @wposuffix <> @item_all_posuffix
                    BEGIN
                        DELETE FROM #palletidlist;
                    END
                    
                    IF @calzala = 0
                    BEGIN
                        SET @wponumber = @item_all_Remotekey;
                        SET @wposuffix = @item_all_posuffix;
                        SET @empnum = ISNULL(@item_all_empnum, '');
                        SET @calzala = 1;
                    END
                    
                    IF @wponumber <> @item_all_Remotekey OR @wposuffix <> @item_all_posuffix OR @empnum <> ISNULL(@item_all_empnum, '')
                    BEGIN
                        SET @wponumber = @item_all_Remotekey;
                        SET @wposuffix = @item_all_posuffix;
                        SET @empnum = ISNULL(@item_all_empnum, '');
                        SET @calzala = 1;
                    END
                    
                    -- Initialize quantity
                    SET @newquantity2 = @newtotal;
                    
                    -- Special handling for CalculRate = 44
                    IF @CalculRate = 44
                    BEGIN
                        IF @forflat = 1
                        BEGIN
                            SET @newquantity2 = 1;
                            SET @newtotal = 1;
                        END
                        ELSE
                        BEGIN
                            SET @newquantity2 = 0;
                            SET @newtotal = 0;
                        END
                    END
                    
                    -- Get PalletId
                    SELECT @PalletId = PalletId 
                    FROM Rateby
                    WHERE RatebyId = @RatebyId;
                    
                    -- Special handling for PalletId = 1
                    IF @PalletId = 1
                    BEGIN
                        SET @calzala = @calzala + 1;
                        
                        -- Inbound vs. Outbound processing is different
                        IF @inout <> 3
                        BEGIN
                            -- Create temp table for pallet processing
                            IF OBJECT_ID('tempdb..#withoutgroup_all') IS NOT NULL 
                                DROP TABLE #withoutgroup_all;
                            
                            -- Get pallet data filtering out excluded abs_nums
                            SELECT m.*
                            INTO #withoutgroup_all
                            FROM #mylistpaletid m
                            WHERE m.co_num = @conum 
                              AND m.wh_num = @whnum 
                              AND m.po_number = @item_all_Remotekey 
                              AND m.po_suffix = @item_all_posuffix
                              AND UPPER(m.abs_num) = UPPER(@item_all_absnum)
                              AND m.trans_type = 'RE'
                              AND NOT EXISTS (
                                  SELECT 1 
                                  FROM #takeoff t
                                  WHERE UPPER(m.abs_num) = UPPER(t.AbsnumName)
                              );
                            
                            -- Group by pallet_id
                            IF OBJECT_ID('tempdb..#lastgroup_all') IS NOT NULL 
                                DROP TABLE #lastgroup_all;
                            
                            SELECT 
                                pallet_id AS palettid,
                                SUM(quantity) AS Total9
                            INTO #lastgroup_all
                            FROM #withoutgroup_all
                            WHERE sugg_qty <> 0 
                              AND UPPER(abs_num) = UPPER(@item_all_absnum)
                            GROUP BY pallet_id;
                            
                            -- Process each pallet
                            SET @newtotal = 0;
                            
                            DECLARE pallet_all_cursor CURSOR FOR
                                SELECT palettid FROM #lastgroup_all;
                            
                            DECLARE @pallet_all_id NVARCHAR(50);
                            
                            OPEN pallet_all_cursor;
                            FETCH NEXT FROM pallet_all_cursor INTO @pallet_all_id;
                            
                            WHILE @@FETCH_STATUS = 0
                            BEGIN
                                -- Check if already in palletidlist
                                IF NOT EXISTS (SELECT 1 FROM #palletidlist WHERE palletid = @pallet_all_id)
                                BEGIN
                                    -- Add to palletidlist
                                    INSERT INTO #palletidlist (palletid) VALUES (@pallet_all_id);
                                    
                                    -- Increment newtotal
                                    SET @newtotal = @newtotal + 1;
                                    SET @newquantity2 = @newtotal;
                                END
                                
                                FETCH NEXT FROM pallet_all_cursor INTO @pallet_all_id;
                            END
                            
                            CLOSE pallet_all_cursor;
                            DEALLOCATE pallet_all_cursor;
                        END
                        ELSE -- Inbound logic
                        BEGIN
                            -- Get item data for calculations
                            DECLARE 
                                @item_all_qty DECIMAL(18,6),
                                @act_all_qty DECIMAL(18,6),
                                @case_all_qtyitem DECIMAL(18,6),
                                @box_all_qtyitem DECIMAL(18,6);
                            
                            SELECT TOP 1 
                                @item_all_qty = item_qty,
                                @act_all_qty = act_qty,
                                @case_all_qtyitem = case_qtyitem,
                                @box_all_qtyitem = box_qtyitem
                            FROM #mylistfinal2
                            WHERE UPPER(abs_num) = UPPER(@item_all_absnum);
                            
                            -- CORRECTION: Implement proper CalculRateFore2 logic
                            IF @CalculRate = 2
                            BEGIN
                                IF @item_all_qty > 0
                                    SET @newtotal = FLOOR(@newquantity2 / @item_all_qty);
                                ELSE
                                    SET @newtotal = @newquantity2;
                            END
                            ELSE IF @CalculRate = 3
                            BEGIN
                                IF @case_all_qtyitem > 0
                                    SET @newtotal = FLOOR(@newquantity2 / @case_all_qtyitem);
                                ELSE
                                    SET @newtotal = @newquantity2;
                            END
                            ELSE IF @CalculRate = 4
                            BEGIN
                                IF @box_all_qtyitem > 0
                                    SET @newtotal = FLOOR(@newquantity2 / @box_all_qtyitem);
                                ELSE
                                    SET @newtotal = @newquantity2;
                            END
                            ELSE -- Default case
                            BEGIN
                                SET @newtotal = @newquantity2;
                            END
                            
                            SET @newquantity2 = @newtotal;
                        END
                    END
                    ELSE -- PalletId <> 1
                    BEGIN
                        -- Standard item processing
                        BEGIN TRY
                            -- Get item details for calculations
                            DECLARE 
                                @item_qty_all DECIMAL(18,6),
                                @act_qty_all DECIMAL(18,6),
                                @case_qtyitem_all DECIMAL(18,6),
                                @box_qtyitem_all DECIMAL(18,6),
                                @newtotal_all DECIMAL(18,6);
                            
                            -- Get the total from mylistfinal2
                            SELECT @newtotal_all = SUM(quantity)
                            FROM #mylistfinal2
                            WHERE quantity <> 0 
                              AND UPPER(abs_num) = UPPER(@item_all_absnum) 
                              AND (doc_id <> 'S' OR doc_id IS NULL)
                              AND po_number = @item_all_Remotekey 
                              AND po_suffix = @item_all_posuffix
                              AND bin_to = 'x';
                            
                            IF @newtotal_all <> 0
                                SET @newtotal = @newtotal_all;
                            
                            -- Get item information
                            SELECT TOP 1 
                                @item_qty_all = item_qty,
                                @act_qty_all = act_qty,
                                @case_qtyitem_all = case_qtyitem,
                                @box_qtyitem_all = box_qtyitem
                            FROM #mylistfinal2
                            WHERE UPPER(abs_num) = UPPER(@item_all_absnum);
                            
                            -- CORRECTION: Implement proper CalculRateFore2 logic
                            IF @CalculRate = 2
                            BEGIN
                                IF @item_qty_all > 0
                                    SET @newtotal = FLOOR(@newtotal_all / @item_qty_all);
                                ELSE
                                    SET @newtotal = @newtotal_all;
                            END
                            ELSE IF @CalculRate = 3
                            BEGIN
                                IF @case_qtyitem_all > 0
                                    SET @newtotal = FLOOR(@newtotal_all / @case_qtyitem_all);
                                ELSE
                                    SET @newtotal = @newtotal_all;
                            END
                            ELSE IF @CalculRate = 4
                            BEGIN
                                IF @box_qtyitem_all > 0
                                    SET @newtotal = FLOOR(@newtotal_all / @box_qtyitem_all);
                                ELSE
                                    SET @newtotal = @newtotal_all;
                            END
                            ELSE -- Default case
                            BEGIN
                                SET @newtotal = @newtotal_all;
                            END
                            
                            SET @newquantity2 = @newtotal;
                            
                            -- Special handling for CalculRate = 44
                            IF @CalculRate = 44
                            BEGIN
                                IF @forflat = 1
                                BEGIN
                                    SET @newtotal = 1;
                                    SET @newquantity2 = 1;
                                END
                                ELSE
                                BEGIN
                                    SET @newtotal = 0;
                                    SET @newquantity2 = 0;
                                END
                            END
                        END TRY
                        BEGIN CATCH
                            SET @newtotal = 0;
                            SET @newquantity2 = 0;
                        END CATCH
                    END
                    
                    -- Get group rate if applicable
                    BEGIN TRY
                        IF @ForGroup = 1
                        BEGIN
                            SELECT TOP 1 @groupRate = GroupRate
                            FROM GroupItem
                            WHERE Conum = @conum 
                              AND Whnum = @whnum 
                              AND RateDescId = @RateDescId 
                              AND LTRIM(RTRIM(GroupName)) = LTRIM(RTRIM(@empnum))
                              AND KindId = @inout;
                            
                            IF @@ROWCOUNT > 0
                                SET @RateAmount = @groupRate;
                        END
                    END TRY
                    BEGIN CATCH
                        IF LEN(LTRIM(RTRIM(@empnum))) > 0
                        BEGIN
                            SET @RateAmount = 0;
                            SET @SettingMin = 0;
                        END
                    END CATCH
                    
                    -- Insert into final result
                    INSERT INTO #mylistfinal (
                        wh_num, co_num, substat_code, abs_num, oldunitcost,
                        transmission, unitcost, fromdatetime, po_number, po_suffix,
                        extdcost, quantity, sugg_qty, guid, doc_id,
                        case_qtyitem, box_qtyitem, emp_num, result_msg, cc_type
                    )
                    VALUES (
                        @whnum, @conum, @RateDescId, @item_all_absnum, @SettingMin,
                        @SettingId, @RateAmount, @ChargeID, @item_all_Remotekey, @item_all_posuffix,
                        @RateAmount * @newquantity2, @newtotal, @newtotal, 
                        -- CORRECTION: Proper guid calculation with min/max constraints
                        CASE
                            WHEN @RateAmount * @newquantity2 < @SettingMin AND @SettingMin <> 0 THEN @SettingMin
                            WHEN @RateAmount * @newquantity2 > @SettingMax AND @SettingMax <> 0 THEN @SettingMax
                            ELSE @RateAmount * @newquantity2
                        END,
                        @NameAbrg, 0, 0, @empnum, @item_all_Remotekey + '-' + @item_all_posuffix, @UnitCode
                    );
                    
                    FETCH NEXT FROM item_all_cursor INTO 
                        @item_all_Remotekey, @item_all_posuffix, @item_all_absnum, @item_all_empnum, @item_all_Total;
                END
                
                CLOSE item_all_cursor;
                DEALLOCATE item_all_cursor;
            END
        END
    END
    
    FETCH NEXT FROM rate_cursor INTO 
        @SettingId, @RateDescId, @RateAmount, @SettingMin, @SettingMax,
        @UnitCode, @ChargeID, @SplitQty, @RatebyId, @TypeCalculate,
        @ForGroup, @NameAbrg;
END

CLOSE rate_cursor;
DEALLOCATE rate_cursor;

-- Update mylist from mylistfinal if records exist (matching the C# code)
IF EXISTS (SELECT 1 FROM #mylistfinal)
BEGIN
    DELETE FROM #mylist;
    INSERT INTO #mylist
    SELECT * FROM #mylistfinal;
END

-- At this point, #mylist contains the final calculated results, matching the C# implementation
-- The calling code should use this for further processing

--select * from #mylist;
-----------------------------------------------------------rt1 ends------------------------------------------------------------------

    -- RT12 section (RatebyQty = 2)
    SELECT
        po_number AS Remotekey,
        po_suffix AS posuffix,
        SUM(guid) AS Total
    INTO #LastMyList12
    FROM #mylist
    WHERE guid != 0 AND (doc_id = 'H' OR doc_id = 'S') AND po_number != ''
    GROUP BY po_number, po_suffix;

    -- For inout = 2 (Outbound)
    IF @inout = 2
    BEGIN
        SELECT
            po_number AS Remotekey,
            po_suffix AS posuffix,
            SUM(guid) AS Total
        INTO #LastMyList123
        FROM #mylist
        WHERE guid != 0 AND doc_id = 'H'
        GROUP BY po_number, po_suffix;
    END

    -- Process RT12
    INSERT INTO #mylistfinal (
        substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
        fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
        act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
        extdcost, doc_id, guid, cc_type
    )
    SELECT
        rt.RateDescId AS substat_code,
        @whnum AS wh_num,
        @conum AS co_num,
        rt.RateAmount AS oldunitcost,
        rt.RateAmount AS unitcost,
        rt.SettingId AS transmission,
        rt.UnitCode AS action_code,
        rt.ChargeID AS fromdatetime,
        lm.Remotekey AS po_number,
        lm.posuffix AS po_suffix,
        '' AS abs_num,
        0 AS po_line,
        '' AS lot,
        '' AS row_status,
        0 AS sugg_qty,
        0 AS act_qty,
        '' AS item_type,
        @empnum AS emp_num,
        lm.Remotekey + '-' + lm.posuffix AS result_msg,
        0 AS case_qtyitem,
        0 AS box_qtyitem,
        0 AS item_qty,
        lm.Total AS quantity,
        CASE
            WHEN rt.RateAmount > lm.Total THEN rt.RateAmount - lm.Total
            ELSE 0
        END AS extdcost,
        'S' AS doc_id,
        CASE
            WHEN rt.RateAmount > lm.Total THEN rt.RateAmount - lm.Total
            ELSE 0
        END AS guid,
        rt.UnitCode AS cc_type
    FROM #rt12 rt
    JOIN #LastMyList123 lm ON 1=1
    JOIN Rateby rb ON rt.RatebyId = rb.RatebyId
    WHERE rb.CalculRate != 31
    AND (
        (lm.Total < rt.RateAmount OR lm.Total < rt.SettingMax)
    );

    -- RT1515 section (RatebyQty = 6)
    SELECT
        po_number AS Remotekey,
        po_suffix AS posuffix,
        SUM(sugg_qty) AS Total,
        SUM(quantity) AS Total1
    INTO #Wunloadf1515
    FROM #mylist
    GROUP BY po_number, po_suffix;

    -- Process RT1515
    INSERT INTO #mylistfinal (
        substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
        fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
        act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
        extdcost, doc_id, guid, cc_type
    )
    SELECT
        rt.RateDescId AS substat_code,
        @whnum AS wh_num,
        @conum AS co_num,
        rt.SettingMin AS oldunitcost,
        rt.RateAmount AS unitcost,
        rt.SettingId AS transmission,
        rt.UnitCode AS action_code,
        rt.ChargeID AS fromdatetime,
        wu.Remotekey AS po_number,
        wu.posuffix AS po_suffix,
        '' AS abs_num,
        0 AS po_line,
        '' AS lot,
        '' AS row_status,
        wu.Total + wu.Total1 AS sugg_qty,
        0 AS act_qty,
        '' AS item_type,
        @empnum AS emp_num,
        wu.Remotekey + '-' + wu.posuffix AS result_msg,
        0 AS case_qtyitem,
        0 AS box_qtyitem,
        0 AS item_qty,
        ROUND(CONVERT(DECIMAL(18,6), (wu.Total + wu.Total1) * 0.005), 0) AS quantity,
        rt.RateAmount * ROUND(CONVERT(DECIMAL(18,6), (wu.Total + wu.Total1) * 0.005), 0) AS extdcost,
        rt.NameAbrg AS doc_id,
        CASE
            WHEN rt.RateAmount * ROUND(CONVERT(DECIMAL(18,6), (wu.Total + wu.Total1) * 0.005), 0) > rt.SettingMax AND rt.SettingMax != 0 
            THEN rt.SettingMax
            ELSE rt.RateAmount * ROUND(CONVERT(DECIMAL(18,6), (wu.Total + wu.Total1) * 0.005), 0)
        END AS guid,
        rt.UnitCode AS cc_type
    FROM #rt1515 rt
    JOIN #Wunloadf1515 wu ON 1=1
    JOIN Rateby rb ON rt.RatebyId = rb.RatebyId
    WHERE rb.CalculRate != 31;

    -- RT15150 section (RatebyQty = 7)
    DECLARE @sql_forflat15150 INT;
    DECLARE @hincrem_local INT, @hourlymin_local INT;

    -- Get customer settings for HR/HHR
    SELECT TOP 1
        @SettingBaseNew1 = sc.SettingBaseNew1,
        @SettingBaseNew3 = sc.SettingBaseNew3
    FROM SettingCustomer sc
    WHERE sc.SettingBaseConum = @CoNum AND sc.SettingBaseWhnum = @WhNum;

    -- Set default empnum
    SET @empnum = '0';

	DECLARE @search_calculrate INT,@search_RatebyNAme NVARCHAR(50),@wunload_Remotekey NVARCHAR(50),@wunload_posuffix NVARCHAR(50);

    -- Process RT15150
    DECLARE rt15150_cursor CURSOR LOCAL FAST_FORWARD FOR
        SELECT SettingId, RatebyId, RateDescId, RateAmount, SettingMin, SettingMax, UnitCode, ChargeID, NameAbrg
        FROM #rt15150;

    OPEN rt15150_cursor;
    FETCH NEXT FROM rt15150_cursor 
    INTO @rt_SettingId, @rt_RatebyId, @rt_RateDescId, @rt_RateAmount, @rt_SettingMin, @rt_SettingMax, 
         @rt_UnitCode, @rt_ChargeID, @rt_NameAbrg;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Get Rateby information
        SELECT TOP 1
            @search_CalculRate = rb.CalculRate,
            @search_RatebyName = rb.RatebyName
        FROM Rateby rb
        WHERE rb.RatebyId = @rt_RatebyId;

        IF @search_CalculRate IS NOT NULL AND @search_CalculRate != 31
        BEGIN
            SET @sql_forflat15150 = 0;

            -- Create #wunloadf table
            IF OBJECT_ID('tempdb..#wunloadf') IS NOT NULL DROP TABLE #wunloadf;
            
            SELECT
                c.po_number AS Remotekey,
                c.po_suffix AS posuffix,
                1 AS Total
            INTO #wunloadf
            FROM #mylist c
            GROUP BY c.po_number, c.po_suffix;

			
            -- Process each PO
            DECLARE wunloadf_cursor CURSOR LOCAL FAST_FORWARD FOR
                SELECT Remotekey, posuffix FROM #wunloadf;

            OPEN wunloadf_cursor;
            FETCH NEXT FROM wunloadf_cursor INTO @wunload_Remotekey, @wunload_posuffix;

            WHILE @@FETCH_STATUS = 0
            BEGIN
                SET @sql_forflat15150 = @sql_forflat15150 + 1;

                -- Initialize red variables
                SET @red_wh_num = @WhNum;
                SET @red_co_num = @CoNum;
                SET @red_substat_code = @rt_RateDescId;
                SET @red_abs_num = '';
                SET @red_oldunitcost = @rt_SettingMin;
                SET @red_action_code = @rt_UnitCode;
                SET @red_cc_type = @rt_UnitCode;
                SET @red_transmission = @rt_SettingId;
                SET @red_unitcost = @rt_RateAmount;
                SET @red_fromdatetime = @rt_ChargeID;
                SET @red_po_number = @wunload_Remotekey;
                SET @red_po_suffix = @wunload_posuffix;
                SET @red_sugg_qty = 1;
                SET @red_quantity = 0;
                SET @red_doc_id = @rt_NameAbrg;
                SET @red_case_qtyitem = 0;
                SET @red_box_qtyitem = 0;
                SET @red_emp_num = @empnum;
                SET @red_result_msg = @wunload_Remotekey + '-' + @wunload_posuffix;

                -- Set quantity based on CalculRate
                IF @search_CalculRate = 30 OR @search_CalculRate = 97
                BEGIN
                    SET @findco_PoCloseRate = NULL;
                    
                    SELECT TOP 1 @findco_PoCloseRate = pcr.PoCloseRate
                    FROM PoCloseRequired pcr
                    WHERE pcr.Poconum = @CoNum AND pcr.Powhnum = @WhNum
                      AND pcr.Poponumber = @wunload_Remotekey AND pcr.Posuffix = @wunload_posuffix
                      AND pcr.PoCloseDescId = @rt_RateDescId;

                    IF @findco_PoCloseRate IS NOT NULL
                    BEGIN
                        SET @red_quantity = @findco_PoCloseRate;
                        SET @red_sugg_qty = @findco_PoCloseRate;
                    END
                    ELSE
                    BEGIN
                        SET @red_quantity = 0;
                        SET @red_sugg_qty = 0;
                    END
                END

				
                -- Special handling for CalculRate = 44
                IF @search_CalculRate = 44 AND @search_RatebyName != 'Flat'
                BEGIN
                    IF @sql_forflat15150 = 1
                    BEGIN
                        SET @red_quantity = 1;
                    END
                    ELSE
                    BEGIN
                        SET @red_quantity = 0;
                    END
                END

                -- HR/HHR calculation
                IF UPPER(@rt_UnitCode) = 'HR' OR UPPER(@rt_UnitCode) = 'HHR'
                BEGIN
                    IF @SettingBaseNew1 IS NOT NULL
                    BEGIN
                        IF @SettingBaseNew1 = 1 SET @hincrem_local = 15;
                        ELSE IF @SettingBaseNew1 = 2 SET @hincrem_local = 30;
                        ELSE IF @SettingBaseNew1 = 3 SET @hincrem_local = 1;
                        ELSE SET @hincrem_local = 15;

                        SET @hourlymin_local = ISNULL(@SettingBaseNew3, 0);
                        SET @red_quantity = dbo.Getquantity('HR', @hincrem_local, @hourlymin_local, @red_quantity);
                    END
                END
				
                SET @red_guid = @rt_RateAmount * @red_quantity;
                SET @red_extdcost = @red_guid;

                -- Apply min/max constraints
                IF @red_guid > @rt_SettingMax AND @rt_SettingMax <> 0
                BEGIN
                    SET @red_guid = @rt_SettingMax;
                END
                
                IF @red_guid < @rt_SettingMin AND @rt_SettingMin <> 0
                BEGIN
                    SET @red_guid = @rt_SettingMin;
                END

				--DECLARE @search_calculrate INT;
                -- Carrier check for CalculRate = 97 (Outbound only)
                IF @inout = 2 AND @search_CalculRate = 97
                BEGIN
                    -- Check if carrier is parcel carrier
                    IF EXISTS (
                        SELECT 1 FROM irms_2_5_2.dbo.ordhdr oh 
                        WHERE oh.co_num = @CoNum AND oh.wh_num = @WhNum
                          AND oh.order_ = @red_po_number AND oh.order_suffix = @red_po_suffix
                          AND UPPER(oh.carrier) IN ('FEPL', 'USPS', 'UPS')
                    )
                    BEGIN
                        SET @red_sugg_qty = 0;
                        SET @red_quantity = 0;
                        SET @red_guid = 0;
                        SET @red_extdcost = 0;
                    END
                END

				--DECLARE @red_fromdatetime NVARCHAR(50);
                -- Insert the record
                INSERT INTO #mylistfinal (
                    wh_num, co_num, substat_code, abs_num, oldunitcost, action_code, cc_type,
                    transmission, unitcost, fromdatetime, po_number, po_suffix, sugg_qty, quantity,
                    guid, doc_id, extdcost, case_qtyitem, box_qtyitem, emp_num, result_msg
                )
                VALUES (
                    @red_wh_num, @red_co_num, @red_substat_code, @red_abs_num, @red_oldunitcost, @red_action_code, @red_cc_type,
                    @red_transmission, @red_unitcost, @red_fromdatetime, @red_po_number, @red_po_suffix, @red_sugg_qty, @red_quantity,
                    @red_guid, @red_doc_id, @red_extdcost, @red_case_qtyitem, @red_box_qtyitem, @red_emp_num, @red_result_msg
                );

                FETCH NEXT FROM wunloadf_cursor INTO @wunload_Remotekey, @wunload_posuffix;
            END
            
            CLOSE wunloadf_cursor;
            DEALLOCATE wunloadf_cursor;
            
            DROP TABLE IF EXISTS #wunloadf;
        END

        FETCH NEXT FROM rt15150_cursor 
        INTO @rt_SettingId, @rt_RatebyId, @rt_RateDescId, @rt_RateAmount, @rt_SettingMin, @rt_SettingMax, 
             @rt_UnitCode, @rt_ChargeID, @rt_NameAbrg;
    END
    
    CLOSE rt15150_cursor;
    DEALLOCATE rt15150_cursor;

    -- RT1220 section (RatebyQty = 5)
    SELECT SUM(extdcost) AS TotalS, SUM(guid) AS TotalD
    INTO #LastMyList120
    FROM #mylist
    WHERE doc_id = 'S';

    -- Process RT1220
    INSERT INTO #mylistfinal (
        substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
        fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
        act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
        extdcost, doc_id, guid, cc_type
    )
    SELECT
        rt.RateDescId AS substat_code,
        @whnum AS wh_num,
        @conum AS co_num,
        rt.SettingMin AS oldunitcost,
        rt.RateAmount AS unitcost,
        rt.SettingId AS transmission,
        rt.UnitCode AS action_code,
        rt.ChargeID AS fromdatetime,
        '' AS po_number,
        '' AS po_suffix,
        '' AS abs_num,
        0 AS po_line,
        '' AS lot,
        '' AS row_status,
        0 AS sugg_qty,
        0 AS act_qty,
        '' AS item_type,
        @empnum AS emp_num,
        '' AS result_msg,
        0 AS case_qtyitem,
        0 AS box_qtyitem,
        0 AS item_qty,
        CASE WHEN ISNULL(lm.TotalD, 0) != 0 THEN lm.TotalD ELSE 1 END AS quantity,
        CASE 
            WHEN ISNULL(lm.TotalD, 0) != 0 THEN 
                CASE WHEN rt.RateAmount - lm.TotalD > 0 THEN rt.RateAmount - lm.TotalD ELSE 0 END
            ELSE rt.RateAmount
        END AS extdcost,
        'S' AS doc_id,
        CASE 
            WHEN ISNULL(lm.TotalD, 0) != 0 THEN 
                CASE WHEN rt.RateAmount - lm.TotalD > 0 THEN rt.RateAmount - lm.TotalD ELSE 0 END
            ELSE rt.RateAmount
        END AS guid,
        rt.UnitCode AS cc_type
    FROM #rt1220 rt
    CROSS JOIN #LastMyList120 lm
    JOIN Rateby rb ON rt.RatebyId = rb.RatebyId
    WHERE rb.CalculRate != 31
    AND (
        CASE 
            WHEN ISNULL(lm.TotalD, 0) != 0 THEN 
                CASE WHEN rt.RateAmount - lm.TotalD > 0 THEN rt.RateAmount - lm.TotalD ELSE 0 END
            ELSE rt.RateAmount
        END <= rt.SettingMax OR rt.SettingMax = 0
    );

    -- RT12200 section (RatebyQty = 25)
    SELECT COUNT(*) AS Count
    INTO #LastMyList12200
    FROM #mylist
    WHERE fromdatetime = '20';

    -- Process RT12200
    INSERT INTO #mylistfinal (
        substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
        fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
        act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
        extdcost, doc_id, guid, cc_type
    )
    SELECT
        rt.RateDescId AS substat_code,
        @whnum AS wh_num,
        @conum AS co_num,
        rt.SettingMin AS oldunitcost,
        rt.RateAmount AS unitcost,
        rt.SettingId AS transmission,
        rt.UnitCode AS action_code,
        rt.ChargeID AS fromdatetime,
        '' AS po_number,
        '' AS po_suffix,
        '' AS abs_num,
        0 AS po_line,
        '' AS lot,
        '' AS row_status,
        0 AS sugg_qty,
        0 AS act_qty,
        '' AS item_type,
        @empnum AS emp_num,
        '' AS result_msg,
        0 AS case_qtyitem,
        0 AS box_qtyitem,
        0 AS item_qty,
        CASE WHEN lm.Count < rt.SettingMin THEN rt.SettingMin - lm.Count ELSE 0 END AS quantity,
        CASE WHEN lm.Count < rt.SettingMin THEN rt.RateAmount * (rt.SettingMin - lm.Count) ELSE 0 END AS extdcost,
        'S' AS doc_id,
        CASE WHEN lm.Count < rt.SettingMin THEN rt.RateAmount * (rt.SettingMin - lm.Count) ELSE 0 END AS guid,
        rt.UnitCode AS cc_type
    FROM #rt12200 rt
    CROSS JOIN #LastMyList12200 lm
    JOIN Rateby rb ON rt.RatebyId = rb.RatebyId
    WHERE rb.CalculRate != 31
    AND lm.Count < rt.SettingMin;

	
IF EXISTS (SELECT 1 FROM #mylistfinal)
BEGIN
    TRUNCATE TABLE #mylist;
    INSERT INTO #mylist (
        substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
        fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
        act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
        extdcost, doc_id, guid, cc_type
    )
    SELECT
        substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
        fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
        act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
        extdcost, doc_id, guid, cc_type
    FROM #mylistfinal;
END



-- Process un120
INSERT INTO #mylistfinal (
    substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
    fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
    act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
    extdcost, doc_id, guid, cc_type
)
SELECT
    rt.RateDescId AS substat_code,
    @whnum AS wh_num,
    @conum AS co_num,
    rt.SettingMin AS oldunitcost,
    rt.RateAmount AS unitcost,
    rt.SettingId AS transmission,
    rt.UnitCode AS action_code,
    rt.ChargeID AS fromdatetime,
    gp.Remotekey AS po_number,
    gp.posuffix AS po_suffix,
    '' AS abs_num,
    0 AS po_line,
    '' AS lot,
    '' AS row_status,
    0 AS sugg_qty,
    0 AS act_qty,
    '' AS item_type,
    @empnum AS emp_num,
    gp.Remotekey + '-' + gp.posuffix AS result_msg,
    0 AS case_qtyitem,
    0 AS box_qtyitem,
    0 AS item_qty,
    pcr.PoCloseRate AS quantity,
    rt.RateAmount * pcr.PoCloseRate AS extdcost,
    rt.NameAbrg AS doc_id,
    CASE
        WHEN rt.RateAmount * pcr.PoCloseRate > rt.SettingMax AND rt.SettingMax != 0 THEN rt.SettingMax
        WHEN rt.RateAmount * pcr.PoCloseRate < rt.SettingMin AND rt.SettingMin != 0 THEN rt.SettingMin
        ELSE rt.RateAmount * pcr.PoCloseRate
    END AS guid,
    rt.UnitCode AS cc_type
FROM #un120 rt
JOIN #groupPonew2 gp ON 1=1
JOIN Rateby rb ON rt.RatebyId = rb.RatebyId
JOIN PoCloseRequired pcr ON pcr.Poconum = @conum
    AND pcr.Powhnum = @whnum
    AND pcr.Poponumber = gp.Remotekey
    AND pcr.Posuffix = gp.posuffix
    AND pcr.PoCloseDescId = rt.RateDescId
WHERE rb.CalculRate = 30;

IF EXISTS (SELECT 1 FROM #mylistfinal)
BEGIN
    TRUNCATE TABLE #mylist;
    INSERT INTO #mylist (
        substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
        fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
        act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
        extdcost, doc_id, guid, cc_type
    )
    SELECT
        substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
        fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
        act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
        extdcost, doc_id, guid, cc_type
    FROM #mylistfinal;
END


-- Create temporary table for groupPonewList
DROP TABLE IF EXISTS #groupPonewList;
SELECT
    po_number AS Remotekey,
    ISNULL(row_status, '') AS Rabrow_status,
    po_suffix AS posuffix,
    SUM(quantity) AS Total
INTO #groupPonewList
FROM #mylist
GROUP BY po_number, po_suffix, ISNULL(row_status, '');

-- Create temporary table for listosd5
DROP TABLE IF EXISTS #listosd5;
SELECT
    po_number,
    po_suffix,
    row_status,
    trans_type
INTO #listosd5
FROM #mylistinvoice
WHERE trans_type = 'RE';

-- Process rt1200 (CalculRate = 30)
INSERT INTO #mylistfinal(
    substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
    fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
    act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
    extdcost, doc_id, guid, cc_type
)
SELECT
    rt.RateDescId AS substat_code,
    @whnum AS wh_num,
    @conum AS co_num,
    rt.SettingMin AS oldunitcost,
    rt.RateAmount AS unitcost,
    rt.SettingId AS transmission,
    rt.UnitCode AS action_code,
    rt.ChargeID AS fromdatetime,
    gp.Remotekey AS po_number,
    gp.posuffix AS po_suffix,
    '' AS abs_num,
    0 AS po_line,
    '' AS lot,
    '' AS row_status,
    ISNULL(pcr.PoCloseRate, 0) AS sugg_qty,
    0 AS act_qty,
    '' AS item_type,
    '0' AS emp_num,
    '' AS result_msg,
    0 AS case_qtyitem,
    0 AS box_qtyitem,
    0 AS item_qty,
    ISNULL(pcr.PoCloseRate, 0) AS quantity,
    rt.RateAmount * ISNULL(pcr.PoCloseRate, 0) AS extdcost,
    rd.NameAbrg AS doc_id,
    CASE
        WHEN rt.RateAmount * ISNULL(pcr.PoCloseRate, 0) > rt.SettingMax AND rt.SettingMax != 0 THEN rt.SettingMax
        WHEN rt.RateAmount * ISNULL(pcr.PoCloseRate, 0) < rt.SettingMin AND rt.SettingMin != 0 THEN rt.SettingMin
        ELSE rt.RateAmount * ISNULL(pcr.PoCloseRate, 0)
    END AS guid,
    rt.UnitCode AS cc_type
FROM #rt1200 rt
JOIN Rateby rb ON rt.RatebyId = rb.RatebyId
CROSS JOIN #groupPonew88 gp
LEFT JOIN PoCloseRequired pcr ON pcr.Poconum = @conum
    AND pcr.Powhnum = @whnum
    AND pcr.Poponumber = gp.Remotekey
    AND pcr.Posuffix = gp.posuffix
    AND pcr.PoCloseDescId = rt.RateDescId
JOIN RateDesc rd ON rd.RateDescId = rt.RateDescId
WHERE rb.CalculRate = 30
AND rt.TypeCalculate <> 42;

-- Process rt1200 (CalculRate = 35)
INSERT INTO #mylistfinal (
    substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
    fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
    act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
    extdcost, doc_id, guid, cc_type
)
SELECT
    rt.RateDescId AS substat_code,
    @whnum AS wh_num,
    @conum AS co_num,
    rt.SettingMin AS oldunitcost,
    rt.RateAmount AS unitcost,
    rt.SettingId AS transmission,
    rt.UnitCode AS action_code,
    rt.ChargeID AS fromdatetime,
    gp.Remotekey AS po_number,
    gp.posuffix AS po_suffix,
    '' AS abs_num,
    0 AS po_line,
    '' AS lot,
    gpl.Rabrow_status AS row_status,
    gpl.Total AS sugg_qty,
    0 AS act_qty,
    '' AS item_type,
    '0' AS emp_num,
    '' AS result_msg,
    0 AS case_qtyitem,
    0 AS box_qtyitem,
    0 AS item_qty,
    CASE
        WHEN rt.TypeCalculate = 42 THEN 
            CASE
                WHEN los.trans_type = 'RE' THEN 1 
                ELSE gpl.Total
            END
        ELSE gpl.Total
    END AS quantity,
    rt.RateAmount * CASE
        WHEN rt.TypeCalculate = 42 THEN
            CASE
                WHEN los.trans_type = 'RE' THEN 1
                ELSE gpl.Total
            END
        ELSE gpl.Total
    END AS extdcost,
    rd.NameAbrg AS doc_id,
    CASE
        WHEN rt.RateAmount * CASE
            WHEN rt.TypeCalculate = 42 THEN
                CASE
                    WHEN los.trans_type = 'RE' THEN 1
                    ELSE gpl.Total
                END
            ELSE gpl.Total
        END > rt.SettingMax AND rt.SettingMax != 0 THEN rt.SettingMax
        WHEN rt.RateAmount * CASE
            WHEN rt.TypeCalculate = 42 THEN
                CASE
                    WHEN los.trans_type = 'RE' THEN 1
                    ELSE gpl.Total
                END
            ELSE gpl.Total
        END < rt.SettingMin AND rt.SettingMin != 0 THEN rt.SettingMin
        ELSE rt.RateAmount * CASE
            WHEN rt.TypeCalculate = 42 THEN
                CASE
                    WHEN los.trans_type = 'RE' THEN 1
                    ELSE gpl.Total
                END
            ELSE gpl.Total
        END
    END AS guid,
    rt.UnitCode AS cc_type
FROM #rt1200 rt
JOIN Rateby rb ON rt.RatebyId = rb.RatebyId
CROSS JOIN #groupPonew88 gp
LEFT JOIN #groupPonewList gpl ON gp.Remotekey = gpl.Remotekey AND gp.posuffix = gpl.posuffix
LEFT JOIN #listosd5 los ON gp.Remotekey = los.po_number AND gp.posuffix = los.po_suffix AND gpl.Rabrow_status = los.row_status
JOIN RateDesc rd ON rd.RateDescId = rt.RateDescId
WHERE rb.CalculRate = 35
AND (@inout != 2 OR rt.TypeCalculate != 42 OR NOT EXISTS (
    SELECT 1 FROM irms_2_5_2.dbo.ordhdr oh 
    WHERE oh.co_num = @conum AND oh.wh_num = @whnum 
    AND oh.order_ = gp.Remotekey AND oh.order_suffix = gp.posuffix
    AND oh.carrier IN ('FEPL', 'USPS', 'UPS')
));

-- Process rt1200 (TypeCalculate = 42)
INSERT INTO #mylistfinal (
    substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
    fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
    act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
    extdcost, doc_id, guid, cc_type
)
SELECT
    rt.RateDescId AS substat_code,
    @whnum AS wh_num,
    @conum AS co_num,
    rt.SettingMin AS oldunitcost,
    rt.RateAmount AS unitcost,
    rt.SettingId AS transmission,
    rt.UnitCode AS action_code,
    rt.ChargeID AS fromdatetime,
    los.po_number AS po_number,
    los.po_suffix AS po_suffix,
    '' AS abs_num,
    0 AS po_line,
    '' AS lot,
    '' AS row_status,
    1 AS sugg_qty,
    0 AS act_qty,
    '' AS item_type,
    '0' AS emp_num,
    '' AS result_msg,
    0 AS case_qtyitem,
    0 AS box_qtyitem,
    0 AS item_qty,
    CASE
        WHEN cs.SettingBasePo = 1 AND los.po_number != gp.Remotekey AND los.po_suffix != gp.posuffix THEN 0
        ELSE 1
    END AS quantity,
    rt.RateAmount * CASE
        WHEN cs.SettingBasePo = 1 AND los.po_number != gp.Remotekey AND los.po_suffix != gp.posuffix THEN 0
        ELSE 1
    END AS extdcost,
    rd.NameAbrg AS doc_id,
    CASE
        WHEN rt.RateAmount * CASE
            WHEN cs.SettingBasePo = 1 AND los.po_number != gp.Remotekey AND los.po_suffix != gp.posuffix THEN 0
            ELSE 1
        END > rt.SettingMax AND rt.SettingMax != 0 THEN rt.SettingMax
        WHEN rt.RateAmount * CASE
            WHEN cs.SettingBasePo = 1 AND los.po_number != gp.Remotekey AND los.po_suffix != gp.posuffix THEN 0
            ELSE 1
        END < rt.SettingMin AND rt.SettingMin != 0 THEN rt.SettingMin
        ELSE rt.RateAmount * CASE
            WHEN cs.SettingBasePo = 1 AND los.po_number != gp.Remotekey AND los.po_suffix != gp.posuffix THEN 0
            ELSE 1
        END
    END AS guid,
    rt.UnitCode AS cc_type
FROM #rt1200 rt
JOIN Rateby rb ON rt.RatebyId = rb.RatebyId
CROSS JOIN #groupPonew88 gp
JOIN #listosd5 los ON gp.Remotekey = los.po_number AND gp.posuffix = los.po_suffix
JOIN SettingCustomer cs ON cs.SettingBaseWhnum = @whnum AND cs.SettingBaseConum = @conum
JOIN RateDesc rd ON rd.RateDescId = rt.RateDescId
WHERE rb.CalculRate = 30
AND rt.TypeCalculate = 42;

-- Assign mylist to mylistfinal if not empty
IF EXISTS (SELECT 1 FROM #mylistfinal)
BEGIN
    TRUNCATE TABLE #mylist;
    INSERT INTO #mylist (
        substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
        fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
        act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
        extdcost, doc_id, guid, cc_type
    )
    SELECT
        substat_code, wh_num, co_num, oldunitcost, unitcost, transmission, action_code,
        fromdatetime, po_number, po_suffix, abs_num, po_line, lot, row_status, sugg_qty,
        act_qty, item_type, emp_num, result_msg, case_qtyitem, box_qtyitem, item_qty, quantity,
        extdcost, doc_id, guid, cc_type
    FROM #mylistfinal;
END


-- Create temporary tables
DROP TABLE IF EXISTS #SettingRateRateby;
SELECT
    so.RatebyId,
    so.co_num,
    so.wh_num,
    so.KindId,
    t.CalculRate,
    so.RateDescId,
    so.SettingMin,
    so.SettingMax,
    so.RateAmount,
    so.UnitCode,
    so.UnitCode AS RatebyUnitCode,
    so.SettingId,
    C.ChargeID
INTO #SettingRateRateby
FROM SettingRate so
JOIN Rateby t ON so.RatebyId = t.RatebyId
LEFT JOIN CHARGENAME C on c.ChargeNameDesc = so.chargename
WHERE so.co_num = @conum
  AND so.wh_num = @whnum
  AND t.CalculRate = 9
  AND so.KindId = @inout;

-- Update mylistfinal for line_sequence 75 and quantity 0
UPDATE #mylistfinal
SET quantity = 888777999
WHERE line_sequence = 75
  AND quantity = 0;

-- Find records with quantity 0
DROP TABLE IF EXISTS #TempRes;
SELECT *
INTO #TempRes
FROM #mylistfinal
WHERE quantity = 0;

-- Update mylistfinal for line_sequence 75 and quantity 888777999
UPDATE #mylistfinal
SET quantity = 0, guid = 0
WHERE line_sequence = 75
  AND quantity = 888777999;

-- Remove records from mylistfinal where release_id != 'N'
DELETE FROM #mylistfinal
WHERE release_id != 'N';

-- Update fromdatetime using ChargeNames
UPDATE mf
SET mf.fromdatetime = cn.ChargeNameDesc
FROM #mylistfinal mf
LEFT JOIN ChargeName cn ON TRY_CAST(mf.fromdatetime AS INT) = cn.ChargeId;

-- Final selection from mylistfinal where guid is not null
SELECT *
INTO #FinalResult
FROM #mylistfinal
WHERE guid IS NOT NULL and guid<>0
ORDER BY po_number, abs_num;

-- =============================================
-- Final Result
-- =============================================


select * from #finalresult ;
--where guid is not null and guid<>0;

END


END
